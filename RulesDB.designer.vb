'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="RulesEngine")>  _
Partial Public Class RulesDBDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertMerchantFlag(instance As MerchantFlag)
    End Sub
  Partial Private Sub UpdateMerchantFlag(instance As MerchantFlag)
    End Sub
  Partial Private Sub DeleteMerchantFlag(instance As MerchantFlag)
    End Sub
  Partial Private Sub InsertUserType(instance As UserType)
    End Sub
  Partial Private Sub UpdateUserType(instance As UserType)
    End Sub
  Partial Private Sub DeleteUserType(instance As UserType)
    End Sub
  Partial Private Sub InsertNewMerchant(instance As NewMerchant)
    End Sub
  Partial Private Sub UpdateNewMerchant(instance As NewMerchant)
    End Sub
  Partial Private Sub DeleteNewMerchant(instance As NewMerchant)
    End Sub
  Partial Private Sub InsertNewMerchantTerminal(instance As NewMerchantTerminal)
    End Sub
  Partial Private Sub UpdateNewMerchantTerminal(instance As NewMerchantTerminal)
    End Sub
  Partial Private Sub DeleteNewMerchantTerminal(instance As NewMerchantTerminal)
    End Sub
  Partial Private Sub InsertAccountType(instance As AccountType)
    End Sub
  Partial Private Sub UpdateAccountType(instance As AccountType)
    End Sub
  Partial Private Sub DeleteAccountType(instance As AccountType)
    End Sub
  Partial Private Sub InsertAction(instance As Action)
    End Sub
  Partial Private Sub UpdateAction(instance As Action)
    End Sub
  Partial Private Sub DeleteAction(instance As Action)
    End Sub
  Partial Private Sub InsertAgent(instance As Agent)
    End Sub
  Partial Private Sub UpdateAgent(instance As Agent)
    End Sub
  Partial Private Sub DeleteAgent(instance As Agent)
    End Sub
  Partial Private Sub InsertApplicationCreditProvider(instance As ApplicationCreditProvider)
    End Sub
  Partial Private Sub UpdateApplicationCreditProvider(instance As ApplicationCreditProvider)
    End Sub
  Partial Private Sub DeleteApplicationCreditProvider(instance As ApplicationCreditProvider)
    End Sub
  Partial Private Sub InsertApplicationRepository(instance As ApplicationRepository)
    End Sub
  Partial Private Sub UpdateApplicationRepository(instance As ApplicationRepository)
    End Sub
  Partial Private Sub DeleteApplicationRepository(instance As ApplicationRepository)
    End Sub
  Partial Private Sub InsertApplicationRepositoryHistory(instance As ApplicationRepositoryHistory)
    End Sub
  Partial Private Sub UpdateApplicationRepositoryHistory(instance As ApplicationRepositoryHistory)
    End Sub
  Partial Private Sub DeleteApplicationRepositoryHistory(instance As ApplicationRepositoryHistory)
    End Sub
  Partial Private Sub InsertAuditType(instance As AuditType)
    End Sub
  Partial Private Sub UpdateAuditType(instance As AuditType)
    End Sub
  Partial Private Sub DeleteAuditType(instance As AuditType)
    End Sub
  Partial Private Sub InsertAuthDirectory(instance As AuthDirectory)
    End Sub
  Partial Private Sub UpdateAuthDirectory(instance As AuthDirectory)
    End Sub
  Partial Private Sub DeleteAuthDirectory(instance As AuthDirectory)
    End Sub
  Partial Private Sub InsertAuthDirectoryRepository(instance As AuthDirectoryRepository)
    End Sub
  Partial Private Sub UpdateAuthDirectoryRepository(instance As AuthDirectoryRepository)
    End Sub
  Partial Private Sub DeleteAuthDirectoryRepository(instance As AuthDirectoryRepository)
    End Sub
  Partial Private Sub InsertBandType(instance As BandType)
    End Sub
  Partial Private Sub UpdateBandType(instance As BandType)
    End Sub
  Partial Private Sub DeleteBandType(instance As BandType)
    End Sub
  Partial Private Sub InsertBureau(instance As Bureau)
    End Sub
  Partial Private Sub UpdateBureau(instance As Bureau)
    End Sub
  Partial Private Sub DeleteBureau(instance As Bureau)
    End Sub
  Partial Private Sub InsertBusinessSize(instance As BusinessSize)
    End Sub
  Partial Private Sub UpdateBusinessSize(instance As BusinessSize)
    End Sub
  Partial Private Sub DeleteBusinessSize(instance As BusinessSize)
    End Sub
  Partial Private Sub InsertBusinessStructure(instance As BusinessStructure)
    End Sub
  Partial Private Sub UpdateBusinessStructure(instance As BusinessStructure)
    End Sub
  Partial Private Sub DeleteBusinessStructure(instance As BusinessStructure)
    End Sub
  Partial Private Sub InsertChannel(instance As Channel)
    End Sub
  Partial Private Sub UpdateChannel(instance As Channel)
    End Sub
  Partial Private Sub DeleteChannel(instance As Channel)
    End Sub
  Partial Private Sub InsertCity(instance As City)
    End Sub
  Partial Private Sub UpdateCity(instance As City)
    End Sub
  Partial Private Sub DeleteCity(instance As City)
    End Sub
  Partial Private Sub InsertCollectionStatus(instance As CollectionStatus)
    End Sub
  Partial Private Sub UpdateCollectionStatus(instance As CollectionStatus)
    End Sub
  Partial Private Sub DeleteCollectionStatus(instance As CollectionStatus)
    End Sub
  Partial Private Sub InsertComponent(instance As Component)
    End Sub
  Partial Private Sub UpdateComponent(instance As Component)
    End Sub
  Partial Private Sub DeleteComponent(instance As Component)
    End Sub
  Partial Private Sub InsertComponentHistory(instance As ComponentHistory)
    End Sub
  Partial Private Sub UpdateComponentHistory(instance As ComponentHistory)
    End Sub
  Partial Private Sub DeleteComponentHistory(instance As ComponentHistory)
    End Sub
  Partial Private Sub InsertComponentHistoryType(instance As ComponentHistoryType)
    End Sub
  Partial Private Sub UpdateComponentHistoryType(instance As ComponentHistoryType)
    End Sub
  Partial Private Sub DeleteComponentHistoryType(instance As ComponentHistoryType)
    End Sub
  Partial Private Sub InsertContractTerm(instance As ContractTerm)
    End Sub
  Partial Private Sub UpdateContractTerm(instance As ContractTerm)
    End Sub
  Partial Private Sub DeleteContractTerm(instance As ContractTerm)
    End Sub
  Partial Private Sub InsertCreditProviderAuditType(instance As CreditProviderAuditType)
    End Sub
  Partial Private Sub UpdateCreditProviderAuditType(instance As CreditProviderAuditType)
    End Sub
  Partial Private Sub DeleteCreditProviderAuditType(instance As CreditProviderAuditType)
    End Sub
  Partial Private Sub InsertCreditProviderMerchant(instance As CreditProviderMerchant)
    End Sub
  Partial Private Sub UpdateCreditProviderMerchant(instance As CreditProviderMerchant)
    End Sub
  Partial Private Sub DeleteCreditProviderMerchant(instance As CreditProviderMerchant)
    End Sub
  Partial Private Sub InsertDatabase(instance As Database)
    End Sub
  Partial Private Sub UpdateDatabase(instance As Database)
    End Sub
  Partial Private Sub DeleteDatabase(instance As Database)
    End Sub
  Partial Private Sub InsertDatabaseType(instance As DatabaseType)
    End Sub
  Partial Private Sub UpdateDatabaseType(instance As DatabaseType)
    End Sub
  Partial Private Sub DeleteDatabaseType(instance As DatabaseType)
    End Sub
  Partial Private Sub InsertDebitOrder(instance As DebitOrder)
    End Sub
  Partial Private Sub UpdateDebitOrder(instance As DebitOrder)
    End Sub
  Partial Private Sub DeleteDebitOrder(instance As DebitOrder)
    End Sub
  Partial Private Sub InsertDebitOrderFile(instance As DebitOrderFile)
    End Sub
  Partial Private Sub UpdateDebitOrderFile(instance As DebitOrderFile)
    End Sub
  Partial Private Sub DeleteDebitOrderFile(instance As DebitOrderFile)
    End Sub
  Partial Private Sub InsertDebitOrderFileItem(instance As DebitOrderFileItem)
    End Sub
  Partial Private Sub UpdateDebitOrderFileItem(instance As DebitOrderFileItem)
    End Sub
  Partial Private Sub DeleteDebitOrderFileItem(instance As DebitOrderFileItem)
    End Sub
  Partial Private Sub InsertDebitOrderHistory(instance As DebitOrderHistory)
    End Sub
  Partial Private Sub UpdateDebitOrderHistory(instance As DebitOrderHistory)
    End Sub
  Partial Private Sub DeleteDebitOrderHistory(instance As DebitOrderHistory)
    End Sub
  Partial Private Sub InsertDebitOrderType(instance As DebitOrderType)
    End Sub
  Partial Private Sub UpdateDebitOrderType(instance As DebitOrderType)
    End Sub
  Partial Private Sub DeleteDebitOrderType(instance As DebitOrderType)
    End Sub
  Partial Private Sub InsertDeclineReason(instance As DeclineReason)
    End Sub
  Partial Private Sub UpdateDeclineReason(instance As DeclineReason)
    End Sub
  Partial Private Sub DeleteDeclineReason(instance As DeclineReason)
    End Sub
  Partial Private Sub InsertDesignation(instance As Designation)
    End Sub
  Partial Private Sub UpdateDesignation(instance As Designation)
    End Sub
  Partial Private Sub DeleteDesignation(instance As Designation)
    End Sub
  Partial Private Sub InsertEnvironment(instance As Environment)
    End Sub
  Partial Private Sub UpdateEnvironment(instance As Environment)
    End Sub
  Partial Private Sub DeleteEnvironment(instance As Environment)
    End Sub
  Partial Private Sub InsertEnvironmentRepository(instance As EnvironmentRepository)
    End Sub
  Partial Private Sub UpdateEnvironmentRepository(instance As EnvironmentRepository)
    End Sub
  Partial Private Sub DeleteEnvironmentRepository(instance As EnvironmentRepository)
    End Sub
  Partial Private Sub InsertEnvironmentType(instance As EnvironmentType)
    End Sub
  Partial Private Sub UpdateEnvironmentType(instance As EnvironmentType)
    End Sub
  Partial Private Sub DeleteEnvironmentType(instance As EnvironmentType)
    End Sub
  Partial Private Sub InsertFieldCategory(instance As FieldCategory)
    End Sub
  Partial Private Sub UpdateFieldCategory(instance As FieldCategory)
    End Sub
  Partial Private Sub DeleteFieldCategory(instance As FieldCategory)
    End Sub
  Partial Private Sub InsertFieldCategoryEntity(instance As FieldCategoryEntity)
    End Sub
  Partial Private Sub UpdateFieldCategoryEntity(instance As FieldCategoryEntity)
    End Sub
  Partial Private Sub DeleteFieldCategoryEntity(instance As FieldCategoryEntity)
    End Sub
  Partial Private Sub InsertFieldDefinition(instance As FieldDefinition)
    End Sub
  Partial Private Sub UpdateFieldDefinition(instance As FieldDefinition)
    End Sub
  Partial Private Sub DeleteFieldDefinition(instance As FieldDefinition)
    End Sub
  Partial Private Sub InsertFieldDefinitionEntity(instance As FieldDefinitionEntity)
    End Sub
  Partial Private Sub UpdateFieldDefinitionEntity(instance As FieldDefinitionEntity)
    End Sub
  Partial Private Sub DeleteFieldDefinitionEntity(instance As FieldDefinitionEntity)
    End Sub
  Partial Private Sub InsertFieldOption(instance As FieldOption)
    End Sub
  Partial Private Sub UpdateFieldOption(instance As FieldOption)
    End Sub
  Partial Private Sub DeleteFieldOption(instance As FieldOption)
    End Sub
  Partial Private Sub InsertFieldType(instance As FieldType)
    End Sub
  Partial Private Sub UpdateFieldType(instance As FieldType)
    End Sub
  Partial Private Sub DeleteFieldType(instance As FieldType)
    End Sub
  Partial Private Sub InsertFinancialInstitution(instance As FinancialInstitution)
    End Sub
  Partial Private Sub UpdateFinancialInstitution(instance As FinancialInstitution)
    End Sub
  Partial Private Sub DeleteFinancialInstitution(instance As FinancialInstitution)
    End Sub
  Partial Private Sub InsertFootprint(instance As Footprint)
    End Sub
  Partial Private Sub UpdateFootprint(instance As Footprint)
    End Sub
  Partial Private Sub DeleteFootprint(instance As Footprint)
    End Sub
  Partial Private Sub InsertHistoryType(instance As HistoryType)
    End Sub
  Partial Private Sub UpdateHistoryType(instance As HistoryType)
    End Sub
  Partial Private Sub DeleteHistoryType(instance As HistoryType)
    End Sub
  Partial Private Sub Insertimportmerchant(instance As importmerchant)
    End Sub
  Partial Private Sub Updateimportmerchant(instance As importmerchant)
    End Sub
  Partial Private Sub Deleteimportmerchant(instance As importmerchant)
    End Sub
  Partial Private Sub InsertIndustry(instance As Industry)
    End Sub
  Partial Private Sub UpdateIndustry(instance As Industry)
    End Sub
  Partial Private Sub DeleteIndustry(instance As Industry)
    End Sub
  Partial Private Sub InsertInvoice(instance As Invoice)
    End Sub
  Partial Private Sub UpdateInvoice(instance As Invoice)
    End Sub
  Partial Private Sub DeleteInvoice(instance As Invoice)
    End Sub
  Partial Private Sub InsertMerchant(instance As Merchant)
    End Sub
  Partial Private Sub UpdateMerchant(instance As Merchant)
    End Sub
  Partial Private Sub DeleteMerchant(instance As Merchant)
    End Sub
  Partial Private Sub InsertMerchantBankDetail(instance As MerchantBankDetail)
    End Sub
  Partial Private Sub UpdateMerchantBankDetail(instance As MerchantBankDetail)
    End Sub
  Partial Private Sub DeleteMerchantBankDetail(instance As MerchantBankDetail)
    End Sub
  Partial Private Sub InsertMerchantDetail(instance As MerchantDetail)
    End Sub
  Partial Private Sub UpdateMerchantDetail(instance As MerchantDetail)
    End Sub
  Partial Private Sub DeleteMerchantDetail(instance As MerchantDetail)
    End Sub
  Partial Private Sub InsertMerchantHistory(instance As MerchantHistory)
    End Sub
  Partial Private Sub UpdateMerchantHistory(instance As MerchantHistory)
    End Sub
  Partial Private Sub DeleteMerchantHistory(instance As MerchantHistory)
    End Sub
  Partial Private Sub InsertMerchantHistoryType(instance As MerchantHistoryType)
    End Sub
  Partial Private Sub UpdateMerchantHistoryType(instance As MerchantHistoryType)
    End Sub
  Partial Private Sub DeleteMerchantHistoryType(instance As MerchantHistoryType)
    End Sub
  Partial Private Sub InsertMerchantProductProvider(instance As MerchantProductProvider)
    End Sub
  Partial Private Sub UpdateMerchantProductProvider(instance As MerchantProductProvider)
    End Sub
  Partial Private Sub DeleteMerchantProductProvider(instance As MerchantProductProvider)
    End Sub
  Partial Private Sub InsertMerchantSource(instance As MerchantSource)
    End Sub
  Partial Private Sub UpdateMerchantSource(instance As MerchantSource)
    End Sub
  Partial Private Sub DeleteMerchantSource(instance As MerchantSource)
    End Sub
  Partial Private Sub InsertMerchantTerminal(instance As MerchantTerminal)
    End Sub
  Partial Private Sub UpdateMerchantTerminal(instance As MerchantTerminal)
    End Sub
  Partial Private Sub DeleteMerchantTerminal(instance As MerchantTerminal)
    End Sub
  Partial Private Sub InsertMetric(instance As Metric)
    End Sub
  Partial Private Sub UpdateMetric(instance As Metric)
    End Sub
  Partial Private Sub DeleteMetric(instance As Metric)
    End Sub
  Partial Private Sub InsertOTP(instance As OTP)
    End Sub
  Partial Private Sub UpdateOTP(instance As OTP)
    End Sub
  Partial Private Sub DeleteOTP(instance As OTP)
    End Sub
  Partial Private Sub InsertOTPType(instance As OTPType)
    End Sub
  Partial Private Sub UpdateOTPType(instance As OTPType)
    End Sub
  Partial Private Sub DeleteOTPType(instance As OTPType)
    End Sub
  Partial Private Sub InsertOutcome(instance As Outcome)
    End Sub
  Partial Private Sub UpdateOutcome(instance As Outcome)
    End Sub
  Partial Private Sub DeleteOutcome(instance As Outcome)
    End Sub
  Partial Private Sub InsertProduct(instance As Product)
    End Sub
  Partial Private Sub UpdateProduct(instance As Product)
    End Sub
  Partial Private Sub DeleteProduct(instance As Product)
    End Sub
  Partial Private Sub InsertProductBand(instance As ProductBand)
    End Sub
  Partial Private Sub UpdateProductBand(instance As ProductBand)
    End Sub
  Partial Private Sub DeleteProductBand(instance As ProductBand)
    End Sub
  Partial Private Sub InsertProductBandTerm(instance As ProductBandTerm)
    End Sub
  Partial Private Sub UpdateProductBandTerm(instance As ProductBandTerm)
    End Sub
  Partial Private Sub DeleteProductBandTerm(instance As ProductBandTerm)
    End Sub
  Partial Private Sub InsertProvider(instance As Provider)
    End Sub
  Partial Private Sub UpdateProvider(instance As Provider)
    End Sub
  Partial Private Sub DeleteProvider(instance As Provider)
    End Sub
  Partial Private Sub InsertProvince(instance As Province)
    End Sub
  Partial Private Sub UpdateProvince(instance As Province)
    End Sub
  Partial Private Sub DeleteProvince(instance As Province)
    End Sub
  Partial Private Sub InsertQueue(instance As Queue)
    End Sub
  Partial Private Sub UpdateQueue(instance As Queue)
    End Sub
  Partial Private Sub DeleteQueue(instance As Queue)
    End Sub
  Partial Private Sub InsertRepositoryType(instance As RepositoryType)
    End Sub
  Partial Private Sub UpdateRepositoryType(instance As RepositoryType)
    End Sub
  Partial Private Sub DeleteRepositoryType(instance As RepositoryType)
    End Sub
  Partial Private Sub InsertSalesChannel(instance As SalesChannel)
    End Sub
  Partial Private Sub UpdateSalesChannel(instance As SalesChannel)
    End Sub
  Partial Private Sub DeleteSalesChannel(instance As SalesChannel)
    End Sub
  Partial Private Sub InsertSuburb(instance As Suburb)
    End Sub
  Partial Private Sub UpdateSuburb(instance As Suburb)
    End Sub
  Partial Private Sub DeleteSuburb(instance As Suburb)
    End Sub
  Partial Private Sub InsertSupplier(instance As Supplier)
    End Sub
  Partial Private Sub UpdateSupplier(instance As Supplier)
    End Sub
  Partial Private Sub DeleteSupplier(instance As Supplier)
    End Sub
  Partial Private Sub InsertTerminalMetric(instance As TerminalMetric)
    End Sub
  Partial Private Sub UpdateTerminalMetric(instance As TerminalMetric)
    End Sub
  Partial Private Sub DeleteTerminalMetric(instance As TerminalMetric)
    End Sub
  Partial Private Sub InsertTerminalProduct(instance As TerminalProduct)
    End Sub
  Partial Private Sub UpdateTerminalProduct(instance As TerminalProduct)
    End Sub
  Partial Private Sub DeleteTerminalProduct(instance As TerminalProduct)
    End Sub
  Partial Private Sub InsertTerminalType(instance As TerminalType)
    End Sub
  Partial Private Sub UpdateTerminalType(instance As TerminalType)
    End Sub
  Partial Private Sub DeleteTerminalType(instance As TerminalType)
    End Sub
  Partial Private Sub InsertTypeOfBusiness(instance As TypeOfBusiness)
    End Sub
  Partial Private Sub UpdateTypeOfBusiness(instance As TypeOfBusiness)
    End Sub
  Partial Private Sub DeleteTypeOfBusiness(instance As TypeOfBusiness)
    End Sub
  Partial Private Sub InsertTypeOfService(instance As TypeOfService)
    End Sub
  Partial Private Sub UpdateTypeOfService(instance As TypeOfService)
    End Sub
  Partial Private Sub DeleteTypeOfService(instance As TypeOfService)
    End Sub
  Partial Private Sub InsertUniversalBankCode(instance As UniversalBankCode)
    End Sub
  Partial Private Sub UpdateUniversalBankCode(instance As UniversalBankCode)
    End Sub
  Partial Private Sub DeleteUniversalBankCode(instance As UniversalBankCode)
    End Sub
  Partial Private Sub InsertURL(instance As URL)
    End Sub
  Partial Private Sub UpdateURL(instance As URL)
    End Sub
  Partial Private Sub DeleteURL(instance As URL)
    End Sub
  Partial Private Sub InsertRepository(instance As Repository)
    End Sub
  Partial Private Sub UpdateRepository(instance As Repository)
    End Sub
  Partial Private Sub DeleteRepository(instance As Repository)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("RulesEngineConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property MerchantFlags() As System.Data.Linq.Table(Of MerchantFlag)
		Get
			Return Me.GetTable(Of MerchantFlag)
		End Get
	End Property
	
	Public ReadOnly Property UserTypes() As System.Data.Linq.Table(Of UserType)
		Get
			Return Me.GetTable(Of UserType)
		End Get
	End Property
	
	Public ReadOnly Property NewMerchants() As System.Data.Linq.Table(Of NewMerchant)
		Get
			Return Me.GetTable(Of NewMerchant)
		End Get
	End Property
	
	Public ReadOnly Property NewMerchantTerminals() As System.Data.Linq.Table(Of NewMerchantTerminal)
		Get
			Return Me.GetTable(Of NewMerchantTerminal)
		End Get
	End Property
	
	Public ReadOnly Property AccountTypes() As System.Data.Linq.Table(Of AccountType)
		Get
			Return Me.GetTable(Of AccountType)
		End Get
	End Property
	
	Public ReadOnly Property Actions() As System.Data.Linq.Table(Of Action)
		Get
			Return Me.GetTable(Of Action)
		End Get
	End Property
	
	Public ReadOnly Property Agents() As System.Data.Linq.Table(Of Agent)
		Get
			Return Me.GetTable(Of Agent)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationCreditProviders() As System.Data.Linq.Table(Of ApplicationCreditProvider)
		Get
			Return Me.GetTable(Of ApplicationCreditProvider)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationRepositories() As System.Data.Linq.Table(Of ApplicationRepository)
		Get
			Return Me.GetTable(Of ApplicationRepository)
		End Get
	End Property
	
	Public ReadOnly Property ApplicationRepositoryHistories() As System.Data.Linq.Table(Of ApplicationRepositoryHistory)
		Get
			Return Me.GetTable(Of ApplicationRepositoryHistory)
		End Get
	End Property
	
	Public ReadOnly Property AuditTypes() As System.Data.Linq.Table(Of AuditType)
		Get
			Return Me.GetTable(Of AuditType)
		End Get
	End Property
	
	Public ReadOnly Property AuthDirectories() As System.Data.Linq.Table(Of AuthDirectory)
		Get
			Return Me.GetTable(Of AuthDirectory)
		End Get
	End Property
	
	Public ReadOnly Property AuthDirectoryRepositories() As System.Data.Linq.Table(Of AuthDirectoryRepository)
		Get
			Return Me.GetTable(Of AuthDirectoryRepository)
		End Get
	End Property
	
	Public ReadOnly Property BandTypes() As System.Data.Linq.Table(Of BandType)
		Get
			Return Me.GetTable(Of BandType)
		End Get
	End Property
	
	Public ReadOnly Property Bureaus() As System.Data.Linq.Table(Of Bureau)
		Get
			Return Me.GetTable(Of Bureau)
		End Get
	End Property
	
	Public ReadOnly Property BusinessSizes() As System.Data.Linq.Table(Of BusinessSize)
		Get
			Return Me.GetTable(Of BusinessSize)
		End Get
	End Property
	
	Public ReadOnly Property BusinessStructures() As System.Data.Linq.Table(Of BusinessStructure)
		Get
			Return Me.GetTable(Of BusinessStructure)
		End Get
	End Property
	
	Public ReadOnly Property Channels() As System.Data.Linq.Table(Of Channel)
		Get
			Return Me.GetTable(Of Channel)
		End Get
	End Property
	
	Public ReadOnly Property Cities() As System.Data.Linq.Table(Of City)
		Get
			Return Me.GetTable(Of City)
		End Get
	End Property
	
	Public ReadOnly Property CollectionStatus() As System.Data.Linq.Table(Of CollectionStatus)
		Get
			Return Me.GetTable(Of CollectionStatus)
		End Get
	End Property
	
	Public ReadOnly Property Components() As System.Data.Linq.Table(Of Component)
		Get
			Return Me.GetTable(Of Component)
		End Get
	End Property
	
	Public ReadOnly Property ComponentHistories() As System.Data.Linq.Table(Of ComponentHistory)
		Get
			Return Me.GetTable(Of ComponentHistory)
		End Get
	End Property
	
	Public ReadOnly Property ComponentHistoryTypes() As System.Data.Linq.Table(Of ComponentHistoryType)
		Get
			Return Me.GetTable(Of ComponentHistoryType)
		End Get
	End Property
	
	Public ReadOnly Property ContractTerms() As System.Data.Linq.Table(Of ContractTerm)
		Get
			Return Me.GetTable(Of ContractTerm)
		End Get
	End Property
	
	Public ReadOnly Property CreditProviderAuditTypes() As System.Data.Linq.Table(Of CreditProviderAuditType)
		Get
			Return Me.GetTable(Of CreditProviderAuditType)
		End Get
	End Property
	
	Public ReadOnly Property CreditProviderMerchants() As System.Data.Linq.Table(Of CreditProviderMerchant)
		Get
			Return Me.GetTable(Of CreditProviderMerchant)
		End Get
	End Property
	
	Public ReadOnly Property Databases() As System.Data.Linq.Table(Of Database)
		Get
			Return Me.GetTable(Of Database)
		End Get
	End Property
	
	Public ReadOnly Property DatabaseTypes() As System.Data.Linq.Table(Of DatabaseType)
		Get
			Return Me.GetTable(Of DatabaseType)
		End Get
	End Property
	
	Public ReadOnly Property DebitOrders() As System.Data.Linq.Table(Of DebitOrder)
		Get
			Return Me.GetTable(Of DebitOrder)
		End Get
	End Property
	
	Public ReadOnly Property DebitOrderFiles() As System.Data.Linq.Table(Of DebitOrderFile)
		Get
			Return Me.GetTable(Of DebitOrderFile)
		End Get
	End Property
	
	Public ReadOnly Property DebitOrderFileItems() As System.Data.Linq.Table(Of DebitOrderFileItem)
		Get
			Return Me.GetTable(Of DebitOrderFileItem)
		End Get
	End Property
	
	Public ReadOnly Property DebitOrderHistories() As System.Data.Linq.Table(Of DebitOrderHistory)
		Get
			Return Me.GetTable(Of DebitOrderHistory)
		End Get
	End Property
	
	Public ReadOnly Property DebitOrderTypes() As System.Data.Linq.Table(Of DebitOrderType)
		Get
			Return Me.GetTable(Of DebitOrderType)
		End Get
	End Property
	
	Public ReadOnly Property DeclineReasons() As System.Data.Linq.Table(Of DeclineReason)
		Get
			Return Me.GetTable(Of DeclineReason)
		End Get
	End Property
	
	Public ReadOnly Property Designations() As System.Data.Linq.Table(Of Designation)
		Get
			Return Me.GetTable(Of Designation)
		End Get
	End Property
	
	Public ReadOnly Property Environments() As System.Data.Linq.Table(Of Environment)
		Get
			Return Me.GetTable(Of Environment)
		End Get
	End Property
	
	Public ReadOnly Property EnvironmentRepositories() As System.Data.Linq.Table(Of EnvironmentRepository)
		Get
			Return Me.GetTable(Of EnvironmentRepository)
		End Get
	End Property
	
	Public ReadOnly Property EnvironmentTypes() As System.Data.Linq.Table(Of EnvironmentType)
		Get
			Return Me.GetTable(Of EnvironmentType)
		End Get
	End Property
	
	Public ReadOnly Property FieldCategories() As System.Data.Linq.Table(Of FieldCategory)
		Get
			Return Me.GetTable(Of FieldCategory)
		End Get
	End Property
	
	Public ReadOnly Property FieldCategoryEntities() As System.Data.Linq.Table(Of FieldCategoryEntity)
		Get
			Return Me.GetTable(Of FieldCategoryEntity)
		End Get
	End Property
	
	Public ReadOnly Property FieldDefinitions() As System.Data.Linq.Table(Of FieldDefinition)
		Get
			Return Me.GetTable(Of FieldDefinition)
		End Get
	End Property
	
	Public ReadOnly Property FieldDefinitionEntities() As System.Data.Linq.Table(Of FieldDefinitionEntity)
		Get
			Return Me.GetTable(Of FieldDefinitionEntity)
		End Get
	End Property
	
	Public ReadOnly Property FieldOptions() As System.Data.Linq.Table(Of FieldOption)
		Get
			Return Me.GetTable(Of FieldOption)
		End Get
	End Property
	
	Public ReadOnly Property FieldTypes() As System.Data.Linq.Table(Of FieldType)
		Get
			Return Me.GetTable(Of FieldType)
		End Get
	End Property
	
	Public ReadOnly Property FinancialInstitutions() As System.Data.Linq.Table(Of FinancialInstitution)
		Get
			Return Me.GetTable(Of FinancialInstitution)
		End Get
	End Property
	
	Public ReadOnly Property Footprints() As System.Data.Linq.Table(Of Footprint)
		Get
			Return Me.GetTable(Of Footprint)
		End Get
	End Property
	
	Public ReadOnly Property HistoryTypes() As System.Data.Linq.Table(Of HistoryType)
		Get
			Return Me.GetTable(Of HistoryType)
		End Get
	End Property
	
	Public ReadOnly Property importmerchants() As System.Data.Linq.Table(Of importmerchant)
		Get
			Return Me.GetTable(Of importmerchant)
		End Get
	End Property
	
	Public ReadOnly Property Industries() As System.Data.Linq.Table(Of Industry)
		Get
			Return Me.GetTable(Of Industry)
		End Get
	End Property
	
	Public ReadOnly Property Invoices() As System.Data.Linq.Table(Of Invoice)
		Get
			Return Me.GetTable(Of Invoice)
		End Get
	End Property
	
	Public ReadOnly Property Merchants() As System.Data.Linq.Table(Of Merchant)
		Get
			Return Me.GetTable(Of Merchant)
		End Get
	End Property
	
	Public ReadOnly Property MerchantBankDetails() As System.Data.Linq.Table(Of MerchantBankDetail)
		Get
			Return Me.GetTable(Of MerchantBankDetail)
		End Get
	End Property
	
	Public ReadOnly Property MerchantDetails() As System.Data.Linq.Table(Of MerchantDetail)
		Get
			Return Me.GetTable(Of MerchantDetail)
		End Get
	End Property
	
	Public ReadOnly Property MerchantHistories() As System.Data.Linq.Table(Of MerchantHistory)
		Get
			Return Me.GetTable(Of MerchantHistory)
		End Get
	End Property
	
	Public ReadOnly Property MerchantHistoryTypes() As System.Data.Linq.Table(Of MerchantHistoryType)
		Get
			Return Me.GetTable(Of MerchantHistoryType)
		End Get
	End Property
	
	Public ReadOnly Property MerchantProductProviders() As System.Data.Linq.Table(Of MerchantProductProvider)
		Get
			Return Me.GetTable(Of MerchantProductProvider)
		End Get
	End Property
	
	Public ReadOnly Property MerchantSources() As System.Data.Linq.Table(Of MerchantSource)
		Get
			Return Me.GetTable(Of MerchantSource)
		End Get
	End Property
	
	Public ReadOnly Property MerchantTerminals() As System.Data.Linq.Table(Of MerchantTerminal)
		Get
			Return Me.GetTable(Of MerchantTerminal)
		End Get
	End Property
	
	Public ReadOnly Property Metrics() As System.Data.Linq.Table(Of Metric)
		Get
			Return Me.GetTable(Of Metric)
		End Get
	End Property
	
	Public ReadOnly Property OTPs() As System.Data.Linq.Table(Of OTP)
		Get
			Return Me.GetTable(Of OTP)
		End Get
	End Property
	
	Public ReadOnly Property OTPTypes() As System.Data.Linq.Table(Of OTPType)
		Get
			Return Me.GetTable(Of OTPType)
		End Get
	End Property
	
	Public ReadOnly Property Outcomes() As System.Data.Linq.Table(Of Outcome)
		Get
			Return Me.GetTable(Of Outcome)
		End Get
	End Property
	
	Public ReadOnly Property Products() As System.Data.Linq.Table(Of Product)
		Get
			Return Me.GetTable(Of Product)
		End Get
	End Property
	
	Public ReadOnly Property ProductBands() As System.Data.Linq.Table(Of ProductBand)
		Get
			Return Me.GetTable(Of ProductBand)
		End Get
	End Property
	
	Public ReadOnly Property ProductBandTerms() As System.Data.Linq.Table(Of ProductBandTerm)
		Get
			Return Me.GetTable(Of ProductBandTerm)
		End Get
	End Property
	
	Public ReadOnly Property Providers() As System.Data.Linq.Table(Of Provider)
		Get
			Return Me.GetTable(Of Provider)
		End Get
	End Property
	
	Public ReadOnly Property Provinces() As System.Data.Linq.Table(Of Province)
		Get
			Return Me.GetTable(Of Province)
		End Get
	End Property
	
	Public ReadOnly Property Queues() As System.Data.Linq.Table(Of Queue)
		Get
			Return Me.GetTable(Of Queue)
		End Get
	End Property
	
	Public ReadOnly Property RepositoryTypes() As System.Data.Linq.Table(Of RepositoryType)
		Get
			Return Me.GetTable(Of RepositoryType)
		End Get
	End Property
	
	Public ReadOnly Property SalesChannels() As System.Data.Linq.Table(Of SalesChannel)
		Get
			Return Me.GetTable(Of SalesChannel)
		End Get
	End Property
	
	Public ReadOnly Property Suburbs() As System.Data.Linq.Table(Of Suburb)
		Get
			Return Me.GetTable(Of Suburb)
		End Get
	End Property
	
	Public ReadOnly Property Suppliers() As System.Data.Linq.Table(Of Supplier)
		Get
			Return Me.GetTable(Of Supplier)
		End Get
	End Property
	
	Public ReadOnly Property TerminalMetrics() As System.Data.Linq.Table(Of TerminalMetric)
		Get
			Return Me.GetTable(Of TerminalMetric)
		End Get
	End Property
	
	Public ReadOnly Property TerminalProducts() As System.Data.Linq.Table(Of TerminalProduct)
		Get
			Return Me.GetTable(Of TerminalProduct)
		End Get
	End Property
	
	Public ReadOnly Property TerminalTypes() As System.Data.Linq.Table(Of TerminalType)
		Get
			Return Me.GetTable(Of TerminalType)
		End Get
	End Property
	
	Public ReadOnly Property TypeOfBusinesses() As System.Data.Linq.Table(Of TypeOfBusiness)
		Get
			Return Me.GetTable(Of TypeOfBusiness)
		End Get
	End Property
	
	Public ReadOnly Property TypeOfServices() As System.Data.Linq.Table(Of TypeOfService)
		Get
			Return Me.GetTable(Of TypeOfService)
		End Get
	End Property
	
	Public ReadOnly Property UniversalBankCodes() As System.Data.Linq.Table(Of UniversalBankCode)
		Get
			Return Me.GetTable(Of UniversalBankCode)
		End Get
	End Property
	
	Public ReadOnly Property URLs() As System.Data.Linq.Table(Of URL)
		Get
			Return Me.GetTable(Of URL)
		End Get
	End Property
	
	Public ReadOnly Property vPaymentRequestStages() As System.Data.Linq.Table(Of vPaymentRequestStage)
		Get
			Return Me.GetTable(Of vPaymentRequestStage)
		End Get
	End Property
	
	Public ReadOnly Property vWFUATs() As System.Data.Linq.Table(Of vWFUAT)
		Get
			Return Me.GetTable(Of vWFUAT)
		End Get
	End Property
	
	Public ReadOnly Property vPaymentRequestUATs() As System.Data.Linq.Table(Of vPaymentRequestUAT)
		Get
			Return Me.GetTable(Of vPaymentRequestUAT)
		End Get
	End Property
	
	Public ReadOnly Property vWFProductions() As System.Data.Linq.Table(Of vWFProduction)
		Get
			Return Me.GetTable(Of vWFProduction)
		End Get
	End Property
	
	Public ReadOnly Property vWFStages() As System.Data.Linq.Table(Of vWFStage)
		Get
			Return Me.GetTable(Of vWFStage)
		End Get
	End Property
	
	Public ReadOnly Property vDisbursements() As System.Data.Linq.Table(Of vDisbursement)
		Get
			Return Me.GetTable(Of vDisbursement)
		End Get
	End Property
	
	Public ReadOnly Property vDebitOrders() As System.Data.Linq.Table(Of vDebitOrder)
		Get
			Return Me.GetTable(Of vDebitOrder)
		End Get
	End Property
	
	Public ReadOnly Property Repositories() As System.Data.Linq.Table(Of Repository)
		Get
			Return Me.GetTable(Of Repository)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="CAMS.MerchantFlags")>  _
Partial Public Class MerchantFlag
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Value As Integer
	
	Private _Description As String
	
	Private _CreateDate As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnValueChanging(value As Integer)
    End Sub
    Partial Private Sub OnValueChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Value", DbType:="Int NOT NULL")>  _
	Public Property Value() As Integer
		Get
			Return Me._Value
		End Get
		Set
			If ((Me._Value = value)  _
						= false) Then
				Me.OnValueChanging(value)
				Me.SendPropertyChanging
				Me._Value = value
				Me.SendPropertyChanged("Value")
				Me.OnValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(200)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UserType")>  _
Partial Public Class UserType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _AuthDirectories As EntitySet(Of AuthDirectory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AuthDirectories = New EntitySet(Of AuthDirectory)(AddressOf Me.attach_AuthDirectories, AddressOf Me.detach_AuthDirectories)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserType_AuthDirectory", Storage:="_AuthDirectories", ThisKey:="ID", OtherKey:="UserTypeID")>  _
	Public Property AuthDirectories() As EntitySet(Of AuthDirectory)
		Get
			Return Me._AuthDirectories
		End Get
		Set
			Me._AuthDirectories.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AuthDirectories(ByVal entity As AuthDirectory)
		Me.SendPropertyChanging
		entity.UserType = Me
	End Sub
	
	Private Sub detach_AuthDirectories(ByVal entity As AuthDirectory)
		Me.SendPropertyChanging
		entity.UserType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="CAMS.NewMerchants")>  _
Partial Public Class NewMerchant
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _MerchantId As Long
	
	Private _TradingName As String
	
	Private _ContactName As String
	
	Private _BankAccountNumber As String
	
	Private _MID As String
	
	Private _ContactNumber As String
	
	Private _EmailAddress As String
	
	Private _Result As System.Xml.Linq.XElement
	
	Private _CreateDate As Date
	
	Private _Flags As Integer
	
	Private _Merchant As EntityRef(Of Merchant)
	
	Private _Merchant1 As EntityRef(Of Merchant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnMerchantIdChanging(value As Long)
    End Sub
    Partial Private Sub OnMerchantIdChanged()
    End Sub
    Partial Private Sub OnTradingNameChanging(value As String)
    End Sub
    Partial Private Sub OnTradingNameChanged()
    End Sub
    Partial Private Sub OnContactNameChanging(value As String)
    End Sub
    Partial Private Sub OnContactNameChanged()
    End Sub
    Partial Private Sub OnBankAccountNumberChanging(value As String)
    End Sub
    Partial Private Sub OnBankAccountNumberChanged()
    End Sub
    Partial Private Sub OnMIDChanging(value As String)
    End Sub
    Partial Private Sub OnMIDChanged()
    End Sub
    Partial Private Sub OnContactNumberChanging(value As String)
    End Sub
    Partial Private Sub OnContactNumberChanged()
    End Sub
    Partial Private Sub OnEmailAddressChanging(value As String)
    End Sub
    Partial Private Sub OnEmailAddressChanged()
    End Sub
    Partial Private Sub OnResultChanging(value As System.Xml.Linq.XElement)
    End Sub
    Partial Private Sub OnResultChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    Partial Private Sub OnFlagsChanging(value As Integer)
    End Sub
    Partial Private Sub OnFlagsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Merchant = CType(Nothing, EntityRef(Of Merchant))
		Me._Merchant1 = CType(Nothing, EntityRef(Of Merchant))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantId", DbType:="BigInt NOT NULL")>  _
	Public Property MerchantId() As Long
		Get
			Return Me._MerchantId
		End Get
		Set
			If ((Me._MerchantId = value)  _
						= false) Then
				If (Me._Merchant.HasLoadedOrAssignedValue OrElse Me._Merchant1.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMerchantIdChanging(value)
				Me.SendPropertyChanging
				Me._MerchantId = value
				Me.SendPropertyChanged("MerchantId")
				Me.OnMerchantIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TradingName", DbType:="VarChar(200)")>  _
	Public Property TradingName() As String
		Get
			Return Me._TradingName
		End Get
		Set
			If (String.Equals(Me._TradingName, value) = false) Then
				Me.OnTradingNameChanging(value)
				Me.SendPropertyChanging
				Me._TradingName = value
				Me.SendPropertyChanged("TradingName")
				Me.OnTradingNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactName", DbType:="VarChar(200)")>  _
	Public Property ContactName() As String
		Get
			Return Me._ContactName
		End Get
		Set
			If (String.Equals(Me._ContactName, value) = false) Then
				Me.OnContactNameChanging(value)
				Me.SendPropertyChanging
				Me._ContactName = value
				Me.SendPropertyChanged("ContactName")
				Me.OnContactNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankAccountNumber", DbType:="VarChar(20)")>  _
	Public Property BankAccountNumber() As String
		Get
			Return Me._BankAccountNumber
		End Get
		Set
			If (String.Equals(Me._BankAccountNumber, value) = false) Then
				Me.OnBankAccountNumberChanging(value)
				Me.SendPropertyChanging
				Me._BankAccountNumber = value
				Me.SendPropertyChanged("BankAccountNumber")
				Me.OnBankAccountNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MID", DbType:="VarChar(20)")>  _
	Public Property MID() As String
		Get
			Return Me._MID
		End Get
		Set
			If (String.Equals(Me._MID, value) = false) Then
				Me.OnMIDChanging(value)
				Me.SendPropertyChanging
				Me._MID = value
				Me.SendPropertyChanged("MID")
				Me.OnMIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContactNumber", DbType:="VarChar(20)")>  _
	Public Property ContactNumber() As String
		Get
			Return Me._ContactNumber
		End Get
		Set
			If (String.Equals(Me._ContactNumber, value) = false) Then
				Me.OnContactNumberChanging(value)
				Me.SendPropertyChanging
				Me._ContactNumber = value
				Me.SendPropertyChanged("ContactNumber")
				Me.OnContactNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="VarChar(200)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me.OnEmailAddressChanging(value)
				Me.SendPropertyChanging
				Me._EmailAddress = value
				Me.SendPropertyChanged("EmailAddress")
				Me.OnEmailAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Result", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Result() As System.Xml.Linq.XElement
		Get
			Return Me._Result
		End Get
		Set
			If (Object.Equals(Me._Result, value) = false) Then
				Me.OnResultChanging(value)
				Me.SendPropertyChanging
				Me._Result = value
				Me.SendPropertyChanged("Result")
				Me.OnResultChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Flags", DbType:="Int NOT NULL")>  _
	Public Property Flags() As Integer
		Get
			Return Me._Flags
		End Get
		Set
			If ((Me._Flags = value)  _
						= false) Then
				Me.OnFlagsChanging(value)
				Me.SendPropertyChanging
				Me._Flags = value
				Me.SendPropertyChanged("Flags")
				Me.OnFlagsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_NewMerchant", Storage:="_Merchant", ThisKey:="MerchantId", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Merchant() As Merchant
		Get
			Return Me._Merchant.Entity
		End Get
		Set
			Dim previousValue As Merchant = Me._Merchant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Merchant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Merchant.Entity = Nothing
					previousValue.NewMerchants.Remove(Me)
				End If
				Me._Merchant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.NewMerchants.Add(Me)
					Me._MerchantId = value.ID
				Else
					Me._MerchantId = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("Merchant")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_NewMerchant1", Storage:="_Merchant1", ThisKey:="MerchantId", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Merchant1() As Merchant
		Get
			Return Me._Merchant1.Entity
		End Get
		Set
			Dim previousValue As Merchant = Me._Merchant1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Merchant1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Merchant1.Entity = Nothing
					previousValue.NewMerchants1.Remove(Me)
				End If
				Me._Merchant1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.NewMerchants1.Add(Me)
					Me._MerchantId = value.ID
				Else
					Me._MerchantId = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("Merchant1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="CAMS.NewMerchantTerminals")>  _
Partial Public Class NewMerchantTerminal
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _MerchantId As System.Nullable(Of Integer)
	
	Private _TerminalId As String
	
	Private _MonthlyFee As String
	
	Private _ApplicationType As String
	
	Private _MerchantFee As String
	
	Private _Term As String
	
	Private _ActivationDate As String
	
	Private _Result As System.Xml.Linq.XElement
	
	Private _CreateDate As Date
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnMerchantIdChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMerchantIdChanged()
    End Sub
    Partial Private Sub OnTerminalIdChanging(value As String)
    End Sub
    Partial Private Sub OnTerminalIdChanged()
    End Sub
    Partial Private Sub OnMonthlyFeeChanging(value As String)
    End Sub
    Partial Private Sub OnMonthlyFeeChanged()
    End Sub
    Partial Private Sub OnApplicationTypeChanging(value As String)
    End Sub
    Partial Private Sub OnApplicationTypeChanged()
    End Sub
    Partial Private Sub OnMerchantFeeChanging(value As String)
    End Sub
    Partial Private Sub OnMerchantFeeChanged()
    End Sub
    Partial Private Sub OnTermChanging(value As String)
    End Sub
    Partial Private Sub OnTermChanged()
    End Sub
    Partial Private Sub OnActivationDateChanging(value As String)
    End Sub
    Partial Private Sub OnActivationDateChanged()
    End Sub
    Partial Private Sub OnResultChanging(value As System.Xml.Linq.XElement)
    End Sub
    Partial Private Sub OnResultChanged()
    End Sub
    Partial Private Sub OnCreateDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreateDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantId", DbType:="Int")>  _
	Public Property MerchantId() As System.Nullable(Of Integer)
		Get
			Return Me._MerchantId
		End Get
		Set
			If (Me._MerchantId.Equals(value) = false) Then
				Me.OnMerchantIdChanging(value)
				Me.SendPropertyChanging
				Me._MerchantId = value
				Me.SendPropertyChanged("MerchantId")
				Me.OnMerchantIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TerminalId", DbType:="VarChar(200)")>  _
	Public Property TerminalId() As String
		Get
			Return Me._TerminalId
		End Get
		Set
			If (String.Equals(Me._TerminalId, value) = false) Then
				Me.OnTerminalIdChanging(value)
				Me.SendPropertyChanging
				Me._TerminalId = value
				Me.SendPropertyChanged("TerminalId")
				Me.OnTerminalIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MonthlyFee", DbType:="VarChar(20)")>  _
	Public Property MonthlyFee() As String
		Get
			Return Me._MonthlyFee
		End Get
		Set
			If (String.Equals(Me._MonthlyFee, value) = false) Then
				Me.OnMonthlyFeeChanging(value)
				Me.SendPropertyChanging
				Me._MonthlyFee = value
				Me.SendPropertyChanged("MonthlyFee")
				Me.OnMonthlyFeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationType", DbType:="VarChar(200)")>  _
	Public Property ApplicationType() As String
		Get
			Return Me._ApplicationType
		End Get
		Set
			If (String.Equals(Me._ApplicationType, value) = false) Then
				Me.OnApplicationTypeChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationType = value
				Me.SendPropertyChanged("ApplicationType")
				Me.OnApplicationTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantFee", DbType:="VarChar(20)")>  _
	Public Property MerchantFee() As String
		Get
			Return Me._MerchantFee
		End Get
		Set
			If (String.Equals(Me._MerchantFee, value) = false) Then
				Me.OnMerchantFeeChanging(value)
				Me.SendPropertyChanging
				Me._MerchantFee = value
				Me.SendPropertyChanged("MerchantFee")
				Me.OnMerchantFeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Term", DbType:="VarChar(20)")>  _
	Public Property Term() As String
		Get
			Return Me._Term
		End Get
		Set
			If (String.Equals(Me._Term, value) = false) Then
				Me.OnTermChanging(value)
				Me.SendPropertyChanging
				Me._Term = value
				Me.SendPropertyChanged("Term")
				Me.OnTermChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivationDate", DbType:="VarChar(20)")>  _
	Public Property ActivationDate() As String
		Get
			Return Me._ActivationDate
		End Get
		Set
			If (String.Equals(Me._ActivationDate, value) = false) Then
				Me.OnActivationDateChanging(value)
				Me.SendPropertyChanging
				Me._ActivationDate = value
				Me.SendPropertyChanged("ActivationDate")
				Me.OnActivationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Result", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Result() As System.Xml.Linq.XElement
		Get
			Return Me._Result
		End Get
		Set
			If (Object.Equals(Me._Result, value) = false) Then
				Me.OnResultChanging(value)
				Me.SendPropertyChanging
				Me._Result = value
				Me.SendPropertyChanged("Result")
				Me.OnResultChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreateDate", DbType:="DateTime NOT NULL")>  _
	Public Property CreateDate() As Date
		Get
			Return Me._CreateDate
		End Get
		Set
			If ((Me._CreateDate = value)  _
						= false) Then
				Me.OnCreateDateChanging(value)
				Me.SendPropertyChanging
				Me._CreateDate = value
				Me.SendPropertyChanged("CreateDate")
				Me.OnCreateDateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AccountType")>  _
Partial Public Class AccountType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _Code As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _MerchantBankDetails As EntitySet(Of MerchantBankDetail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MerchantBankDetails = New EntitySet(Of MerchantBankDetail)(AddressOf Me.attach_MerchantBankDetails, AddressOf Me.detach_MerchantBankDetails)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code", DbType:="NVarChar(50)")>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AccountType_MerchantBankDetail", Storage:="_MerchantBankDetails", ThisKey:="ID", OtherKey:="AccountTypeID")>  _
	Public Property MerchantBankDetails() As EntitySet(Of MerchantBankDetail)
		Get
			Return Me._MerchantBankDetails
		End Get
		Set
			Me._MerchantBankDetails.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_MerchantBankDetails(ByVal entity As MerchantBankDetail)
		Me.SendPropertyChanging
		entity.AccountType = Me
	End Sub
	
	Private Sub detach_MerchantBankDetails(ByVal entity As MerchantBankDetail)
		Me.SendPropertyChanging
		entity.AccountType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Action")>  _
Partial Public Class Action
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _RaisesAlert As System.Nullable(Of Boolean)
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _ApplicationRepositoryHistories As EntitySet(Of ApplicationRepositoryHistory)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory1 As EntityRef(Of AuthDirectory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnRaisesAlertChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnRaisesAlertChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationRepositoryHistories = New EntitySet(Of ApplicationRepositoryHistory)(AddressOf Me.attach_ApplicationRepositoryHistories, AddressOf Me.detach_ApplicationRepositoryHistories)
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory1 = CType(Nothing, EntityRef(Of AuthDirectory))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RaisesAlert", DbType:="Bit")>  _
	Public Property RaisesAlert() As System.Nullable(Of Boolean)
		Get
			Return Me._RaisesAlert
		End Get
		Set
			If (Me._RaisesAlert.Equals(value) = false) Then
				Me.OnRaisesAlertChanging(value)
				Me.SendPropertyChanging
				Me._RaisesAlert = value
				Me.SendPropertyChanged("RaisesAlert")
				Me.OnRaisesAlertChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				If Me._AuthDirectory1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Action_ApplicationRepositoryHistory", Storage:="_ApplicationRepositoryHistories", ThisKey:="ID", OtherKey:="ActionID")>  _
	Public Property ApplicationRepositoryHistories() As EntitySet(Of ApplicationRepositoryHistory)
		Get
			Return Me._ApplicationRepositoryHistories
		End Get
		Set
			Me._ApplicationRepositoryHistories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Action", Storage:="_AuthDirectory", ThisKey:="CreatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.Actions.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Actions.Add(Me)
					Me._CreatedBy = value.ID
				Else
					Me._CreatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Action1", Storage:="_AuthDirectory1", ThisKey:="UpdatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory1() As AuthDirectory
		Get
			Return Me._AuthDirectory1.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory1.Entity = Nothing
					previousValue.Actions1.Remove(Me)
				End If
				Me._AuthDirectory1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Actions1.Add(Me)
					Me._UpdatedBy = value.ID
				Else
					Me._UpdatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApplicationRepositoryHistories(ByVal entity As ApplicationRepositoryHistory)
		Me.SendPropertyChanging
		entity.Action = Me
	End Sub
	
	Private Sub detach_ApplicationRepositoryHistories(ByVal entity As ApplicationRepositoryHistory)
		Me.SendPropertyChanging
		entity.Action = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Agent")>  _
Partial Public Class Agent
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _GUID As System.Nullable(Of System.Guid)
	
	Private _Merchants As EntitySet(Of Merchant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnGUIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnGUIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Merchants = New EntitySet(Of Merchant)(AddressOf Me.attach_Merchants, AddressOf Me.detach_Merchants)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GUID", DbType:="UniqueIdentifier")>  _
	Public Property GUID() As System.Nullable(Of System.Guid)
		Get
			Return Me._GUID
		End Get
		Set
			If (Me._GUID.Equals(value) = false) Then
				Me.OnGUIDChanging(value)
				Me.SendPropertyChanging
				Me._GUID = value
				Me.SendPropertyChanged("GUID")
				Me.OnGUIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Agent_Merchant", Storage:="_Merchants", ThisKey:="ID", OtherKey:="AgentID")>  _
	Public Property Merchants() As EntitySet(Of Merchant)
		Get
			Return Me._Merchants
		End Get
		Set
			Me._Merchants.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Merchants(ByVal entity As Merchant)
		Me.SendPropertyChanging
		entity.Agent = Me
	End Sub
	
	Private Sub detach_Merchants(ByVal entity As Merchant)
		Me.SendPropertyChanging
		entity.Agent = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationCreditProvider")>  _
Partial Public Class ApplicationCreditProvider
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _DatabaseID As Long
	
	Private _CreditProviderID As System.Nullable(Of Long)
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _DateSent As System.Nullable(Of Date)
	
	Private _DateOfferMade As System.Nullable(Of Date)
	
	Private _DateOfferAccepted As System.Nullable(Of Date)
	
	Private _DateOfferRejected As System.Nullable(Of Date)
	
	Private _DateApproved As System.Nullable(Of Date)
	
	Private _DateDeclined As System.Nullable(Of Date)
	
	Private _DateAccepted As System.Nullable(Of Date)
	
	Private _DateRejected As System.Nullable(Of Date)
	
	Private _DateContracted As System.Nullable(Of Date)
	
	Private _DateCompleted As System.Nullable(Of Date)
	
	Private _DateCancelled As System.Nullable(Of Date)
	
	Private _DateExpired As System.Nullable(Of Date)
	
	Private _DatePaymentUploaded As System.Nullable(Of Date)
	
	Private _DatePaymentVerified As System.Nullable(Of Date)
	
	Private _DatePaymentReceived As System.Nullable(Of Date)
	
	Private _Sent As System.Nullable(Of Boolean)
	
	Private _OfferMade As System.Nullable(Of Boolean)
	
	Private _OfferAccepted As System.Nullable(Of Boolean)
	
	Private _OfferRejected As System.Nullable(Of Boolean)
	
	Private _Approved As System.Nullable(Of Boolean)
	
	Private _Declined As System.Nullable(Of Boolean)
	
	Private _Accepted As System.Nullable(Of Boolean)
	
	Private _Rejected As System.Nullable(Of Boolean)
	
	Private _Contracted As System.Nullable(Of Boolean)
	
	Private _PaymentUploaded As System.Nullable(Of Boolean)
	
	Private _PaymentVerified As System.Nullable(Of Boolean)
	
	Private _PaymentReceived As System.Nullable(Of Boolean)
	
	Private _Completed As System.Nullable(Of Boolean)
	
	Private _Cancelled As System.Nullable(Of Boolean)
	
	Private _Expired As System.Nullable(Of Boolean)
	
	Private _Pending As System.Nullable(Of Boolean)
	
	Private _DateLastUpdated As System.Nullable(Of Date)
	
	Private _Database As EntityRef(Of Database)
	
	Private _FinancialInstitution As EntityRef(Of FinancialInstitution)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnDatabaseIDChanging(value As Long)
    End Sub
    Partial Private Sub OnDatabaseIDChanged()
    End Sub
    Partial Private Sub OnCreditProviderIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreditProviderIDChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnDateSentChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateSentChanged()
    End Sub
    Partial Private Sub OnDateOfferMadeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateOfferMadeChanged()
    End Sub
    Partial Private Sub OnDateOfferAcceptedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateOfferAcceptedChanged()
    End Sub
    Partial Private Sub OnDateOfferRejectedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateOfferRejectedChanged()
    End Sub
    Partial Private Sub OnDateApprovedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateApprovedChanged()
    End Sub
    Partial Private Sub OnDateDeclinedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateDeclinedChanged()
    End Sub
    Partial Private Sub OnDateAcceptedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAcceptedChanged()
    End Sub
    Partial Private Sub OnDateRejectedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateRejectedChanged()
    End Sub
    Partial Private Sub OnDateContractedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateContractedChanged()
    End Sub
    Partial Private Sub OnDateCompletedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCompletedChanged()
    End Sub
    Partial Private Sub OnDateCancelledChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCancelledChanged()
    End Sub
    Partial Private Sub OnDateExpiredChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateExpiredChanged()
    End Sub
    Partial Private Sub OnDatePaymentUploadedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatePaymentUploadedChanged()
    End Sub
    Partial Private Sub OnDatePaymentVerifiedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatePaymentVerifiedChanged()
    End Sub
    Partial Private Sub OnDatePaymentReceivedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatePaymentReceivedChanged()
    End Sub
    Partial Private Sub OnSentChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSentChanged()
    End Sub
    Partial Private Sub OnOfferMadeChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnOfferMadeChanged()
    End Sub
    Partial Private Sub OnOfferAcceptedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnOfferAcceptedChanged()
    End Sub
    Partial Private Sub OnOfferRejectedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnOfferRejectedChanged()
    End Sub
    Partial Private Sub OnApprovedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnApprovedChanged()
    End Sub
    Partial Private Sub OnDeclinedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnDeclinedChanged()
    End Sub
    Partial Private Sub OnAcceptedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnAcceptedChanged()
    End Sub
    Partial Private Sub OnRejectedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnRejectedChanged()
    End Sub
    Partial Private Sub OnContractedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnContractedChanged()
    End Sub
    Partial Private Sub OnPaymentUploadedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPaymentUploadedChanged()
    End Sub
    Partial Private Sub OnPaymentVerifiedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPaymentVerifiedChanged()
    End Sub
    Partial Private Sub OnPaymentReceivedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPaymentReceivedChanged()
    End Sub
    Partial Private Sub OnCompletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCompletedChanged()
    End Sub
    Partial Private Sub OnCancelledChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCancelledChanged()
    End Sub
    Partial Private Sub OnExpiredChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnExpiredChanged()
    End Sub
    Partial Private Sub OnPendingChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPendingChanged()
    End Sub
    Partial Private Sub OnDateLastUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateLastUpdatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Database = CType(Nothing, EntityRef(Of Database))
		Me._FinancialInstitution = CType(Nothing, EntityRef(Of FinancialInstitution))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="BigInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DatabaseID", DbType:="BigInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property DatabaseID() As Long
		Get
			Return Me._DatabaseID
		End Get
		Set
			If ((Me._DatabaseID = value)  _
						= false) Then
				If Me._Database.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDatabaseIDChanging(value)
				Me.SendPropertyChanging
				Me._DatabaseID = value
				Me.SendPropertyChanged("DatabaseID")
				Me.OnDatabaseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreditProviderID", DbType:="BigInt")>  _
	Public Property CreditProviderID() As System.Nullable(Of Long)
		Get
			Return Me._CreditProviderID
		End Get
		Set
			If (Me._CreditProviderID.Equals(value) = false) Then
				If Me._FinancialInstitution.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreditProviderIDChanging(value)
				Me.SendPropertyChanging
				Me._CreditProviderID = value
				Me.SendPropertyChanged("CreditProviderID")
				Me.OnCreditProviderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateSent", DbType:="DateTime")>  _
	Public Property DateSent() As System.Nullable(Of Date)
		Get
			Return Me._DateSent
		End Get
		Set
			If (Me._DateSent.Equals(value) = false) Then
				Me.OnDateSentChanging(value)
				Me.SendPropertyChanging
				Me._DateSent = value
				Me.SendPropertyChanged("DateSent")
				Me.OnDateSentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfferMade", DbType:="DateTime")>  _
	Public Property DateOfferMade() As System.Nullable(Of Date)
		Get
			Return Me._DateOfferMade
		End Get
		Set
			If (Me._DateOfferMade.Equals(value) = false) Then
				Me.OnDateOfferMadeChanging(value)
				Me.SendPropertyChanging
				Me._DateOfferMade = value
				Me.SendPropertyChanged("DateOfferMade")
				Me.OnDateOfferMadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfferAccepted", DbType:="DateTime")>  _
	Public Property DateOfferAccepted() As System.Nullable(Of Date)
		Get
			Return Me._DateOfferAccepted
		End Get
		Set
			If (Me._DateOfferAccepted.Equals(value) = false) Then
				Me.OnDateOfferAcceptedChanging(value)
				Me.SendPropertyChanging
				Me._DateOfferAccepted = value
				Me.SendPropertyChanged("DateOfferAccepted")
				Me.OnDateOfferAcceptedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateOfferRejected", DbType:="DateTime")>  _
	Public Property DateOfferRejected() As System.Nullable(Of Date)
		Get
			Return Me._DateOfferRejected
		End Get
		Set
			If (Me._DateOfferRejected.Equals(value) = false) Then
				Me.OnDateOfferRejectedChanging(value)
				Me.SendPropertyChanging
				Me._DateOfferRejected = value
				Me.SendPropertyChanged("DateOfferRejected")
				Me.OnDateOfferRejectedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateApproved", DbType:="DateTime")>  _
	Public Property DateApproved() As System.Nullable(Of Date)
		Get
			Return Me._DateApproved
		End Get
		Set
			If (Me._DateApproved.Equals(value) = false) Then
				Me.OnDateApprovedChanging(value)
				Me.SendPropertyChanging
				Me._DateApproved = value
				Me.SendPropertyChanged("DateApproved")
				Me.OnDateApprovedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateDeclined", DbType:="DateTime")>  _
	Public Property DateDeclined() As System.Nullable(Of Date)
		Get
			Return Me._DateDeclined
		End Get
		Set
			If (Me._DateDeclined.Equals(value) = false) Then
				Me.OnDateDeclinedChanging(value)
				Me.SendPropertyChanging
				Me._DateDeclined = value
				Me.SendPropertyChanged("DateDeclined")
				Me.OnDateDeclinedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAccepted", DbType:="DateTime")>  _
	Public Property DateAccepted() As System.Nullable(Of Date)
		Get
			Return Me._DateAccepted
		End Get
		Set
			If (Me._DateAccepted.Equals(value) = false) Then
				Me.OnDateAcceptedChanging(value)
				Me.SendPropertyChanging
				Me._DateAccepted = value
				Me.SendPropertyChanged("DateAccepted")
				Me.OnDateAcceptedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateRejected", DbType:="DateTime")>  _
	Public Property DateRejected() As System.Nullable(Of Date)
		Get
			Return Me._DateRejected
		End Get
		Set
			If (Me._DateRejected.Equals(value) = false) Then
				Me.OnDateRejectedChanging(value)
				Me.SendPropertyChanging
				Me._DateRejected = value
				Me.SendPropertyChanged("DateRejected")
				Me.OnDateRejectedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateContracted", DbType:="DateTime")>  _
	Public Property DateContracted() As System.Nullable(Of Date)
		Get
			Return Me._DateContracted
		End Get
		Set
			If (Me._DateContracted.Equals(value) = false) Then
				Me.OnDateContractedChanging(value)
				Me.SendPropertyChanging
				Me._DateContracted = value
				Me.SendPropertyChanged("DateContracted")
				Me.OnDateContractedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCompleted", DbType:="DateTime")>  _
	Public Property DateCompleted() As System.Nullable(Of Date)
		Get
			Return Me._DateCompleted
		End Get
		Set
			If (Me._DateCompleted.Equals(value) = false) Then
				Me.OnDateCompletedChanging(value)
				Me.SendPropertyChanging
				Me._DateCompleted = value
				Me.SendPropertyChanged("DateCompleted")
				Me.OnDateCompletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCancelled", DbType:="DateTime")>  _
	Public Property DateCancelled() As System.Nullable(Of Date)
		Get
			Return Me._DateCancelled
		End Get
		Set
			If (Me._DateCancelled.Equals(value) = false) Then
				Me.OnDateCancelledChanging(value)
				Me.SendPropertyChanging
				Me._DateCancelled = value
				Me.SendPropertyChanged("DateCancelled")
				Me.OnDateCancelledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateExpired", DbType:="DateTime")>  _
	Public Property DateExpired() As System.Nullable(Of Date)
		Get
			Return Me._DateExpired
		End Get
		Set
			If (Me._DateExpired.Equals(value) = false) Then
				Me.OnDateExpiredChanging(value)
				Me.SendPropertyChanging
				Me._DateExpired = value
				Me.SendPropertyChanged("DateExpired")
				Me.OnDateExpiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DatePaymentUploaded", DbType:="DateTime")>  _
	Public Property DatePaymentUploaded() As System.Nullable(Of Date)
		Get
			Return Me._DatePaymentUploaded
		End Get
		Set
			If (Me._DatePaymentUploaded.Equals(value) = false) Then
				Me.OnDatePaymentUploadedChanging(value)
				Me.SendPropertyChanging
				Me._DatePaymentUploaded = value
				Me.SendPropertyChanged("DatePaymentUploaded")
				Me.OnDatePaymentUploadedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DatePaymentVerified", DbType:="DateTime")>  _
	Public Property DatePaymentVerified() As System.Nullable(Of Date)
		Get
			Return Me._DatePaymentVerified
		End Get
		Set
			If (Me._DatePaymentVerified.Equals(value) = false) Then
				Me.OnDatePaymentVerifiedChanging(value)
				Me.SendPropertyChanging
				Me._DatePaymentVerified = value
				Me.SendPropertyChanged("DatePaymentVerified")
				Me.OnDatePaymentVerifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DatePaymentReceived", DbType:="DateTime")>  _
	Public Property DatePaymentReceived() As System.Nullable(Of Date)
		Get
			Return Me._DatePaymentReceived
		End Get
		Set
			If (Me._DatePaymentReceived.Equals(value) = false) Then
				Me.OnDatePaymentReceivedChanging(value)
				Me.SendPropertyChanging
				Me._DatePaymentReceived = value
				Me.SendPropertyChanged("DatePaymentReceived")
				Me.OnDatePaymentReceivedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sent", DbType:="Bit")>  _
	Public Property Sent() As System.Nullable(Of Boolean)
		Get
			Return Me._Sent
		End Get
		Set
			If (Me._Sent.Equals(value) = false) Then
				Me.OnSentChanging(value)
				Me.SendPropertyChanging
				Me._Sent = value
				Me.SendPropertyChanged("Sent")
				Me.OnSentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OfferMade", DbType:="Bit")>  _
	Public Property OfferMade() As System.Nullable(Of Boolean)
		Get
			Return Me._OfferMade
		End Get
		Set
			If (Me._OfferMade.Equals(value) = false) Then
				Me.OnOfferMadeChanging(value)
				Me.SendPropertyChanging
				Me._OfferMade = value
				Me.SendPropertyChanged("OfferMade")
				Me.OnOfferMadeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OfferAccepted", DbType:="Bit")>  _
	Public Property OfferAccepted() As System.Nullable(Of Boolean)
		Get
			Return Me._OfferAccepted
		End Get
		Set
			If (Me._OfferAccepted.Equals(value) = false) Then
				Me.OnOfferAcceptedChanging(value)
				Me.SendPropertyChanging
				Me._OfferAccepted = value
				Me.SendPropertyChanged("OfferAccepted")
				Me.OnOfferAcceptedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OfferRejected", DbType:="Bit")>  _
	Public Property OfferRejected() As System.Nullable(Of Boolean)
		Get
			Return Me._OfferRejected
		End Get
		Set
			If (Me._OfferRejected.Equals(value) = false) Then
				Me.OnOfferRejectedChanging(value)
				Me.SendPropertyChanging
				Me._OfferRejected = value
				Me.SendPropertyChanged("OfferRejected")
				Me.OnOfferRejectedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Approved", DbType:="Bit")>  _
	Public Property Approved() As System.Nullable(Of Boolean)
		Get
			Return Me._Approved
		End Get
		Set
			If (Me._Approved.Equals(value) = false) Then
				Me.OnApprovedChanging(value)
				Me.SendPropertyChanging
				Me._Approved = value
				Me.SendPropertyChanged("Approved")
				Me.OnApprovedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Declined", DbType:="Bit")>  _
	Public Property Declined() As System.Nullable(Of Boolean)
		Get
			Return Me._Declined
		End Get
		Set
			If (Me._Declined.Equals(value) = false) Then
				Me.OnDeclinedChanging(value)
				Me.SendPropertyChanging
				Me._Declined = value
				Me.SendPropertyChanged("Declined")
				Me.OnDeclinedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Accepted", DbType:="Bit")>  _
	Public Property Accepted() As System.Nullable(Of Boolean)
		Get
			Return Me._Accepted
		End Get
		Set
			If (Me._Accepted.Equals(value) = false) Then
				Me.OnAcceptedChanging(value)
				Me.SendPropertyChanging
				Me._Accepted = value
				Me.SendPropertyChanged("Accepted")
				Me.OnAcceptedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rejected", DbType:="Bit")>  _
	Public Property Rejected() As System.Nullable(Of Boolean)
		Get
			Return Me._Rejected
		End Get
		Set
			If (Me._Rejected.Equals(value) = false) Then
				Me.OnRejectedChanging(value)
				Me.SendPropertyChanging
				Me._Rejected = value
				Me.SendPropertyChanged("Rejected")
				Me.OnRejectedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Contracted", DbType:="Bit")>  _
	Public Property Contracted() As System.Nullable(Of Boolean)
		Get
			Return Me._Contracted
		End Get
		Set
			If (Me._Contracted.Equals(value) = false) Then
				Me.OnContractedChanging(value)
				Me.SendPropertyChanging
				Me._Contracted = value
				Me.SendPropertyChanged("Contracted")
				Me.OnContractedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentUploaded", DbType:="Bit")>  _
	Public Property PaymentUploaded() As System.Nullable(Of Boolean)
		Get
			Return Me._PaymentUploaded
		End Get
		Set
			If (Me._PaymentUploaded.Equals(value) = false) Then
				Me.OnPaymentUploadedChanging(value)
				Me.SendPropertyChanging
				Me._PaymentUploaded = value
				Me.SendPropertyChanged("PaymentUploaded")
				Me.OnPaymentUploadedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentVerified", DbType:="Bit")>  _
	Public Property PaymentVerified() As System.Nullable(Of Boolean)
		Get
			Return Me._PaymentVerified
		End Get
		Set
			If (Me._PaymentVerified.Equals(value) = false) Then
				Me.OnPaymentVerifiedChanging(value)
				Me.SendPropertyChanging
				Me._PaymentVerified = value
				Me.SendPropertyChanged("PaymentVerified")
				Me.OnPaymentVerifiedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentReceived", DbType:="Bit")>  _
	Public Property PaymentReceived() As System.Nullable(Of Boolean)
		Get
			Return Me._PaymentReceived
		End Get
		Set
			If (Me._PaymentReceived.Equals(value) = false) Then
				Me.OnPaymentReceivedChanging(value)
				Me.SendPropertyChanging
				Me._PaymentReceived = value
				Me.SendPropertyChanged("PaymentReceived")
				Me.OnPaymentReceivedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Completed", DbType:="Bit")>  _
	Public Property Completed() As System.Nullable(Of Boolean)
		Get
			Return Me._Completed
		End Get
		Set
			If (Me._Completed.Equals(value) = false) Then
				Me.OnCompletedChanging(value)
				Me.SendPropertyChanging
				Me._Completed = value
				Me.SendPropertyChanged("Completed")
				Me.OnCompletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cancelled", DbType:="Bit")>  _
	Public Property Cancelled() As System.Nullable(Of Boolean)
		Get
			Return Me._Cancelled
		End Get
		Set
			If (Me._Cancelled.Equals(value) = false) Then
				Me.OnCancelledChanging(value)
				Me.SendPropertyChanging
				Me._Cancelled = value
				Me.SendPropertyChanged("Cancelled")
				Me.OnCancelledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Expired", DbType:="Bit")>  _
	Public Property Expired() As System.Nullable(Of Boolean)
		Get
			Return Me._Expired
		End Get
		Set
			If (Me._Expired.Equals(value) = false) Then
				Me.OnExpiredChanging(value)
				Me.SendPropertyChanging
				Me._Expired = value
				Me.SendPropertyChanged("Expired")
				Me.OnExpiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pending", DbType:="Bit")>  _
	Public Property Pending() As System.Nullable(Of Boolean)
		Get
			Return Me._Pending
		End Get
		Set
			If (Me._Pending.Equals(value) = false) Then
				Me.OnPendingChanging(value)
				Me.SendPropertyChanging
				Me._Pending = value
				Me.SendPropertyChanged("Pending")
				Me.OnPendingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateLastUpdated", DbType:="DateTime")>  _
	Public Property DateLastUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateLastUpdated
		End Get
		Set
			If (Me._DateLastUpdated.Equals(value) = false) Then
				Me.OnDateLastUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateLastUpdated = value
				Me.SendPropertyChanged("DateLastUpdated")
				Me.OnDateLastUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Database_ApplicationCreditProvider", Storage:="_Database", ThisKey:="DatabaseID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Database() As Database
		Get
			Return Me._Database.Entity
		End Get
		Set
			Dim previousValue As Database = Me._Database.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Database.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Database.Entity = Nothing
					previousValue.ApplicationCreditProviders.Remove(Me)
				End If
				Me._Database.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationCreditProviders.Add(Me)
					Me._DatabaseID = value.ID
				Else
					Me._DatabaseID = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("Database")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FinancialInstitution_ApplicationCreditProvider", Storage:="_FinancialInstitution", ThisKey:="CreditProviderID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property FinancialInstitution() As FinancialInstitution
		Get
			Return Me._FinancialInstitution.Entity
		End Get
		Set
			Dim previousValue As FinancialInstitution = Me._FinancialInstitution.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FinancialInstitution.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FinancialInstitution.Entity = Nothing
					previousValue.ApplicationCreditProviders.Remove(Me)
				End If
				Me._FinancialInstitution.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationCreditProviders.Add(Me)
					Me._CreditProviderID = value.ID
				Else
					Me._CreditProviderID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("FinancialInstitution")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationRepository")>  _
Partial Public Class ApplicationRepository
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _DatabaseID As Long
	
	Private _EnvironmentRepositoryID As System.Nullable(Of Long)
	
	Private _InternalAuditTypeID As System.Nullable(Of Long)
	
	Private _AuditTypeID As System.Nullable(Of Long)
	
	Private _MerchantID As System.Nullable(Of Long)
	
	Private _MerchantTerminalID As System.Nullable(Of Long)
	
	Private _FinancialInstitutionID As System.Nullable(Of Long)
	
	Private _CreditProviderID As Long
	
	Private _ChannelID As System.Nullable(Of Long)
	
	Private _ProductID As System.Nullable(Of Long)
	
	Private _TerminalTypeID As System.Nullable(Of Long)
	
	Private _Title As String
	
	Private _Reference As String
	
	Private _IDNumber As String
	
	Private _FirstName As String
	
	Private _Surname As String
	
	Private _MobileNumber As String
	
	Private _GrossIncome As System.Nullable(Of Decimal)
	
	Private _NettIncome As System.Nullable(Of Decimal)
	
	Private _FinanceAmount As System.Nullable(Of Decimal)
	
	Private _OfferAmount As System.Nullable(Of Decimal)
	
	Private _Term As System.Nullable(Of Integer)
	
	Private _OfferTerm As System.Nullable(Of Integer)
	
	Private _Installment As System.Nullable(Of Decimal)
	
	Private _OfferInstallment As System.Nullable(Of Decimal)
	
	Private _Rate As System.Nullable(Of Double)
	
	Private _Priority As String
	
	Private _MerchantIdentifier As String
	
	Private _TerminalIdentifier As String
	
	Private _DeclineReason As String
	
	Private _Comments As String
	
	Private _Balance As System.Nullable(Of Decimal)
	
	Private _StartDate As System.Nullable(Of Date)
	
	Private _EndDate As System.Nullable(Of Date)
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _Test As System.Nullable(Of Boolean)
	
	Private _IsAuthorised As System.Nullable(Of Boolean)
	
	Private _IsCollected As System.Nullable(Of Boolean)
	
	Private _IsComplete As System.Nullable(Of Boolean)
	
	Private _IsDeclined As System.Nullable(Of Boolean)
	
	Private _IsCancelled As System.Nullable(Of Boolean)
	
	Private _IsExpired As System.Nullable(Of Boolean)
	
	Private _IsArchived As System.Nullable(Of Boolean)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _ApplicationRepositoryHistories As EntitySet(Of ApplicationRepositoryHistory)
	
	Private _DebitOrderHistories As EntitySet(Of DebitOrderHistory)
	
	Private _AuditType As EntityRef(Of AuditType)
	
	Private _AuditType1 As EntityRef(Of AuditType)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory1 As EntityRef(Of AuthDirectory)
	
	Private _Channel As EntityRef(Of Channel)
	
	Private _EnvironmentRepository As EntityRef(Of EnvironmentRepository)
	
	Private _FinancialInstitution As EntityRef(Of FinancialInstitution)
	
	Private _FinancialInstitution1 As EntityRef(Of FinancialInstitution)
	
	Private _Merchant As EntityRef(Of Merchant)
	
	Private _MerchantTerminal As EntityRef(Of MerchantTerminal)
	
	Private _Product As EntityRef(Of Product)
	
	Private _TerminalType As EntityRef(Of TerminalType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnDatabaseIDChanging(value As Long)
    End Sub
    Partial Private Sub OnDatabaseIDChanged()
    End Sub
    Partial Private Sub OnEnvironmentRepositoryIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnEnvironmentRepositoryIDChanged()
    End Sub
    Partial Private Sub OnInternalAuditTypeIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnInternalAuditTypeIDChanged()
    End Sub
    Partial Private Sub OnAuditTypeIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnAuditTypeIDChanged()
    End Sub
    Partial Private Sub OnMerchantIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMerchantIDChanged()
    End Sub
    Partial Private Sub OnMerchantTerminalIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMerchantTerminalIDChanged()
    End Sub
    Partial Private Sub OnFinancialInstitutionIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFinancialInstitutionIDChanged()
    End Sub
    Partial Private Sub OnCreditProviderIDChanging(value As Long)
    End Sub
    Partial Private Sub OnCreditProviderIDChanged()
    End Sub
    Partial Private Sub OnChannelIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnChannelIDChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnTerminalTypeIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnTerminalTypeIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnReferenceChanging(value As String)
    End Sub
    Partial Private Sub OnReferenceChanged()
    End Sub
    Partial Private Sub OnIDNumberChanging(value As String)
    End Sub
    Partial Private Sub OnIDNumberChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnSurnameChanging(value As String)
    End Sub
    Partial Private Sub OnSurnameChanged()
    End Sub
    Partial Private Sub OnMobileNumberChanging(value As String)
    End Sub
    Partial Private Sub OnMobileNumberChanged()
    End Sub
    Partial Private Sub OnGrossIncomeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnGrossIncomeChanged()
    End Sub
    Partial Private Sub OnNettIncomeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnNettIncomeChanged()
    End Sub
    Partial Private Sub OnFinanceAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnFinanceAmountChanged()
    End Sub
    Partial Private Sub OnOfferAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnOfferAmountChanged()
    End Sub
    Partial Private Sub OnTermChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTermChanged()
    End Sub
    Partial Private Sub OnOfferTermChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOfferTermChanged()
    End Sub
    Partial Private Sub OnInstallmentChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnInstallmentChanged()
    End Sub
    Partial Private Sub OnOfferInstallmentChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnOfferInstallmentChanged()
    End Sub
    Partial Private Sub OnRateChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnRateChanged()
    End Sub
    Partial Private Sub OnPriorityChanging(value As String)
    End Sub
    Partial Private Sub OnPriorityChanged()
    End Sub
    Partial Private Sub OnMerchantIdentifierChanging(value As String)
    End Sub
    Partial Private Sub OnMerchantIdentifierChanged()
    End Sub
    Partial Private Sub OnTerminalIdentifierChanging(value As String)
    End Sub
    Partial Private Sub OnTerminalIdentifierChanged()
    End Sub
    Partial Private Sub OnDeclineReasonChanging(value As String)
    End Sub
    Partial Private Sub OnDeclineReasonChanged()
    End Sub
    Partial Private Sub OnCommentsChanging(value As String)
    End Sub
    Partial Private Sub OnCommentsChanged()
    End Sub
    Partial Private Sub OnBalanceChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnBalanceChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnTestChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnTestChanged()
    End Sub
    Partial Private Sub OnIsAuthorisedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsAuthorisedChanged()
    End Sub
    Partial Private Sub OnIsCollectedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsCollectedChanged()
    End Sub
    Partial Private Sub OnIsCompleteChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsCompleteChanged()
    End Sub
    Partial Private Sub OnIsDeclinedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeclinedChanged()
    End Sub
    Partial Private Sub OnIsCancelledChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsCancelledChanged()
    End Sub
    Partial Private Sub OnIsExpiredChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsExpiredChanged()
    End Sub
    Partial Private Sub OnIsArchivedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsArchivedChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationRepositoryHistories = New EntitySet(Of ApplicationRepositoryHistory)(AddressOf Me.attach_ApplicationRepositoryHistories, AddressOf Me.detach_ApplicationRepositoryHistories)
		Me._DebitOrderHistories = New EntitySet(Of DebitOrderHistory)(AddressOf Me.attach_DebitOrderHistories, AddressOf Me.detach_DebitOrderHistories)
		Me._AuditType = CType(Nothing, EntityRef(Of AuditType))
		Me._AuditType1 = CType(Nothing, EntityRef(Of AuditType))
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory1 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._Channel = CType(Nothing, EntityRef(Of Channel))
		Me._EnvironmentRepository = CType(Nothing, EntityRef(Of EnvironmentRepository))
		Me._FinancialInstitution = CType(Nothing, EntityRef(Of FinancialInstitution))
		Me._FinancialInstitution1 = CType(Nothing, EntityRef(Of FinancialInstitution))
		Me._Merchant = CType(Nothing, EntityRef(Of Merchant))
		Me._MerchantTerminal = CType(Nothing, EntityRef(Of MerchantTerminal))
		Me._Product = CType(Nothing, EntityRef(Of Product))
		Me._TerminalType = CType(Nothing, EntityRef(Of TerminalType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="BigInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DatabaseID", DbType:="BigInt NOT NULL", IsPrimaryKey:=true)>  _
	Public Property DatabaseID() As Long
		Get
			Return Me._DatabaseID
		End Get
		Set
			If ((Me._DatabaseID = value)  _
						= false) Then
				Me.OnDatabaseIDChanging(value)
				Me.SendPropertyChanging
				Me._DatabaseID = value
				Me.SendPropertyChanged("DatabaseID")
				Me.OnDatabaseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnvironmentRepositoryID", DbType:="BigInt")>  _
	Public Property EnvironmentRepositoryID() As System.Nullable(Of Long)
		Get
			Return Me._EnvironmentRepositoryID
		End Get
		Set
			If (Me._EnvironmentRepositoryID.Equals(value) = false) Then
				If Me._EnvironmentRepository.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEnvironmentRepositoryIDChanging(value)
				Me.SendPropertyChanging
				Me._EnvironmentRepositoryID = value
				Me.SendPropertyChanged("EnvironmentRepositoryID")
				Me.OnEnvironmentRepositoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InternalAuditTypeID", DbType:="BigInt")>  _
	Public Property InternalAuditTypeID() As System.Nullable(Of Long)
		Get
			Return Me._InternalAuditTypeID
		End Get
		Set
			If (Me._InternalAuditTypeID.Equals(value) = false) Then
				If Me._AuditType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnInternalAuditTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._InternalAuditTypeID = value
				Me.SendPropertyChanged("InternalAuditTypeID")
				Me.OnInternalAuditTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AuditTypeID", DbType:="BigInt")>  _
	Public Property AuditTypeID() As System.Nullable(Of Long)
		Get
			Return Me._AuditTypeID
		End Get
		Set
			If (Me._AuditTypeID.Equals(value) = false) Then
				If Me._AuditType1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAuditTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._AuditTypeID = value
				Me.SendPropertyChanged("AuditTypeID")
				Me.OnAuditTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantID", DbType:="BigInt")>  _
	Public Property MerchantID() As System.Nullable(Of Long)
		Get
			Return Me._MerchantID
		End Get
		Set
			If (Me._MerchantID.Equals(value) = false) Then
				If Me._Merchant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMerchantIDChanging(value)
				Me.SendPropertyChanging
				Me._MerchantID = value
				Me.SendPropertyChanged("MerchantID")
				Me.OnMerchantIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantTerminalID", DbType:="BigInt")>  _
	Public Property MerchantTerminalID() As System.Nullable(Of Long)
		Get
			Return Me._MerchantTerminalID
		End Get
		Set
			If (Me._MerchantTerminalID.Equals(value) = false) Then
				If Me._MerchantTerminal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMerchantTerminalIDChanging(value)
				Me.SendPropertyChanging
				Me._MerchantTerminalID = value
				Me.SendPropertyChanged("MerchantTerminalID")
				Me.OnMerchantTerminalIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinancialInstitutionID", DbType:="BigInt")>  _
	Public Property FinancialInstitutionID() As System.Nullable(Of Long)
		Get
			Return Me._FinancialInstitutionID
		End Get
		Set
			If (Me._FinancialInstitutionID.Equals(value) = false) Then
				If Me._FinancialInstitution1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFinancialInstitutionIDChanging(value)
				Me.SendPropertyChanging
				Me._FinancialInstitutionID = value
				Me.SendPropertyChanged("FinancialInstitutionID")
				Me.OnFinancialInstitutionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreditProviderID", DbType:="BigInt NOT NULL")>  _
	Public Property CreditProviderID() As Long
		Get
			Return Me._CreditProviderID
		End Get
		Set
			If ((Me._CreditProviderID = value)  _
						= false) Then
				If Me._FinancialInstitution.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreditProviderIDChanging(value)
				Me.SendPropertyChanging
				Me._CreditProviderID = value
				Me.SendPropertyChanged("CreditProviderID")
				Me.OnCreditProviderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChannelID", DbType:="BigInt")>  _
	Public Property ChannelID() As System.Nullable(Of Long)
		Get
			Return Me._ChannelID
		End Get
		Set
			If (Me._ChannelID.Equals(value) = false) Then
				If Me._Channel.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnChannelIDChanging(value)
				Me.SendPropertyChanging
				Me._ChannelID = value
				Me.SendPropertyChanged("ChannelID")
				Me.OnChannelIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="BigInt")>  _
	Public Property ProductID() As System.Nullable(Of Long)
		Get
			Return Me._ProductID
		End Get
		Set
			If (Me._ProductID.Equals(value) = false) Then
				If Me._Product.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TerminalTypeID", DbType:="BigInt")>  _
	Public Property TerminalTypeID() As System.Nullable(Of Long)
		Get
			Return Me._TerminalTypeID
		End Get
		Set
			If (Me._TerminalTypeID.Equals(value) = false) Then
				If Me._TerminalType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTerminalTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._TerminalTypeID = value
				Me.SendPropertyChanged("TerminalTypeID")
				Me.OnTerminalTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(50)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reference", DbType:="NVarChar(50)")>  _
	Public Property Reference() As String
		Get
			Return Me._Reference
		End Get
		Set
			If (String.Equals(Me._Reference, value) = false) Then
				Me.OnReferenceChanging(value)
				Me.SendPropertyChanging
				Me._Reference = value
				Me.SendPropertyChanged("Reference")
				Me.OnReferenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDNumber", DbType:="NVarChar(50)")>  _
	Public Property IDNumber() As String
		Get
			Return Me._IDNumber
		End Get
		Set
			If (String.Equals(Me._IDNumber, value) = false) Then
				Me.OnIDNumberChanging(value)
				Me.SendPropertyChanging
				Me._IDNumber = value
				Me.SendPropertyChanged("IDNumber")
				Me.OnIDNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(500)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Surname", DbType:="NVarChar(500)")>  _
	Public Property Surname() As String
		Get
			Return Me._Surname
		End Get
		Set
			If (String.Equals(Me._Surname, value) = false) Then
				Me.OnSurnameChanging(value)
				Me.SendPropertyChanging
				Me._Surname = value
				Me.SendPropertyChanged("Surname")
				Me.OnSurnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobileNumber", DbType:="NVarChar(50)")>  _
	Public Property MobileNumber() As String
		Get
			Return Me._MobileNumber
		End Get
		Set
			If (String.Equals(Me._MobileNumber, value) = false) Then
				Me.OnMobileNumberChanging(value)
				Me.SendPropertyChanging
				Me._MobileNumber = value
				Me.SendPropertyChanged("MobileNumber")
				Me.OnMobileNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GrossIncome", DbType:="Money")>  _
	Public Property GrossIncome() As System.Nullable(Of Decimal)
		Get
			Return Me._GrossIncome
		End Get
		Set
			If (Me._GrossIncome.Equals(value) = false) Then
				Me.OnGrossIncomeChanging(value)
				Me.SendPropertyChanging
				Me._GrossIncome = value
				Me.SendPropertyChanged("GrossIncome")
				Me.OnGrossIncomeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NettIncome", DbType:="Money")>  _
	Public Property NettIncome() As System.Nullable(Of Decimal)
		Get
			Return Me._NettIncome
		End Get
		Set
			If (Me._NettIncome.Equals(value) = false) Then
				Me.OnNettIncomeChanging(value)
				Me.SendPropertyChanging
				Me._NettIncome = value
				Me.SendPropertyChanged("NettIncome")
				Me.OnNettIncomeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinanceAmount", DbType:="Money")>  _
	Public Property FinanceAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._FinanceAmount
		End Get
		Set
			If (Me._FinanceAmount.Equals(value) = false) Then
				Me.OnFinanceAmountChanging(value)
				Me.SendPropertyChanging
				Me._FinanceAmount = value
				Me.SendPropertyChanged("FinanceAmount")
				Me.OnFinanceAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OfferAmount", DbType:="Money")>  _
	Public Property OfferAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._OfferAmount
		End Get
		Set
			If (Me._OfferAmount.Equals(value) = false) Then
				Me.OnOfferAmountChanging(value)
				Me.SendPropertyChanging
				Me._OfferAmount = value
				Me.SendPropertyChanged("OfferAmount")
				Me.OnOfferAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Term", DbType:="Int")>  _
	Public Property Term() As System.Nullable(Of Integer)
		Get
			Return Me._Term
		End Get
		Set
			If (Me._Term.Equals(value) = false) Then
				Me.OnTermChanging(value)
				Me.SendPropertyChanging
				Me._Term = value
				Me.SendPropertyChanged("Term")
				Me.OnTermChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OfferTerm", DbType:="Int")>  _
	Public Property OfferTerm() As System.Nullable(Of Integer)
		Get
			Return Me._OfferTerm
		End Get
		Set
			If (Me._OfferTerm.Equals(value) = false) Then
				Me.OnOfferTermChanging(value)
				Me.SendPropertyChanging
				Me._OfferTerm = value
				Me.SendPropertyChanged("OfferTerm")
				Me.OnOfferTermChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Installment", DbType:="Money")>  _
	Public Property Installment() As System.Nullable(Of Decimal)
		Get
			Return Me._Installment
		End Get
		Set
			If (Me._Installment.Equals(value) = false) Then
				Me.OnInstallmentChanging(value)
				Me.SendPropertyChanging
				Me._Installment = value
				Me.SendPropertyChanged("Installment")
				Me.OnInstallmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OfferInstallment", DbType:="Money")>  _
	Public Property OfferInstallment() As System.Nullable(Of Decimal)
		Get
			Return Me._OfferInstallment
		End Get
		Set
			If (Me._OfferInstallment.Equals(value) = false) Then
				Me.OnOfferInstallmentChanging(value)
				Me.SendPropertyChanging
				Me._OfferInstallment = value
				Me.SendPropertyChanged("OfferInstallment")
				Me.OnOfferInstallmentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rate", DbType:="Float")>  _
	Public Property Rate() As System.Nullable(Of Double)
		Get
			Return Me._Rate
		End Get
		Set
			If (Me._Rate.Equals(value) = false) Then
				Me.OnRateChanging(value)
				Me.SendPropertyChanging
				Me._Rate = value
				Me.SendPropertyChanged("Rate")
				Me.OnRateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Priority", DbType:="NVarChar(50)")>  _
	Public Property Priority() As String
		Get
			Return Me._Priority
		End Get
		Set
			If (String.Equals(Me._Priority, value) = false) Then
				Me.OnPriorityChanging(value)
				Me.SendPropertyChanging
				Me._Priority = value
				Me.SendPropertyChanged("Priority")
				Me.OnPriorityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantIdentifier", DbType:="NVarChar(50)")>  _
	Public Property MerchantIdentifier() As String
		Get
			Return Me._MerchantIdentifier
		End Get
		Set
			If (String.Equals(Me._MerchantIdentifier, value) = false) Then
				Me.OnMerchantIdentifierChanging(value)
				Me.SendPropertyChanging
				Me._MerchantIdentifier = value
				Me.SendPropertyChanged("MerchantIdentifier")
				Me.OnMerchantIdentifierChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TerminalIdentifier", DbType:="NVarChar(50)")>  _
	Public Property TerminalIdentifier() As String
		Get
			Return Me._TerminalIdentifier
		End Get
		Set
			If (String.Equals(Me._TerminalIdentifier, value) = false) Then
				Me.OnTerminalIdentifierChanging(value)
				Me.SendPropertyChanging
				Me._TerminalIdentifier = value
				Me.SendPropertyChanged("TerminalIdentifier")
				Me.OnTerminalIdentifierChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DeclineReason", DbType:="NVarChar(500)")>  _
	Public Property DeclineReason() As String
		Get
			Return Me._DeclineReason
		End Get
		Set
			If (String.Equals(Me._DeclineReason, value) = false) Then
				Me.OnDeclineReasonChanging(value)
				Me.SendPropertyChanging
				Me._DeclineReason = value
				Me.SendPropertyChanged("DeclineReason")
				Me.OnDeclineReasonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Comments", DbType:="NVarChar(500)")>  _
	Public Property Comments() As String
		Get
			Return Me._Comments
		End Get
		Set
			If (String.Equals(Me._Comments, value) = false) Then
				Me.OnCommentsChanging(value)
				Me.SendPropertyChanging
				Me._Comments = value
				Me.SendPropertyChanged("Comments")
				Me.OnCommentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Balance", DbType:="Money")>  _
	Public Property Balance() As System.Nullable(Of Decimal)
		Get
			Return Me._Balance
		End Get
		Set
			If (Me._Balance.Equals(value) = false) Then
				Me.OnBalanceChanging(value)
				Me.SendPropertyChanging
				Me._Balance = value
				Me.SendPropertyChanged("Balance")
				Me.OnBalanceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="DateTime")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._StartDate
		End Get
		Set
			If (Me._StartDate.Equals(value) = false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDate", DbType:="DateTime")>  _
	Public Property EndDate() As System.Nullable(Of Date)
		Get
			Return Me._EndDate
		End Get
		Set
			If (Me._EndDate.Equals(value) = false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				If Me._AuthDirectory1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Test", DbType:="Bit")>  _
	Public Property Test() As System.Nullable(Of Boolean)
		Get
			Return Me._Test
		End Get
		Set
			If (Me._Test.Equals(value) = false) Then
				Me.OnTestChanging(value)
				Me.SendPropertyChanging
				Me._Test = value
				Me.SendPropertyChanged("Test")
				Me.OnTestChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsAuthorised", DbType:="Bit")>  _
	Public Property IsAuthorised() As System.Nullable(Of Boolean)
		Get
			Return Me._IsAuthorised
		End Get
		Set
			If (Me._IsAuthorised.Equals(value) = false) Then
				Me.OnIsAuthorisedChanging(value)
				Me.SendPropertyChanging
				Me._IsAuthorised = value
				Me.SendPropertyChanged("IsAuthorised")
				Me.OnIsAuthorisedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsCollected", DbType:="Bit")>  _
	Public Property IsCollected() As System.Nullable(Of Boolean)
		Get
			Return Me._IsCollected
		End Get
		Set
			If (Me._IsCollected.Equals(value) = false) Then
				Me.OnIsCollectedChanging(value)
				Me.SendPropertyChanging
				Me._IsCollected = value
				Me.SendPropertyChanged("IsCollected")
				Me.OnIsCollectedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsComplete", DbType:="Bit")>  _
	Public Property IsComplete() As System.Nullable(Of Boolean)
		Get
			Return Me._IsComplete
		End Get
		Set
			If (Me._IsComplete.Equals(value) = false) Then
				Me.OnIsCompleteChanging(value)
				Me.SendPropertyChanging
				Me._IsComplete = value
				Me.SendPropertyChanged("IsComplete")
				Me.OnIsCompleteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeclined", DbType:="Bit")>  _
	Public Property IsDeclined() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeclined
		End Get
		Set
			If (Me._IsDeclined.Equals(value) = false) Then
				Me.OnIsDeclinedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeclined = value
				Me.SendPropertyChanged("IsDeclined")
				Me.OnIsDeclinedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsCancelled", DbType:="Bit")>  _
	Public Property IsCancelled() As System.Nullable(Of Boolean)
		Get
			Return Me._IsCancelled
		End Get
		Set
			If (Me._IsCancelled.Equals(value) = false) Then
				Me.OnIsCancelledChanging(value)
				Me.SendPropertyChanging
				Me._IsCancelled = value
				Me.SendPropertyChanged("IsCancelled")
				Me.OnIsCancelledChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsExpired", DbType:="Bit")>  _
	Public Property IsExpired() As System.Nullable(Of Boolean)
		Get
			Return Me._IsExpired
		End Get
		Set
			If (Me._IsExpired.Equals(value) = false) Then
				Me.OnIsExpiredChanging(value)
				Me.SendPropertyChanging
				Me._IsExpired = value
				Me.SendPropertyChanged("IsExpired")
				Me.OnIsExpiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsArchived", DbType:="Bit")>  _
	Public Property IsArchived() As System.Nullable(Of Boolean)
		Get
			Return Me._IsArchived
		End Get
		Set
			If (Me._IsArchived.Equals(value) = false) Then
				Me.OnIsArchivedChanging(value)
				Me.SendPropertyChanging
				Me._IsArchived = value
				Me.SendPropertyChanged("IsArchived")
				Me.OnIsArchivedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ApplicationRepository_ApplicationRepositoryHistory", Storage:="_ApplicationRepositoryHistories", ThisKey:="ID,DatabaseID", OtherKey:="ApplicationID,DatabaseID")>  _
	Public Property ApplicationRepositoryHistories() As EntitySet(Of ApplicationRepositoryHistory)
		Get
			Return Me._ApplicationRepositoryHistories
		End Get
		Set
			Me._ApplicationRepositoryHistories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ApplicationRepository_DebitOrderHistory", Storage:="_DebitOrderHistories", ThisKey:="ID,DatabaseID", OtherKey:="ApplicationID,DatabaseID")>  _
	Public Property DebitOrderHistories() As EntitySet(Of DebitOrderHistory)
		Get
			Return Me._DebitOrderHistories
		End Get
		Set
			Me._DebitOrderHistories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuditType_ApplicationRepository", Storage:="_AuditType", ThisKey:="InternalAuditTypeID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuditType() As AuditType
		Get
			Return Me._AuditType.Entity
		End Get
		Set
			Dim previousValue As AuditType = Me._AuditType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuditType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuditType.Entity = Nothing
					previousValue.ApplicationRepositories.Remove(Me)
				End If
				Me._AuditType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationRepositories.Add(Me)
					Me._InternalAuditTypeID = value.ID
				Else
					Me._InternalAuditTypeID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuditType")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuditType_ApplicationRepository1", Storage:="_AuditType1", ThisKey:="AuditTypeID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuditType1() As AuditType
		Get
			Return Me._AuditType1.Entity
		End Get
		Set
			Dim previousValue As AuditType = Me._AuditType1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuditType1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuditType1.Entity = Nothing
					previousValue.ApplicationRepositories1.Remove(Me)
				End If
				Me._AuditType1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationRepositories1.Add(Me)
					Me._AuditTypeID = value.ID
				Else
					Me._AuditTypeID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuditType1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_ApplicationRepository", Storage:="_AuthDirectory", ThisKey:="CreatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.ApplicationRepositories.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationRepositories.Add(Me)
					Me._CreatedBy = value.ID
				Else
					Me._CreatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_ApplicationRepository1", Storage:="_AuthDirectory1", ThisKey:="UpdatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory1() As AuthDirectory
		Get
			Return Me._AuthDirectory1.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory1.Entity = Nothing
					previousValue.ApplicationRepositories1.Remove(Me)
				End If
				Me._AuthDirectory1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationRepositories1.Add(Me)
					Me._UpdatedBy = value.ID
				Else
					Me._UpdatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Channel_ApplicationRepository", Storage:="_Channel", ThisKey:="ChannelID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Channel() As Channel
		Get
			Return Me._Channel.Entity
		End Get
		Set
			Dim previousValue As Channel = Me._Channel.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Channel.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Channel.Entity = Nothing
					previousValue.ApplicationRepositories.Remove(Me)
				End If
				Me._Channel.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationRepositories.Add(Me)
					Me._ChannelID = value.ID
				Else
					Me._ChannelID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Channel")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EnvironmentRepository_ApplicationRepository", Storage:="_EnvironmentRepository", ThisKey:="EnvironmentRepositoryID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property EnvironmentRepository() As EnvironmentRepository
		Get
			Return Me._EnvironmentRepository.Entity
		End Get
		Set
			Dim previousValue As EnvironmentRepository = Me._EnvironmentRepository.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EnvironmentRepository.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EnvironmentRepository.Entity = Nothing
					previousValue.ApplicationRepositories.Remove(Me)
				End If
				Me._EnvironmentRepository.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationRepositories.Add(Me)
					Me._EnvironmentRepositoryID = value.ID
				Else
					Me._EnvironmentRepositoryID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("EnvironmentRepository")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FinancialInstitution_ApplicationRepository", Storage:="_FinancialInstitution", ThisKey:="CreditProviderID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property FinancialInstitution() As FinancialInstitution
		Get
			Return Me._FinancialInstitution.Entity
		End Get
		Set
			Dim previousValue As FinancialInstitution = Me._FinancialInstitution.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FinancialInstitution.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FinancialInstitution.Entity = Nothing
					previousValue.ApplicationRepositories.Remove(Me)
				End If
				Me._FinancialInstitution.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationRepositories.Add(Me)
					Me._CreditProviderID = value.ID
				Else
					Me._CreditProviderID = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("FinancialInstitution")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FinancialInstitution_ApplicationRepository1", Storage:="_FinancialInstitution1", ThisKey:="FinancialInstitutionID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property FinancialInstitution1() As FinancialInstitution
		Get
			Return Me._FinancialInstitution1.Entity
		End Get
		Set
			Dim previousValue As FinancialInstitution = Me._FinancialInstitution1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FinancialInstitution1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FinancialInstitution1.Entity = Nothing
					previousValue.ApplicationRepositories1.Remove(Me)
				End If
				Me._FinancialInstitution1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationRepositories1.Add(Me)
					Me._FinancialInstitutionID = value.ID
				Else
					Me._FinancialInstitutionID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("FinancialInstitution1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_ApplicationRepository", Storage:="_Merchant", ThisKey:="MerchantID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Merchant() As Merchant
		Get
			Return Me._Merchant.Entity
		End Get
		Set
			Dim previousValue As Merchant = Me._Merchant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Merchant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Merchant.Entity = Nothing
					previousValue.ApplicationRepositories.Remove(Me)
				End If
				Me._Merchant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationRepositories.Add(Me)
					Me._MerchantID = value.ID
				Else
					Me._MerchantID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Merchant")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MerchantTerminal_ApplicationRepository", Storage:="_MerchantTerminal", ThisKey:="MerchantTerminalID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property MerchantTerminal() As MerchantTerminal
		Get
			Return Me._MerchantTerminal.Entity
		End Get
		Set
			Dim previousValue As MerchantTerminal = Me._MerchantTerminal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MerchantTerminal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MerchantTerminal.Entity = Nothing
					previousValue.ApplicationRepositories.Remove(Me)
				End If
				Me._MerchantTerminal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationRepositories.Add(Me)
					Me._MerchantTerminalID = value.ID
				Else
					Me._MerchantTerminalID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("MerchantTerminal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ApplicationRepository", Storage:="_Product", ThisKey:="ProductID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Product() As Product
		Get
			Return Me._Product.Entity
		End Get
		Set
			Dim previousValue As Product = Me._Product.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Product.Entity = Nothing
					previousValue.ApplicationRepositories.Remove(Me)
				End If
				Me._Product.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationRepositories.Add(Me)
					Me._ProductID = value.ID
				Else
					Me._ProductID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Product")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TerminalType_ApplicationRepository", Storage:="_TerminalType", ThisKey:="TerminalTypeID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property TerminalType() As TerminalType
		Get
			Return Me._TerminalType.Entity
		End Get
		Set
			Dim previousValue As TerminalType = Me._TerminalType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TerminalType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TerminalType.Entity = Nothing
					previousValue.ApplicationRepositories.Remove(Me)
				End If
				Me._TerminalType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationRepositories.Add(Me)
					Me._TerminalTypeID = value.ID
				Else
					Me._TerminalTypeID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("TerminalType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApplicationRepositoryHistories(ByVal entity As ApplicationRepositoryHistory)
		Me.SendPropertyChanging
		entity.ApplicationRepository = Me
	End Sub
	
	Private Sub detach_ApplicationRepositoryHistories(ByVal entity As ApplicationRepositoryHistory)
		Me.SendPropertyChanging
		entity.ApplicationRepository = Nothing
	End Sub
	
	Private Sub attach_DebitOrderHistories(ByVal entity As DebitOrderHistory)
		Me.SendPropertyChanging
		entity.ApplicationRepository = Me
	End Sub
	
	Private Sub detach_DebitOrderHistories(ByVal entity As DebitOrderHistory)
		Me.SendPropertyChanging
		entity.ApplicationRepository = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ApplicationRepositoryHistory")>  _
Partial Public Class ApplicationRepositoryHistory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Actor As System.Nullable(Of Long)
	
	Private _Name As String
	
	Private _Details As String
	
	Private _ActionID As System.Nullable(Of Long)
	
	Private _ApplicationID As System.Nullable(Of Long)
	
	Private _DatabaseID As System.Nullable(Of Long)
	
	Private _HistoryDate As System.Nullable(Of Date)
	
	Private _Action As EntityRef(Of Action)
	
	Private _ApplicationRepository As EntityRef(Of ApplicationRepository)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnActorChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnActorChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnDetailsChanged()
    End Sub
    Partial Private Sub OnActionIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnActionIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnDatabaseIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnDatabaseIDChanged()
    End Sub
    Partial Private Sub OnHistoryDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnHistoryDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Action = CType(Nothing, EntityRef(Of Action))
		Me._ApplicationRepository = CType(Nothing, EntityRef(Of ApplicationRepository))
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Actor", DbType:="BigInt")>  _
	Public Property Actor() As System.Nullable(Of Long)
		Get
			Return Me._Actor
		End Get
		Set
			If (Me._Actor.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnActorChanging(value)
				Me.SendPropertyChanging
				Me._Actor = value
				Me.SendPropertyChanged("Actor")
				Me.OnActorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(150)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details", DbType:="NVarChar(MAX)")>  _
	Public Property Details() As String
		Get
			Return Me._Details
		End Get
		Set
			If (String.Equals(Me._Details, value) = false) Then
				Me.OnDetailsChanging(value)
				Me.SendPropertyChanging
				Me._Details = value
				Me.SendPropertyChanged("Details")
				Me.OnDetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActionID", DbType:="BigInt")>  _
	Public Property ActionID() As System.Nullable(Of Long)
		Get
			Return Me._ActionID
		End Get
		Set
			If (Me._ActionID.Equals(value) = false) Then
				If Me._Action.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnActionIDChanging(value)
				Me.SendPropertyChanging
				Me._ActionID = value
				Me.SendPropertyChanged("ActionID")
				Me.OnActionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="BigInt")>  _
	Public Property ApplicationID() As System.Nullable(Of Long)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				If Me._ApplicationRepository.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DatabaseID", DbType:="BigInt")>  _
	Public Property DatabaseID() As System.Nullable(Of Long)
		Get
			Return Me._DatabaseID
		End Get
		Set
			If (Me._DatabaseID.Equals(value) = false) Then
				If Me._ApplicationRepository.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDatabaseIDChanging(value)
				Me.SendPropertyChanging
				Me._DatabaseID = value
				Me.SendPropertyChanged("DatabaseID")
				Me.OnDatabaseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HistoryDate", DbType:="DateTime")>  _
	Public Property HistoryDate() As System.Nullable(Of Date)
		Get
			Return Me._HistoryDate
		End Get
		Set
			If (Me._HistoryDate.Equals(value) = false) Then
				Me.OnHistoryDateChanging(value)
				Me.SendPropertyChanging
				Me._HistoryDate = value
				Me.SendPropertyChanged("HistoryDate")
				Me.OnHistoryDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Action_ApplicationRepositoryHistory", Storage:="_Action", ThisKey:="ActionID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Action() As Action
		Get
			Return Me._Action.Entity
		End Get
		Set
			Dim previousValue As Action = Me._Action.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Action.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Action.Entity = Nothing
					previousValue.ApplicationRepositoryHistories.Remove(Me)
				End If
				Me._Action.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationRepositoryHistories.Add(Me)
					Me._ActionID = value.ID
				Else
					Me._ActionID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Action")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ApplicationRepository_ApplicationRepositoryHistory", Storage:="_ApplicationRepository", ThisKey:="ApplicationID,DatabaseID", OtherKey:="ID,DatabaseID", IsForeignKey:=true)>  _
	Public Property ApplicationRepository() As ApplicationRepository
		Get
			Return Me._ApplicationRepository.Entity
		End Get
		Set
			Dim previousValue As ApplicationRepository = Me._ApplicationRepository.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ApplicationRepository.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ApplicationRepository.Entity = Nothing
					previousValue.ApplicationRepositoryHistories.Remove(Me)
				End If
				Me._ApplicationRepository.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationRepositoryHistories.Add(Me)
					Me._ApplicationID = value.ID
					Me._DatabaseID = value.DatabaseID
				Else
					Me._ApplicationID = CType(Nothing, Nullable(Of Long))
					Me._DatabaseID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("ApplicationRepository")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_ApplicationRepositoryHistory", Storage:="_AuthDirectory", ThisKey:="Actor", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.ApplicationRepositoryHistories.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ApplicationRepositoryHistories.Add(Me)
					Me._Actor = value.ID
				Else
					Me._Actor = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AuditType")>  _
Partial Public Class AuditType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Sequence As System.Nullable(Of Integer)
	
	Private _ActionID As System.Nullable(Of Long)
	
	Private _Title As String
	
	Private _Code As String
	
	Private _Description As String
	
	Private _CPDescription As String
	
	Private _Expire As System.Nullable(Of Boolean)
	
	Private _Approval As System.Nullable(Of Boolean)
	
	Private _Decline As System.Nullable(Of Boolean)
	
	Private _Cancel As System.Nullable(Of Boolean)
	
	Private _Status As System.Nullable(Of Boolean)
	
	Private _UpdateRulesEngine As System.Nullable(Of Boolean)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _ApplicationRepositories As EntitySet(Of ApplicationRepository)
	
	Private _ApplicationRepositories1 As EntitySet(Of ApplicationRepository)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnSequenceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSequenceChanged()
    End Sub
    Partial Private Sub OnActionIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnActionIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnCPDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnCPDescriptionChanged()
    End Sub
    Partial Private Sub OnExpireChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnExpireChanged()
    End Sub
    Partial Private Sub OnApprovalChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnApprovalChanged()
    End Sub
    Partial Private Sub OnDeclineChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnDeclineChanged()
    End Sub
    Partial Private Sub OnCancelChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCancelChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnUpdateRulesEngineChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnUpdateRulesEngineChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationRepositories = New EntitySet(Of ApplicationRepository)(AddressOf Me.attach_ApplicationRepositories, AddressOf Me.detach_ApplicationRepositories)
		Me._ApplicationRepositories1 = New EntitySet(Of ApplicationRepository)(AddressOf Me.attach_ApplicationRepositories1, AddressOf Me.detach_ApplicationRepositories1)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sequence", DbType:="Int")>  _
	Public Property Sequence() As System.Nullable(Of Integer)
		Get
			Return Me._Sequence
		End Get
		Set
			If (Me._Sequence.Equals(value) = false) Then
				Me.OnSequenceChanging(value)
				Me.SendPropertyChanging
				Me._Sequence = value
				Me.SendPropertyChanged("Sequence")
				Me.OnSequenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActionID", DbType:="BigInt")>  _
	Public Property ActionID() As System.Nullable(Of Long)
		Get
			Return Me._ActionID
		End Get
		Set
			If (Me._ActionID.Equals(value) = false) Then
				Me.OnActionIDChanging(value)
				Me.SendPropertyChanging
				Me._ActionID = value
				Me.SendPropertyChanged("ActionID")
				Me.OnActionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code", DbType:="NVarChar(50)")>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CPDescription", DbType:="NVarChar(MAX)")>  _
	Public Property CPDescription() As String
		Get
			Return Me._CPDescription
		End Get
		Set
			If (String.Equals(Me._CPDescription, value) = false) Then
				Me.OnCPDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._CPDescription = value
				Me.SendPropertyChanged("CPDescription")
				Me.OnCPDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Expire", DbType:="Bit")>  _
	Public Property Expire() As System.Nullable(Of Boolean)
		Get
			Return Me._Expire
		End Get
		Set
			If (Me._Expire.Equals(value) = false) Then
				Me.OnExpireChanging(value)
				Me.SendPropertyChanging
				Me._Expire = value
				Me.SendPropertyChanged("Expire")
				Me.OnExpireChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Approval", DbType:="Bit")>  _
	Public Property Approval() As System.Nullable(Of Boolean)
		Get
			Return Me._Approval
		End Get
		Set
			If (Me._Approval.Equals(value) = false) Then
				Me.OnApprovalChanging(value)
				Me.SendPropertyChanging
				Me._Approval = value
				Me.SendPropertyChanged("Approval")
				Me.OnApprovalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Decline", DbType:="Bit")>  _
	Public Property Decline() As System.Nullable(Of Boolean)
		Get
			Return Me._Decline
		End Get
		Set
			If (Me._Decline.Equals(value) = false) Then
				Me.OnDeclineChanging(value)
				Me.SendPropertyChanging
				Me._Decline = value
				Me.SendPropertyChanged("Decline")
				Me.OnDeclineChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Cancel", DbType:="Bit")>  _
	Public Property Cancel() As System.Nullable(Of Boolean)
		Get
			Return Me._Cancel
		End Get
		Set
			If (Me._Cancel.Equals(value) = false) Then
				Me.OnCancelChanging(value)
				Me.SendPropertyChanging
				Me._Cancel = value
				Me.SendPropertyChanged("Cancel")
				Me.OnCancelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Bit")>  _
	Public Property Status() As System.Nullable(Of Boolean)
		Get
			Return Me._Status
		End Get
		Set
			If (Me._Status.Equals(value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdateRulesEngine", DbType:="Bit")>  _
	Public Property UpdateRulesEngine() As System.Nullable(Of Boolean)
		Get
			Return Me._UpdateRulesEngine
		End Get
		Set
			If (Me._UpdateRulesEngine.Equals(value) = false) Then
				Me.OnUpdateRulesEngineChanging(value)
				Me.SendPropertyChanging
				Me._UpdateRulesEngine = value
				Me.SendPropertyChanged("UpdateRulesEngine")
				Me.OnUpdateRulesEngineChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuditType_ApplicationRepository", Storage:="_ApplicationRepositories", ThisKey:="ID", OtherKey:="InternalAuditTypeID")>  _
	Public Property ApplicationRepositories() As EntitySet(Of ApplicationRepository)
		Get
			Return Me._ApplicationRepositories
		End Get
		Set
			Me._ApplicationRepositories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuditType_ApplicationRepository1", Storage:="_ApplicationRepositories1", ThisKey:="ID", OtherKey:="AuditTypeID")>  _
	Public Property ApplicationRepositories1() As EntitySet(Of ApplicationRepository)
		Get
			Return Me._ApplicationRepositories1
		End Get
		Set
			Me._ApplicationRepositories1.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApplicationRepositories(ByVal entity As ApplicationRepository)
		Me.SendPropertyChanging
		entity.AuditType = Me
	End Sub
	
	Private Sub detach_ApplicationRepositories(ByVal entity As ApplicationRepository)
		Me.SendPropertyChanging
		entity.AuditType = Nothing
	End Sub
	
	Private Sub attach_ApplicationRepositories1(ByVal entity As ApplicationRepository)
		Me.SendPropertyChanging
		entity.AuditType1 = Me
	End Sub
	
	Private Sub detach_ApplicationRepositories1(ByVal entity As ApplicationRepository)
		Me.SendPropertyChanging
		entity.AuditType1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AuthDirectory")>  _
Partial Public Class AuthDirectory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _RemoteID As System.Nullable(Of System.Guid)
	
	Private _Password As String
	
	Private _Code As String
	
	Private _EmailAddress As String
	
	Private _MobileNumber As String
	
	Private _UserTypeID As Long
	
	Private _RepositoryID As System.Nullable(Of Long)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _Actions As EntitySet(Of Action)
	
	Private _Actions1 As EntitySet(Of Action)
	
	Private _ApplicationRepositories As EntitySet(Of ApplicationRepository)
	
	Private _ApplicationRepositories1 As EntitySet(Of ApplicationRepository)
	
	Private _ApplicationRepositoryHistories As EntitySet(Of ApplicationRepositoryHistory)
	
	Private _AuthDirectories As EntitySet(Of AuthDirectory)
	
	Private _AuthDirectories1 As EntitySet(Of AuthDirectory)
	
	Private _AuthDirectoryRepositories As EntitySet(Of AuthDirectoryRepository)
	
	Private _AuthDirectoryRepositories1 As EntitySet(Of AuthDirectoryRepository)
	
	Private _AuthDirectoryRepositories2 As EntitySet(Of AuthDirectoryRepository)
	
	Private _Components As EntitySet(Of Component)
	
	Private _Components1 As EntitySet(Of Component)
	
	Private _ComponentHistories As EntitySet(Of ComponentHistory)
	
	Private _ComponentHistoryTypes As EntitySet(Of ComponentHistoryType)
	
	Private _ComponentHistoryTypes1 As EntitySet(Of ComponentHistoryType)
	
	Private _CreditProviderMerchants As EntitySet(Of CreditProviderMerchant)
	
	Private _CreditProviderMerchants1 As EntitySet(Of CreditProviderMerchant)
	
	Private _Databases As EntitySet(Of Database)
	
	Private _Databases1 As EntitySet(Of Database)
	
	Private _Databases2 As EntitySet(Of Database)
	
	Private _DatabaseTypes As EntitySet(Of DatabaseType)
	
	Private _DatabaseTypes1 As EntitySet(Of DatabaseType)
	
	Private _Environments As EntitySet(Of Environment)
	
	Private _Environments1 As EntitySet(Of Environment)
	
	Private _Environments2 As EntitySet(Of Environment)
	
	Private _Environments3 As EntitySet(Of Environment)
	
	Private _Environments4 As EntitySet(Of Environment)
	
	Private _Environments5 As EntitySet(Of Environment)
	
	Private _Environments6 As EntitySet(Of Environment)
	
	Private _Environments7 As EntitySet(Of Environment)
	
	Private _Environments8 As EntitySet(Of Environment)
	
	Private _Environments9 As EntitySet(Of Environment)
	
	Private _Environments10 As EntitySet(Of Environment)
	
	Private _Environments11 As EntitySet(Of Environment)
	
	Private _Environments12 As EntitySet(Of Environment)
	
	Private _Environments13 As EntitySet(Of Environment)
	
	Private _EnvironmentRepositories As EntitySet(Of EnvironmentRepository)
	
	Private _EnvironmentRepositories1 As EntitySet(Of EnvironmentRepository)
	
	Private _FinancialInstitutions As EntitySet(Of FinancialInstitution)
	
	Private _FinancialInstitutions1 As EntitySet(Of FinancialInstitution)
	
	Private _FinancialInstitutions2 As EntitySet(Of FinancialInstitution)
	
	Private _Merchants As EntitySet(Of Merchant)
	
	Private _Merchants1 As EntitySet(Of Merchant)
	
	Private _Merchants2 As EntitySet(Of Merchant)
	
	Private _MerchantBankDetails As EntitySet(Of MerchantBankDetail)
	
	Private _MerchantBankDetails1 As EntitySet(Of MerchantBankDetail)
	
	Private _MerchantDetails As EntitySet(Of MerchantDetail)
	
	Private _MerchantDetails1 As EntitySet(Of MerchantDetail)
	
	Private _MerchantHistories As EntitySet(Of MerchantHistory)
	
	Private _MerchantTerminals As EntitySet(Of MerchantTerminal)
	
	Private _MerchantTerminals1 As EntitySet(Of MerchantTerminal)
	
	Private _Metrics As EntitySet(Of Metric)
	
	Private _Metrics1 As EntitySet(Of Metric)
	
	Private _OTPTypes As EntitySet(Of OTPType)
	
	Private _OTPTypes1 As EntitySet(Of OTPType)
	
	Private _Products As EntitySet(Of Product)
	
	Private _Products1 As EntitySet(Of Product)
	
	Private _ProductBands As EntitySet(Of ProductBand)
	
	Private _ProductBands1 As EntitySet(Of ProductBand)
	
	Private _TerminalMetrics As EntitySet(Of TerminalMetric)
	
	Private _TerminalMetrics1 As EntitySet(Of TerminalMetric)
	
	Private _TerminalProducts As EntitySet(Of TerminalProduct)
	
	Private _TerminalProducts1 As EntitySet(Of TerminalProduct)
	
	Private _TerminalTypes As EntitySet(Of TerminalType)
	
	Private _TerminalTypes1 As EntitySet(Of TerminalType)
	
	Private _Repositories As EntitySet(Of Repository)
	
	Private _Repositories1 As EntitySet(Of Repository)
	
	Private _Repositories2 As EntitySet(Of Repository)
	
	Private _Repositories3 As EntitySet(Of Repository)
	
	Private _Repositories4 As EntitySet(Of Repository)
	
	Private _Repositories5 As EntitySet(Of Repository)
	
	Private _Repositories6 As EntitySet(Of Repository)
	
	Private _Repositories7 As EntitySet(Of Repository)
	
	Private _Repositories8 As EntitySet(Of Repository)
	
	Private _Repositories9 As EntitySet(Of Repository)
	
	Private _Repositories10 As EntitySet(Of Repository)
	
	Private _Repositories11 As EntitySet(Of Repository)
	
	Private _Repositories12 As EntitySet(Of Repository)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory1 As EntityRef(Of AuthDirectory)
	
	Private _UserType As EntityRef(Of UserType)
	
	Private _Repository As EntityRef(Of Repository)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnRemoteIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnRemoteIDChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnEmailAddressChanging(value As String)
    End Sub
    Partial Private Sub OnEmailAddressChanged()
    End Sub
    Partial Private Sub OnMobileNumberChanging(value As String)
    End Sub
    Partial Private Sub OnMobileNumberChanged()
    End Sub
    Partial Private Sub OnUserTypeIDChanging(value As Long)
    End Sub
    Partial Private Sub OnUserTypeIDChanged()
    End Sub
    Partial Private Sub OnRepositoryIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnRepositoryIDChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Actions = New EntitySet(Of Action)(AddressOf Me.attach_Actions, AddressOf Me.detach_Actions)
		Me._Actions1 = New EntitySet(Of Action)(AddressOf Me.attach_Actions1, AddressOf Me.detach_Actions1)
		Me._ApplicationRepositories = New EntitySet(Of ApplicationRepository)(AddressOf Me.attach_ApplicationRepositories, AddressOf Me.detach_ApplicationRepositories)
		Me._ApplicationRepositories1 = New EntitySet(Of ApplicationRepository)(AddressOf Me.attach_ApplicationRepositories1, AddressOf Me.detach_ApplicationRepositories1)
		Me._ApplicationRepositoryHistories = New EntitySet(Of ApplicationRepositoryHistory)(AddressOf Me.attach_ApplicationRepositoryHistories, AddressOf Me.detach_ApplicationRepositoryHistories)
		Me._AuthDirectories = New EntitySet(Of AuthDirectory)(AddressOf Me.attach_AuthDirectories, AddressOf Me.detach_AuthDirectories)
		Me._AuthDirectories1 = New EntitySet(Of AuthDirectory)(AddressOf Me.attach_AuthDirectories1, AddressOf Me.detach_AuthDirectories1)
		Me._AuthDirectoryRepositories = New EntitySet(Of AuthDirectoryRepository)(AddressOf Me.attach_AuthDirectoryRepositories, AddressOf Me.detach_AuthDirectoryRepositories)
		Me._AuthDirectoryRepositories1 = New EntitySet(Of AuthDirectoryRepository)(AddressOf Me.attach_AuthDirectoryRepositories1, AddressOf Me.detach_AuthDirectoryRepositories1)
		Me._AuthDirectoryRepositories2 = New EntitySet(Of AuthDirectoryRepository)(AddressOf Me.attach_AuthDirectoryRepositories2, AddressOf Me.detach_AuthDirectoryRepositories2)
		Me._Components = New EntitySet(Of Component)(AddressOf Me.attach_Components, AddressOf Me.detach_Components)
		Me._Components1 = New EntitySet(Of Component)(AddressOf Me.attach_Components1, AddressOf Me.detach_Components1)
		Me._ComponentHistories = New EntitySet(Of ComponentHistory)(AddressOf Me.attach_ComponentHistories, AddressOf Me.detach_ComponentHistories)
		Me._ComponentHistoryTypes = New EntitySet(Of ComponentHistoryType)(AddressOf Me.attach_ComponentHistoryTypes, AddressOf Me.detach_ComponentHistoryTypes)
		Me._ComponentHistoryTypes1 = New EntitySet(Of ComponentHistoryType)(AddressOf Me.attach_ComponentHistoryTypes1, AddressOf Me.detach_ComponentHistoryTypes1)
		Me._CreditProviderMerchants = New EntitySet(Of CreditProviderMerchant)(AddressOf Me.attach_CreditProviderMerchants, AddressOf Me.detach_CreditProviderMerchants)
		Me._CreditProviderMerchants1 = New EntitySet(Of CreditProviderMerchant)(AddressOf Me.attach_CreditProviderMerchants1, AddressOf Me.detach_CreditProviderMerchants1)
		Me._Databases = New EntitySet(Of Database)(AddressOf Me.attach_Databases, AddressOf Me.detach_Databases)
		Me._Databases1 = New EntitySet(Of Database)(AddressOf Me.attach_Databases1, AddressOf Me.detach_Databases1)
		Me._Databases2 = New EntitySet(Of Database)(AddressOf Me.attach_Databases2, AddressOf Me.detach_Databases2)
		Me._DatabaseTypes = New EntitySet(Of DatabaseType)(AddressOf Me.attach_DatabaseTypes, AddressOf Me.detach_DatabaseTypes)
		Me._DatabaseTypes1 = New EntitySet(Of DatabaseType)(AddressOf Me.attach_DatabaseTypes1, AddressOf Me.detach_DatabaseTypes1)
		Me._Environments = New EntitySet(Of Environment)(AddressOf Me.attach_Environments, AddressOf Me.detach_Environments)
		Me._Environments1 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments1, AddressOf Me.detach_Environments1)
		Me._Environments2 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments2, AddressOf Me.detach_Environments2)
		Me._Environments3 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments3, AddressOf Me.detach_Environments3)
		Me._Environments4 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments4, AddressOf Me.detach_Environments4)
		Me._Environments5 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments5, AddressOf Me.detach_Environments5)
		Me._Environments6 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments6, AddressOf Me.detach_Environments6)
		Me._Environments7 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments7, AddressOf Me.detach_Environments7)
		Me._Environments8 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments8, AddressOf Me.detach_Environments8)
		Me._Environments9 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments9, AddressOf Me.detach_Environments9)
		Me._Environments10 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments10, AddressOf Me.detach_Environments10)
		Me._Environments11 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments11, AddressOf Me.detach_Environments11)
		Me._Environments12 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments12, AddressOf Me.detach_Environments12)
		Me._Environments13 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments13, AddressOf Me.detach_Environments13)
		Me._EnvironmentRepositories = New EntitySet(Of EnvironmentRepository)(AddressOf Me.attach_EnvironmentRepositories, AddressOf Me.detach_EnvironmentRepositories)
		Me._EnvironmentRepositories1 = New EntitySet(Of EnvironmentRepository)(AddressOf Me.attach_EnvironmentRepositories1, AddressOf Me.detach_EnvironmentRepositories1)
		Me._FinancialInstitutions = New EntitySet(Of FinancialInstitution)(AddressOf Me.attach_FinancialInstitutions, AddressOf Me.detach_FinancialInstitutions)
		Me._FinancialInstitutions1 = New EntitySet(Of FinancialInstitution)(AddressOf Me.attach_FinancialInstitutions1, AddressOf Me.detach_FinancialInstitutions1)
		Me._FinancialInstitutions2 = New EntitySet(Of FinancialInstitution)(AddressOf Me.attach_FinancialInstitutions2, AddressOf Me.detach_FinancialInstitutions2)
		Me._Merchants = New EntitySet(Of Merchant)(AddressOf Me.attach_Merchants, AddressOf Me.detach_Merchants)
		Me._Merchants1 = New EntitySet(Of Merchant)(AddressOf Me.attach_Merchants1, AddressOf Me.detach_Merchants1)
		Me._Merchants2 = New EntitySet(Of Merchant)(AddressOf Me.attach_Merchants2, AddressOf Me.detach_Merchants2)
		Me._MerchantBankDetails = New EntitySet(Of MerchantBankDetail)(AddressOf Me.attach_MerchantBankDetails, AddressOf Me.detach_MerchantBankDetails)
		Me._MerchantBankDetails1 = New EntitySet(Of MerchantBankDetail)(AddressOf Me.attach_MerchantBankDetails1, AddressOf Me.detach_MerchantBankDetails1)
		Me._MerchantDetails = New EntitySet(Of MerchantDetail)(AddressOf Me.attach_MerchantDetails, AddressOf Me.detach_MerchantDetails)
		Me._MerchantDetails1 = New EntitySet(Of MerchantDetail)(AddressOf Me.attach_MerchantDetails1, AddressOf Me.detach_MerchantDetails1)
		Me._MerchantHistories = New EntitySet(Of MerchantHistory)(AddressOf Me.attach_MerchantHistories, AddressOf Me.detach_MerchantHistories)
		Me._MerchantTerminals = New EntitySet(Of MerchantTerminal)(AddressOf Me.attach_MerchantTerminals, AddressOf Me.detach_MerchantTerminals)
		Me._MerchantTerminals1 = New EntitySet(Of MerchantTerminal)(AddressOf Me.attach_MerchantTerminals1, AddressOf Me.detach_MerchantTerminals1)
		Me._Metrics = New EntitySet(Of Metric)(AddressOf Me.attach_Metrics, AddressOf Me.detach_Metrics)
		Me._Metrics1 = New EntitySet(Of Metric)(AddressOf Me.attach_Metrics1, AddressOf Me.detach_Metrics1)
		Me._OTPTypes = New EntitySet(Of OTPType)(AddressOf Me.attach_OTPTypes, AddressOf Me.detach_OTPTypes)
		Me._OTPTypes1 = New EntitySet(Of OTPType)(AddressOf Me.attach_OTPTypes1, AddressOf Me.detach_OTPTypes1)
		Me._Products = New EntitySet(Of Product)(AddressOf Me.attach_Products, AddressOf Me.detach_Products)
		Me._Products1 = New EntitySet(Of Product)(AddressOf Me.attach_Products1, AddressOf Me.detach_Products1)
		Me._ProductBands = New EntitySet(Of ProductBand)(AddressOf Me.attach_ProductBands, AddressOf Me.detach_ProductBands)
		Me._ProductBands1 = New EntitySet(Of ProductBand)(AddressOf Me.attach_ProductBands1, AddressOf Me.detach_ProductBands1)
		Me._TerminalMetrics = New EntitySet(Of TerminalMetric)(AddressOf Me.attach_TerminalMetrics, AddressOf Me.detach_TerminalMetrics)
		Me._TerminalMetrics1 = New EntitySet(Of TerminalMetric)(AddressOf Me.attach_TerminalMetrics1, AddressOf Me.detach_TerminalMetrics1)
		Me._TerminalProducts = New EntitySet(Of TerminalProduct)(AddressOf Me.attach_TerminalProducts, AddressOf Me.detach_TerminalProducts)
		Me._TerminalProducts1 = New EntitySet(Of TerminalProduct)(AddressOf Me.attach_TerminalProducts1, AddressOf Me.detach_TerminalProducts1)
		Me._TerminalTypes = New EntitySet(Of TerminalType)(AddressOf Me.attach_TerminalTypes, AddressOf Me.detach_TerminalTypes)
		Me._TerminalTypes1 = New EntitySet(Of TerminalType)(AddressOf Me.attach_TerminalTypes1, AddressOf Me.detach_TerminalTypes1)
		Me._Repositories = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories, AddressOf Me.detach_Repositories)
		Me._Repositories1 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories1, AddressOf Me.detach_Repositories1)
		Me._Repositories2 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories2, AddressOf Me.detach_Repositories2)
		Me._Repositories3 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories3, AddressOf Me.detach_Repositories3)
		Me._Repositories4 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories4, AddressOf Me.detach_Repositories4)
		Me._Repositories5 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories5, AddressOf Me.detach_Repositories5)
		Me._Repositories6 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories6, AddressOf Me.detach_Repositories6)
		Me._Repositories7 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories7, AddressOf Me.detach_Repositories7)
		Me._Repositories8 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories8, AddressOf Me.detach_Repositories8)
		Me._Repositories9 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories9, AddressOf Me.detach_Repositories9)
		Me._Repositories10 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories10, AddressOf Me.detach_Repositories10)
		Me._Repositories11 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories11, AddressOf Me.detach_Repositories11)
		Me._Repositories12 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories12, AddressOf Me.detach_Repositories12)
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory1 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._UserType = CType(Nothing, EntityRef(Of UserType))
		Me._Repository = CType(Nothing, EntityRef(Of Repository))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RemoteID", DbType:="UniqueIdentifier")>  _
	Public Property RemoteID() As System.Nullable(Of System.Guid)
		Get
			Return Me._RemoteID
		End Get
		Set
			If (Me._RemoteID.Equals(value) = false) Then
				Me.OnRemoteIDChanging(value)
				Me.SendPropertyChanging
				Me._RemoteID = value
				Me.SendPropertyChanged("RemoteID")
				Me.OnRemoteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="NVarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code", DbType:="NVarChar(50)")>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmailAddress", DbType:="NVarChar(250)")>  _
	Public Property EmailAddress() As String
		Get
			Return Me._EmailAddress
		End Get
		Set
			If (String.Equals(Me._EmailAddress, value) = false) Then
				Me.OnEmailAddressChanging(value)
				Me.SendPropertyChanging
				Me._EmailAddress = value
				Me.SendPropertyChanged("EmailAddress")
				Me.OnEmailAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MobileNumber", DbType:="NVarChar(50)")>  _
	Public Property MobileNumber() As String
		Get
			Return Me._MobileNumber
		End Get
		Set
			If (String.Equals(Me._MobileNumber, value) = false) Then
				Me.OnMobileNumberChanging(value)
				Me.SendPropertyChanging
				Me._MobileNumber = value
				Me.SendPropertyChanged("MobileNumber")
				Me.OnMobileNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserTypeID", DbType:="BigInt NOT NULL")>  _
	Public Property UserTypeID() As Long
		Get
			Return Me._UserTypeID
		End Get
		Set
			If ((Me._UserTypeID = value)  _
						= false) Then
				If Me._UserType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUserTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._UserTypeID = value
				Me.SendPropertyChanged("UserTypeID")
				Me.OnUserTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RepositoryID", DbType:="BigInt")>  _
	Public Property RepositoryID() As System.Nullable(Of Long)
		Get
			Return Me._RepositoryID
		End Get
		Set
			If (Me._RepositoryID.Equals(value) = false) Then
				If Me._Repository.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRepositoryIDChanging(value)
				Me.SendPropertyChanging
				Me._RepositoryID = value
				Me.SendPropertyChanged("RepositoryID")
				Me.OnRepositoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				If Me._AuthDirectory1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Action", Storage:="_Actions", ThisKey:="ID", OtherKey:="CreatedBy")>  _
	Public Property Actions() As EntitySet(Of Action)
		Get
			Return Me._Actions
		End Get
		Set
			Me._Actions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Action1", Storage:="_Actions1", ThisKey:="ID", OtherKey:="UpdatedBy")>  _
	Public Property Actions1() As EntitySet(Of Action)
		Get
			Return Me._Actions1
		End Get
		Set
			Me._Actions1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_ApplicationRepository", Storage:="_ApplicationRepositories", ThisKey:="ID", OtherKey:="CreatedBy")>  _
	Public Property ApplicationRepositories() As EntitySet(Of ApplicationRepository)
		Get
			Return Me._ApplicationRepositories
		End Get
		Set
			Me._ApplicationRepositories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_ApplicationRepository1", Storage:="_ApplicationRepositories1", ThisKey:="ID", OtherKey:="UpdatedBy")>  _
	Public Property ApplicationRepositories1() As EntitySet(Of ApplicationRepository)
		Get
			Return Me._ApplicationRepositories1
		End Get
		Set
			Me._ApplicationRepositories1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_ApplicationRepositoryHistory", Storage:="_ApplicationRepositoryHistories", ThisKey:="ID", OtherKey:="Actor")>  _
	Public Property ApplicationRepositoryHistories() As EntitySet(Of ApplicationRepositoryHistory)
		Get
			Return Me._ApplicationRepositoryHistories
		End Get
		Set
			Me._ApplicationRepositoryHistories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_AuthDirectory", Storage:="_AuthDirectories", ThisKey:="ID", OtherKey:="CreatedBy")>  _
	Public Property AuthDirectories() As EntitySet(Of AuthDirectory)
		Get
			Return Me._AuthDirectories
		End Get
		Set
			Me._AuthDirectories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_AuthDirectory1", Storage:="_AuthDirectories1", ThisKey:="ID", OtherKey:="UpdatedBy")>  _
	Public Property AuthDirectories1() As EntitySet(Of AuthDirectory)
		Get
			Return Me._AuthDirectories1
		End Get
		Set
			Me._AuthDirectories1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_AuthDirectoryRepository", Storage:="_AuthDirectoryRepositories", ThisKey:="ID", OtherKey:="CreatedBy")>  _
	Public Property AuthDirectoryRepositories() As EntitySet(Of AuthDirectoryRepository)
		Get
			Return Me._AuthDirectoryRepositories
		End Get
		Set
			Me._AuthDirectoryRepositories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_AuthDirectoryRepository1", Storage:="_AuthDirectoryRepositories1", ThisKey:="ID", OtherKey:="UpdatedBy")>  _
	Public Property AuthDirectoryRepositories1() As EntitySet(Of AuthDirectoryRepository)
		Get
			Return Me._AuthDirectoryRepositories1
		End Get
		Set
			Me._AuthDirectoryRepositories1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_AuthDirectoryRepository2", Storage:="_AuthDirectoryRepositories2", ThisKey:="ID", OtherKey:="AuthDirectoryID")>  _
	Public Property AuthDirectoryRepositories2() As EntitySet(Of AuthDirectoryRepository)
		Get
			Return Me._AuthDirectoryRepositories2
		End Get
		Set
			Me._AuthDirectoryRepositories2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Component", Storage:="_Components", ThisKey:="ID", OtherKey:="CreatedBy")>  _
	Public Property Components() As EntitySet(Of Component)
		Get
			Return Me._Components
		End Get
		Set
			Me._Components.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Component1", Storage:="_Components1", ThisKey:="ID", OtherKey:="UpdatedBy")>  _
	Public Property Components1() As EntitySet(Of Component)
		Get
			Return Me._Components1
		End Get
		Set
			Me._Components1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_ComponentHistory", Storage:="_ComponentHistories", ThisKey:="ID", OtherKey:="Actor")>  _
	Public Property ComponentHistories() As EntitySet(Of ComponentHistory)
		Get
			Return Me._ComponentHistories
		End Get
		Set
			Me._ComponentHistories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_ComponentHistoryType", Storage:="_ComponentHistoryTypes", ThisKey:="ID", OtherKey:="CreatedBy")>  _
	Public Property ComponentHistoryTypes() As EntitySet(Of ComponentHistoryType)
		Get
			Return Me._ComponentHistoryTypes
		End Get
		Set
			Me._ComponentHistoryTypes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_ComponentHistoryType1", Storage:="_ComponentHistoryTypes1", ThisKey:="ID", OtherKey:="UpdatedBy")>  _
	Public Property ComponentHistoryTypes1() As EntitySet(Of ComponentHistoryType)
		Get
			Return Me._ComponentHistoryTypes1
		End Get
		Set
			Me._ComponentHistoryTypes1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_CreditProviderMerchant", Storage:="_CreditProviderMerchants", ThisKey:="ID", OtherKey:="CreatedBy")>  _
	Public Property CreditProviderMerchants() As EntitySet(Of CreditProviderMerchant)
		Get
			Return Me._CreditProviderMerchants
		End Get
		Set
			Me._CreditProviderMerchants.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_CreditProviderMerchant1", Storage:="_CreditProviderMerchants1", ThisKey:="ID", OtherKey:="UpdatedBy")>  _
	Public Property CreditProviderMerchants1() As EntitySet(Of CreditProviderMerchant)
		Get
			Return Me._CreditProviderMerchants1
		End Get
		Set
			Me._CreditProviderMerchants1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Database", Storage:="_Databases", ThisKey:="ID", OtherKey:="AuthDirectoryID")>  _
	Public Property Databases() As EntitySet(Of Database)
		Get
			Return Me._Databases
		End Get
		Set
			Me._Databases.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Database1", Storage:="_Databases1", ThisKey:="ID", OtherKey:="AuthDirectoryID")>  _
	Public Property Databases1() As EntitySet(Of Database)
		Get
			Return Me._Databases1
		End Get
		Set
			Me._Databases1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Database2", Storage:="_Databases2", ThisKey:="ID", OtherKey:="UpdatedBy")>  _
	Public Property Databases2() As EntitySet(Of Database)
		Get
			Return Me._Databases2
		End Get
		Set
			Me._Databases2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_DatabaseType", Storage:="_DatabaseTypes", ThisKey:="ID", OtherKey:="CreatedBy")>  _
	Public Property DatabaseTypes() As EntitySet(Of DatabaseType)
		Get
			Return Me._DatabaseTypes
		End Get
		Set
			Me._DatabaseTypes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_DatabaseType1", Storage:="_DatabaseTypes1", ThisKey:="ID", OtherKey:="UpdatedBy")>  _
	Public Property DatabaseTypes1() As EntitySet(Of DatabaseType)
		Get
			Return Me._DatabaseTypes1
		End Get
		Set
			Me._DatabaseTypes1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment", Storage:="_Environments", ThisKey:="ID", OtherKey:="AdminUserID")>  _
	Public Property Environments() As EntitySet(Of Environment)
		Get
			Return Me._Environments
		End Get
		Set
			Me._Environments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment1", Storage:="_Environments1", ThisKey:="ID", OtherKey:="CreatedBy")>  _
	Public Property Environments1() As EntitySet(Of Environment)
		Get
			Return Me._Environments1
		End Get
		Set
			Me._Environments1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment2", Storage:="_Environments2", ThisKey:="ID", OtherKey:="CompuscanUserID")>  _
	Public Property Environments2() As EntitySet(Of Environment)
		Get
			Return Me._Environments2
		End Get
		Set
			Me._Environments2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment3", Storage:="_Environments3", ThisKey:="ID", OtherKey:="VodacomUserID")>  _
	Public Property Environments3() As EntitySet(Of Environment)
		Get
			Return Me._Environments3
		End Get
		Set
			Me._Environments3.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment4", Storage:="_Environments4", ThisKey:="ID", OtherKey:="ConnectMobileNIUSSDUserID")>  _
	Public Property Environments4() As EntitySet(Of Environment)
		Get
			Return Me._Environments4
		End Get
		Set
			Me._Environments4.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment5", Storage:="_Environments5", ThisKey:="ID", OtherKey:="ConnectMobileSMSUserID")>  _
	Public Property Environments5() As EntitySet(Of Environment)
		Get
			Return Me._Environments5
		End Get
		Set
			Me._Environments5.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment6", Storage:="_Environments6", ThisKey:="ID", OtherKey:="FirstEscalationUserID")>  _
	Public Property Environments6() As EntitySet(Of Environment)
		Get
			Return Me._Environments6
		End Get
		Set
			Me._Environments6.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment7", Storage:="_Environments7", ThisKey:="ID", OtherKey:="IntegrationUserID")>  _
	Public Property Environments7() As EntitySet(Of Environment)
		Get
			Return Me._Environments7
		End Get
		Set
			Me._Environments7.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment8", Storage:="_Environments8", ThisKey:="ID", OtherKey:="SecondEscalationUserID")>  _
	Public Property Environments8() As EntitySet(Of Environment)
		Get
			Return Me._Environments8
		End Get
		Set
			Me._Environments8.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment9", Storage:="_Environments9", ThisKey:="ID", OtherKey:="ServiceUserID")>  _
	Public Property Environments9() As EntitySet(Of Environment)
		Get
			Return Me._Environments9
		End Get
		Set
			Me._Environments9.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment10", Storage:="_Environments10", ThisKey:="ID", OtherKey:="SwitchPayUserID")>  _
	Public Property Environments10() As EntitySet(Of Environment)
		Get
			Return Me._Environments10
		End Get
		Set
			Me._Environments10.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment11", Storage:="_Environments11", ThisKey:="ID", OtherKey:="UpdatedBy")>  _
	Public Property Environments11() As EntitySet(Of Environment)
		Get
			Return Me._Environments11
		End Get
		Set
			Me._Environments11.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment12", Storage:="_Environments12", ThisKey:="ID", OtherKey:="ACPASUserID")>  _
	Public Property Environments12() As EntitySet(Of Environment)
		Get
			Return Me._Environments12
		End Get
		Set
			Me._Environments12.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment13", Storage:="_Environments13", ThisKey:="ID", OtherKey:="VodacomUserID")>  _
	Public Property Environments13() As EntitySet(Of Environment)
		Get
			Return Me._Environments13
		End Get
		Set
			Me._Environments13.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_EnvironmentRepository", Storage:="_EnvironmentRepositories", ThisKey:="ID", OtherKey:="CreatedBy")>  _
	Public Property EnvironmentRepositories() As EntitySet(Of EnvironmentRepository)
		Get
			Return Me._EnvironmentRepositories
		End Get
		Set
			Me._EnvironmentRepositories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_EnvironmentRepository1", Storage:="_EnvironmentRepositories1", ThisKey:="ID", OtherKey:="UpdatedBy")>  _
	Public Property EnvironmentRepositories1() As EntitySet(Of EnvironmentRepository)
		Get
			Return Me._EnvironmentRepositories1
		End Get
		Set
			Me._EnvironmentRepositories1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_FinancialInstitution", Storage:="_FinancialInstitutions", ThisKey:="ID", OtherKey:="CreatedBy")>  _
	Public Property FinancialInstitutions() As EntitySet(Of FinancialInstitution)
		Get
			Return Me._FinancialInstitutions
		End Get
		Set
			Me._FinancialInstitutions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_FinancialInstitution1", Storage:="_FinancialInstitutions1", ThisKey:="ID", OtherKey:="UpdatedBy")>  _
	Public Property FinancialInstitutions1() As EntitySet(Of FinancialInstitution)
		Get
			Return Me._FinancialInstitutions1
		End Get
		Set
			Me._FinancialInstitutions1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_FinancialInstitution2", Storage:="_FinancialInstitutions2", ThisKey:="ID", OtherKey:="PrimaryUser")>  _
	Public Property FinancialInstitutions2() As EntitySet(Of FinancialInstitution)
		Get
			Return Me._FinancialInstitutions2
		End Get
		Set
			Me._FinancialInstitutions2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Merchant", Storage:="_Merchants", ThisKey:="ID", OtherKey:="CreatedBy")>  _
	Public Property Merchants() As EntitySet(Of Merchant)
		Get
			Return Me._Merchants
		End Get
		Set
			Me._Merchants.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Merchant1", Storage:="_Merchants1", ThisKey:="ID", OtherKey:="UpdatedBy")>  _
	Public Property Merchants1() As EntitySet(Of Merchant)
		Get
			Return Me._Merchants1
		End Get
		Set
			Me._Merchants1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Merchant2", Storage:="_Merchants2", ThisKey:="ID", OtherKey:="AuthDirectoryID")>  _
	Public Property Merchants2() As EntitySet(Of Merchant)
		Get
			Return Me._Merchants2
		End Get
		Set
			Me._Merchants2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_MerchantBankDetail", Storage:="_MerchantBankDetails", ThisKey:="ID", OtherKey:="CreatedBy")>  _
	Public Property MerchantBankDetails() As EntitySet(Of MerchantBankDetail)
		Get
			Return Me._MerchantBankDetails
		End Get
		Set
			Me._MerchantBankDetails.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_MerchantBankDetail1", Storage:="_MerchantBankDetails1", ThisKey:="ID", OtherKey:="UpdatedBy")>  _
	Public Property MerchantBankDetails1() As EntitySet(Of MerchantBankDetail)
		Get
			Return Me._MerchantBankDetails1
		End Get
		Set
			Me._MerchantBankDetails1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_MerchantDetail", Storage:="_MerchantDetails", ThisKey:="ID", OtherKey:="CreatedBy")>  _
	Public Property MerchantDetails() As EntitySet(Of MerchantDetail)
		Get
			Return Me._MerchantDetails
		End Get
		Set
			Me._MerchantDetails.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_MerchantDetail1", Storage:="_MerchantDetails1", ThisKey:="ID", OtherKey:="UpdatedBy")>  _
	Public Property MerchantDetails1() As EntitySet(Of MerchantDetail)
		Get
			Return Me._MerchantDetails1
		End Get
		Set
			Me._MerchantDetails1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_MerchantHistory", Storage:="_MerchantHistories", ThisKey:="ID", OtherKey:="Actor")>  _
	Public Property MerchantHistories() As EntitySet(Of MerchantHistory)
		Get
			Return Me._MerchantHistories
		End Get
		Set
			Me._MerchantHistories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_MerchantTerminal", Storage:="_MerchantTerminals", ThisKey:="ID", OtherKey:="CreatedBy")>  _
	Public Property MerchantTerminals() As EntitySet(Of MerchantTerminal)
		Get
			Return Me._MerchantTerminals
		End Get
		Set
			Me._MerchantTerminals.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_MerchantTerminal1", Storage:="_MerchantTerminals1", ThisKey:="ID", OtherKey:="UpdatedBy")>  _
	Public Property MerchantTerminals1() As EntitySet(Of MerchantTerminal)
		Get
			Return Me._MerchantTerminals1
		End Get
		Set
			Me._MerchantTerminals1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Metric", Storage:="_Metrics", ThisKey:="ID", OtherKey:="CreatedBy")>  _
	Public Property Metrics() As EntitySet(Of Metric)
		Get
			Return Me._Metrics
		End Get
		Set
			Me._Metrics.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Metric1", Storage:="_Metrics1", ThisKey:="ID", OtherKey:="UpdatedBy")>  _
	Public Property Metrics1() As EntitySet(Of Metric)
		Get
			Return Me._Metrics1
		End Get
		Set
			Me._Metrics1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_OTPType", Storage:="_OTPTypes", ThisKey:="ID", OtherKey:="CreatedBy")>  _
	Public Property OTPTypes() As EntitySet(Of OTPType)
		Get
			Return Me._OTPTypes
		End Get
		Set
			Me._OTPTypes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_OTPType1", Storage:="_OTPTypes1", ThisKey:="ID", OtherKey:="UpdatedBy")>  _
	Public Property OTPTypes1() As EntitySet(Of OTPType)
		Get
			Return Me._OTPTypes1
		End Get
		Set
			Me._OTPTypes1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Product", Storage:="_Products", ThisKey:="ID", OtherKey:="CreatedBy")>  _
	Public Property Products() As EntitySet(Of Product)
		Get
			Return Me._Products
		End Get
		Set
			Me._Products.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Product1", Storage:="_Products1", ThisKey:="ID", OtherKey:="UpdatedBy")>  _
	Public Property Products1() As EntitySet(Of Product)
		Get
			Return Me._Products1
		End Get
		Set
			Me._Products1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_ProductBand", Storage:="_ProductBands", ThisKey:="ID", OtherKey:="CreatedBy")>  _
	Public Property ProductBands() As EntitySet(Of ProductBand)
		Get
			Return Me._ProductBands
		End Get
		Set
			Me._ProductBands.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_ProductBand1", Storage:="_ProductBands1", ThisKey:="ID", OtherKey:="UpdatedBy")>  _
	Public Property ProductBands1() As EntitySet(Of ProductBand)
		Get
			Return Me._ProductBands1
		End Get
		Set
			Me._ProductBands1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_TerminalMetric", Storage:="_TerminalMetrics", ThisKey:="ID", OtherKey:="CreatedBy")>  _
	Public Property TerminalMetrics() As EntitySet(Of TerminalMetric)
		Get
			Return Me._TerminalMetrics
		End Get
		Set
			Me._TerminalMetrics.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_TerminalMetric1", Storage:="_TerminalMetrics1", ThisKey:="ID", OtherKey:="UpdatedBy")>  _
	Public Property TerminalMetrics1() As EntitySet(Of TerminalMetric)
		Get
			Return Me._TerminalMetrics1
		End Get
		Set
			Me._TerminalMetrics1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_TerminalProduct", Storage:="_TerminalProducts", ThisKey:="ID", OtherKey:="CreatedBy")>  _
	Public Property TerminalProducts() As EntitySet(Of TerminalProduct)
		Get
			Return Me._TerminalProducts
		End Get
		Set
			Me._TerminalProducts.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_TerminalProduct1", Storage:="_TerminalProducts1", ThisKey:="ID", OtherKey:="UpdatedBy")>  _
	Public Property TerminalProducts1() As EntitySet(Of TerminalProduct)
		Get
			Return Me._TerminalProducts1
		End Get
		Set
			Me._TerminalProducts1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_TerminalType", Storage:="_TerminalTypes", ThisKey:="ID", OtherKey:="UpdatedBy")>  _
	Public Property TerminalTypes() As EntitySet(Of TerminalType)
		Get
			Return Me._TerminalTypes
		End Get
		Set
			Me._TerminalTypes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_TerminalType1", Storage:="_TerminalTypes1", ThisKey:="ID", OtherKey:="CreatedBy")>  _
	Public Property TerminalTypes1() As EntitySet(Of TerminalType)
		Get
			Return Me._TerminalTypes1
		End Get
		Set
			Me._TerminalTypes1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository", Storage:="_Repositories", ThisKey:="ID", OtherKey:="AdminUserID")>  _
	Public Property Repositories() As EntitySet(Of Repository)
		Get
			Return Me._Repositories
		End Get
		Set
			Me._Repositories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository1", Storage:="_Repositories1", ThisKey:="ID", OtherKey:="CreatedBy")>  _
	Public Property Repositories1() As EntitySet(Of Repository)
		Get
			Return Me._Repositories1
		End Get
		Set
			Me._Repositories1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository2", Storage:="_Repositories2", ThisKey:="ID", OtherKey:="ConnectMobileNIUSSDUserID")>  _
	Public Property Repositories2() As EntitySet(Of Repository)
		Get
			Return Me._Repositories2
		End Get
		Set
			Me._Repositories2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository3", Storage:="_Repositories3", ThisKey:="ID", OtherKey:="ConnectMobileSMSUserID")>  _
	Public Property Repositories3() As EntitySet(Of Repository)
		Get
			Return Me._Repositories3
		End Get
		Set
			Me._Repositories3.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository4", Storage:="_Repositories4", ThisKey:="ID", OtherKey:="VodacomUserID")>  _
	Public Property Repositories4() As EntitySet(Of Repository)
		Get
			Return Me._Repositories4
		End Get
		Set
			Me._Repositories4.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository5", Storage:="_Repositories5", ThisKey:="ID", OtherKey:="FirstEscalationUserID")>  _
	Public Property Repositories5() As EntitySet(Of Repository)
		Get
			Return Me._Repositories5
		End Get
		Set
			Me._Repositories5.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository6", Storage:="_Repositories6", ThisKey:="ID", OtherKey:="IntegrationUserID")>  _
	Public Property Repositories6() As EntitySet(Of Repository)
		Get
			Return Me._Repositories6
		End Get
		Set
			Me._Repositories6.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository7", Storage:="_Repositories7", ThisKey:="ID", OtherKey:="SecondEscalationUserID")>  _
	Public Property Repositories7() As EntitySet(Of Repository)
		Get
			Return Me._Repositories7
		End Get
		Set
			Me._Repositories7.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository8", Storage:="_Repositories8", ThisKey:="ID", OtherKey:="ServiceUserID")>  _
	Public Property Repositories8() As EntitySet(Of Repository)
		Get
			Return Me._Repositories8
		End Get
		Set
			Me._Repositories8.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository9", Storage:="_Repositories9", ThisKey:="ID", OtherKey:="SwitchPayUserID")>  _
	Public Property Repositories9() As EntitySet(Of Repository)
		Get
			Return Me._Repositories9
		End Get
		Set
			Me._Repositories9.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository10", Storage:="_Repositories10", ThisKey:="ID", OtherKey:="UpdatedBy")>  _
	Public Property Repositories10() As EntitySet(Of Repository)
		Get
			Return Me._Repositories10
		End Get
		Set
			Me._Repositories10.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository11", Storage:="_Repositories11", ThisKey:="ID", OtherKey:="ACPASUserID")>  _
	Public Property Repositories11() As EntitySet(Of Repository)
		Get
			Return Me._Repositories11
		End Get
		Set
			Me._Repositories11.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository12", Storage:="_Repositories12", ThisKey:="ID", OtherKey:="CompuscanUserID")>  _
	Public Property Repositories12() As EntitySet(Of Repository)
		Get
			Return Me._Repositories12
		End Get
		Set
			Me._Repositories12.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_AuthDirectory", Storage:="_AuthDirectory", ThisKey:="CreatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.AuthDirectories.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AuthDirectories.Add(Me)
					Me._CreatedBy = value.ID
				Else
					Me._CreatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_AuthDirectory1", Storage:="_AuthDirectory1", ThisKey:="UpdatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory1() As AuthDirectory
		Get
			Return Me._AuthDirectory1.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory1.Entity = Nothing
					previousValue.AuthDirectories1.Remove(Me)
				End If
				Me._AuthDirectory1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AuthDirectories1.Add(Me)
					Me._UpdatedBy = value.ID
				Else
					Me._UpdatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="UserType_AuthDirectory", Storage:="_UserType", ThisKey:="UserTypeID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property UserType() As UserType
		Get
			Return Me._UserType.Entity
		End Get
		Set
			Dim previousValue As UserType = Me._UserType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._UserType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._UserType.Entity = Nothing
					previousValue.AuthDirectories.Remove(Me)
				End If
				Me._UserType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AuthDirectories.Add(Me)
					Me._UserTypeID = value.ID
				Else
					Me._UserTypeID = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("UserType")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Repository_AuthDirectory", Storage:="_Repository", ThisKey:="RepositoryID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Repository() As Repository
		Get
			Return Me._Repository.Entity
		End Get
		Set
			Dim previousValue As Repository = Me._Repository.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Repository.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Repository.Entity = Nothing
					previousValue.AuthDirectories.Remove(Me)
				End If
				Me._Repository.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AuthDirectories.Add(Me)
					Me._RepositoryID = value.ID
				Else
					Me._RepositoryID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Repository")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Actions(ByVal entity As Action)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_Actions(ByVal entity As Action)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_Actions1(ByVal entity As Action)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Me
	End Sub
	
	Private Sub detach_Actions1(ByVal entity As Action)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Nothing
	End Sub
	
	Private Sub attach_ApplicationRepositories(ByVal entity As ApplicationRepository)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_ApplicationRepositories(ByVal entity As ApplicationRepository)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_ApplicationRepositories1(ByVal entity As ApplicationRepository)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Me
	End Sub
	
	Private Sub detach_ApplicationRepositories1(ByVal entity As ApplicationRepository)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Nothing
	End Sub
	
	Private Sub attach_ApplicationRepositoryHistories(ByVal entity As ApplicationRepositoryHistory)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_ApplicationRepositoryHistories(ByVal entity As ApplicationRepositoryHistory)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_AuthDirectories(ByVal entity As AuthDirectory)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_AuthDirectories(ByVal entity As AuthDirectory)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_AuthDirectories1(ByVal entity As AuthDirectory)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Me
	End Sub
	
	Private Sub detach_AuthDirectories1(ByVal entity As AuthDirectory)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Nothing
	End Sub
	
	Private Sub attach_AuthDirectoryRepositories(ByVal entity As AuthDirectoryRepository)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_AuthDirectoryRepositories(ByVal entity As AuthDirectoryRepository)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_AuthDirectoryRepositories1(ByVal entity As AuthDirectoryRepository)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Me
	End Sub
	
	Private Sub detach_AuthDirectoryRepositories1(ByVal entity As AuthDirectoryRepository)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Nothing
	End Sub
	
	Private Sub attach_AuthDirectoryRepositories2(ByVal entity As AuthDirectoryRepository)
		Me.SendPropertyChanging
		entity.AuthDirectory2 = Me
	End Sub
	
	Private Sub detach_AuthDirectoryRepositories2(ByVal entity As AuthDirectoryRepository)
		Me.SendPropertyChanging
		entity.AuthDirectory2 = Nothing
	End Sub
	
	Private Sub attach_Components(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_Components(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_Components1(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Me
	End Sub
	
	Private Sub detach_Components1(ByVal entity As Component)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Nothing
	End Sub
	
	Private Sub attach_ComponentHistories(ByVal entity As ComponentHistory)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_ComponentHistories(ByVal entity As ComponentHistory)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_ComponentHistoryTypes(ByVal entity As ComponentHistoryType)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_ComponentHistoryTypes(ByVal entity As ComponentHistoryType)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_ComponentHistoryTypes1(ByVal entity As ComponentHistoryType)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Me
	End Sub
	
	Private Sub detach_ComponentHistoryTypes1(ByVal entity As ComponentHistoryType)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Nothing
	End Sub
	
	Private Sub attach_CreditProviderMerchants(ByVal entity As CreditProviderMerchant)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_CreditProviderMerchants(ByVal entity As CreditProviderMerchant)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_CreditProviderMerchants1(ByVal entity As CreditProviderMerchant)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Me
	End Sub
	
	Private Sub detach_CreditProviderMerchants1(ByVal entity As CreditProviderMerchant)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Nothing
	End Sub
	
	Private Sub attach_Databases(ByVal entity As Database)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_Databases(ByVal entity As Database)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_Databases1(ByVal entity As Database)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Me
	End Sub
	
	Private Sub detach_Databases1(ByVal entity As Database)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Nothing
	End Sub
	
	Private Sub attach_Databases2(ByVal entity As Database)
		Me.SendPropertyChanging
		entity.AuthDirectory2 = Me
	End Sub
	
	Private Sub detach_Databases2(ByVal entity As Database)
		Me.SendPropertyChanging
		entity.AuthDirectory2 = Nothing
	End Sub
	
	Private Sub attach_DatabaseTypes(ByVal entity As DatabaseType)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_DatabaseTypes(ByVal entity As DatabaseType)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_DatabaseTypes1(ByVal entity As DatabaseType)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Me
	End Sub
	
	Private Sub detach_DatabaseTypes1(ByVal entity As DatabaseType)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Nothing
	End Sub
	
	Private Sub attach_Environments(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_Environments(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_Environments1(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Me
	End Sub
	
	Private Sub detach_Environments1(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Nothing
	End Sub
	
	Private Sub attach_Environments2(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory2 = Me
	End Sub
	
	Private Sub detach_Environments2(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory2 = Nothing
	End Sub
	
	Private Sub attach_Environments3(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory3 = Me
	End Sub
	
	Private Sub detach_Environments3(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory3 = Nothing
	End Sub
	
	Private Sub attach_Environments4(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory4 = Me
	End Sub
	
	Private Sub detach_Environments4(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory4 = Nothing
	End Sub
	
	Private Sub attach_Environments5(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory5 = Me
	End Sub
	
	Private Sub detach_Environments5(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory5 = Nothing
	End Sub
	
	Private Sub attach_Environments6(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory6 = Me
	End Sub
	
	Private Sub detach_Environments6(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory6 = Nothing
	End Sub
	
	Private Sub attach_Environments7(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory7 = Me
	End Sub
	
	Private Sub detach_Environments7(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory7 = Nothing
	End Sub
	
	Private Sub attach_Environments8(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory8 = Me
	End Sub
	
	Private Sub detach_Environments8(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory8 = Nothing
	End Sub
	
	Private Sub attach_Environments9(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory9 = Me
	End Sub
	
	Private Sub detach_Environments9(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory9 = Nothing
	End Sub
	
	Private Sub attach_Environments10(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory10 = Me
	End Sub
	
	Private Sub detach_Environments10(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory10 = Nothing
	End Sub
	
	Private Sub attach_Environments11(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory11 = Me
	End Sub
	
	Private Sub detach_Environments11(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory11 = Nothing
	End Sub
	
	Private Sub attach_Environments12(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory12 = Me
	End Sub
	
	Private Sub detach_Environments12(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory12 = Nothing
	End Sub
	
	Private Sub attach_Environments13(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory13 = Me
	End Sub
	
	Private Sub detach_Environments13(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.AuthDirectory13 = Nothing
	End Sub
	
	Private Sub attach_EnvironmentRepositories(ByVal entity As EnvironmentRepository)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_EnvironmentRepositories(ByVal entity As EnvironmentRepository)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_EnvironmentRepositories1(ByVal entity As EnvironmentRepository)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Me
	End Sub
	
	Private Sub detach_EnvironmentRepositories1(ByVal entity As EnvironmentRepository)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Nothing
	End Sub
	
	Private Sub attach_FinancialInstitutions(ByVal entity As FinancialInstitution)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_FinancialInstitutions(ByVal entity As FinancialInstitution)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_FinancialInstitutions1(ByVal entity As FinancialInstitution)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Me
	End Sub
	
	Private Sub detach_FinancialInstitutions1(ByVal entity As FinancialInstitution)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Nothing
	End Sub
	
	Private Sub attach_FinancialInstitutions2(ByVal entity As FinancialInstitution)
		Me.SendPropertyChanging
		entity.AuthDirectory2 = Me
	End Sub
	
	Private Sub detach_FinancialInstitutions2(ByVal entity As FinancialInstitution)
		Me.SendPropertyChanging
		entity.AuthDirectory2 = Nothing
	End Sub
	
	Private Sub attach_Merchants(ByVal entity As Merchant)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_Merchants(ByVal entity As Merchant)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_Merchants1(ByVal entity As Merchant)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Me
	End Sub
	
	Private Sub detach_Merchants1(ByVal entity As Merchant)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Nothing
	End Sub
	
	Private Sub attach_Merchants2(ByVal entity As Merchant)
		Me.SendPropertyChanging
		entity.AuthDirectory2 = Me
	End Sub
	
	Private Sub detach_Merchants2(ByVal entity As Merchant)
		Me.SendPropertyChanging
		entity.AuthDirectory2 = Nothing
	End Sub
	
	Private Sub attach_MerchantBankDetails(ByVal entity As MerchantBankDetail)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_MerchantBankDetails(ByVal entity As MerchantBankDetail)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_MerchantBankDetails1(ByVal entity As MerchantBankDetail)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Me
	End Sub
	
	Private Sub detach_MerchantBankDetails1(ByVal entity As MerchantBankDetail)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Nothing
	End Sub
	
	Private Sub attach_MerchantDetails(ByVal entity As MerchantDetail)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_MerchantDetails(ByVal entity As MerchantDetail)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_MerchantDetails1(ByVal entity As MerchantDetail)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Me
	End Sub
	
	Private Sub detach_MerchantDetails1(ByVal entity As MerchantDetail)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Nothing
	End Sub
	
	Private Sub attach_MerchantHistories(ByVal entity As MerchantHistory)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_MerchantHistories(ByVal entity As MerchantHistory)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_MerchantTerminals(ByVal entity As MerchantTerminal)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_MerchantTerminals(ByVal entity As MerchantTerminal)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_MerchantTerminals1(ByVal entity As MerchantTerminal)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Me
	End Sub
	
	Private Sub detach_MerchantTerminals1(ByVal entity As MerchantTerminal)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Nothing
	End Sub
	
	Private Sub attach_Metrics(ByVal entity As Metric)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_Metrics(ByVal entity As Metric)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_Metrics1(ByVal entity As Metric)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Me
	End Sub
	
	Private Sub detach_Metrics1(ByVal entity As Metric)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Nothing
	End Sub
	
	Private Sub attach_OTPTypes(ByVal entity As OTPType)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_OTPTypes(ByVal entity As OTPType)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_OTPTypes1(ByVal entity As OTPType)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Me
	End Sub
	
	Private Sub detach_OTPTypes1(ByVal entity As OTPType)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Nothing
	End Sub
	
	Private Sub attach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_Products1(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Me
	End Sub
	
	Private Sub detach_Products1(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Nothing
	End Sub
	
	Private Sub attach_ProductBands(ByVal entity As ProductBand)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_ProductBands(ByVal entity As ProductBand)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_ProductBands1(ByVal entity As ProductBand)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Me
	End Sub
	
	Private Sub detach_ProductBands1(ByVal entity As ProductBand)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Nothing
	End Sub
	
	Private Sub attach_TerminalMetrics(ByVal entity As TerminalMetric)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_TerminalMetrics(ByVal entity As TerminalMetric)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_TerminalMetrics1(ByVal entity As TerminalMetric)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Me
	End Sub
	
	Private Sub detach_TerminalMetrics1(ByVal entity As TerminalMetric)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Nothing
	End Sub
	
	Private Sub attach_TerminalProducts(ByVal entity As TerminalProduct)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_TerminalProducts(ByVal entity As TerminalProduct)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_TerminalProducts1(ByVal entity As TerminalProduct)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Me
	End Sub
	
	Private Sub detach_TerminalProducts1(ByVal entity As TerminalProduct)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Nothing
	End Sub
	
	Private Sub attach_TerminalTypes(ByVal entity As TerminalType)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_TerminalTypes(ByVal entity As TerminalType)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_TerminalTypes1(ByVal entity As TerminalType)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Me
	End Sub
	
	Private Sub detach_TerminalTypes1(ByVal entity As TerminalType)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Nothing
	End Sub
	
	Private Sub attach_Repositories(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory = Me
	End Sub
	
	Private Sub detach_Repositories(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory = Nothing
	End Sub
	
	Private Sub attach_Repositories1(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Me
	End Sub
	
	Private Sub detach_Repositories1(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory1 = Nothing
	End Sub
	
	Private Sub attach_Repositories2(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory2 = Me
	End Sub
	
	Private Sub detach_Repositories2(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory2 = Nothing
	End Sub
	
	Private Sub attach_Repositories3(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory3 = Me
	End Sub
	
	Private Sub detach_Repositories3(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory3 = Nothing
	End Sub
	
	Private Sub attach_Repositories4(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory4 = Me
	End Sub
	
	Private Sub detach_Repositories4(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory4 = Nothing
	End Sub
	
	Private Sub attach_Repositories5(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory5 = Me
	End Sub
	
	Private Sub detach_Repositories5(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory5 = Nothing
	End Sub
	
	Private Sub attach_Repositories6(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory6 = Me
	End Sub
	
	Private Sub detach_Repositories6(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory6 = Nothing
	End Sub
	
	Private Sub attach_Repositories7(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory7 = Me
	End Sub
	
	Private Sub detach_Repositories7(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory7 = Nothing
	End Sub
	
	Private Sub attach_Repositories8(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory8 = Me
	End Sub
	
	Private Sub detach_Repositories8(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory8 = Nothing
	End Sub
	
	Private Sub attach_Repositories9(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory9 = Me
	End Sub
	
	Private Sub detach_Repositories9(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory9 = Nothing
	End Sub
	
	Private Sub attach_Repositories10(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory10 = Me
	End Sub
	
	Private Sub detach_Repositories10(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory10 = Nothing
	End Sub
	
	Private Sub attach_Repositories11(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory11 = Me
	End Sub
	
	Private Sub detach_Repositories11(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory11 = Nothing
	End Sub
	
	Private Sub attach_Repositories12(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory12 = Me
	End Sub
	
	Private Sub detach_Repositories12(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.AuthDirectory12 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.AuthDirectoryRepository")>  _
Partial Public Class AuthDirectoryRepository
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _AuthDirectoryID As System.Nullable(Of Long)
	
	Private _RemoteID As System.Nullable(Of System.Guid)
	
	Private _RepositoryID As System.Nullable(Of Long)
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory1 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory2 As EntityRef(Of AuthDirectory)
	
	Private _Repository As EntityRef(Of Repository)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnAuthDirectoryIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnAuthDirectoryIDChanged()
    End Sub
    Partial Private Sub OnRemoteIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnRemoteIDChanged()
    End Sub
    Partial Private Sub OnRepositoryIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnRepositoryIDChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory1 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory2 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._Repository = CType(Nothing, EntityRef(Of Repository))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AuthDirectoryID", DbType:="BigInt")>  _
	Public Property AuthDirectoryID() As System.Nullable(Of Long)
		Get
			Return Me._AuthDirectoryID
		End Get
		Set
			If (Me._AuthDirectoryID.Equals(value) = false) Then
				If Me._AuthDirectory2.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAuthDirectoryIDChanging(value)
				Me.SendPropertyChanging
				Me._AuthDirectoryID = value
				Me.SendPropertyChanged("AuthDirectoryID")
				Me.OnAuthDirectoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RemoteID", DbType:="UniqueIdentifier")>  _
	Public Property RemoteID() As System.Nullable(Of System.Guid)
		Get
			Return Me._RemoteID
		End Get
		Set
			If (Me._RemoteID.Equals(value) = false) Then
				Me.OnRemoteIDChanging(value)
				Me.SendPropertyChanging
				Me._RemoteID = value
				Me.SendPropertyChanged("RemoteID")
				Me.OnRemoteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RepositoryID", DbType:="BigInt")>  _
	Public Property RepositoryID() As System.Nullable(Of Long)
		Get
			Return Me._RepositoryID
		End Get
		Set
			If (Me._RepositoryID.Equals(value) = false) Then
				If Me._Repository.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRepositoryIDChanging(value)
				Me.SendPropertyChanging
				Me._RepositoryID = value
				Me.SendPropertyChanged("RepositoryID")
				Me.OnRepositoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				If Me._AuthDirectory1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_AuthDirectoryRepository", Storage:="_AuthDirectory", ThisKey:="CreatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.AuthDirectoryRepositories.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AuthDirectoryRepositories.Add(Me)
					Me._CreatedBy = value.ID
				Else
					Me._CreatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_AuthDirectoryRepository1", Storage:="_AuthDirectory1", ThisKey:="UpdatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory1() As AuthDirectory
		Get
			Return Me._AuthDirectory1.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory1.Entity = Nothing
					previousValue.AuthDirectoryRepositories1.Remove(Me)
				End If
				Me._AuthDirectory1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AuthDirectoryRepositories1.Add(Me)
					Me._UpdatedBy = value.ID
				Else
					Me._UpdatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_AuthDirectoryRepository2", Storage:="_AuthDirectory2", ThisKey:="AuthDirectoryID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory2() As AuthDirectory
		Get
			Return Me._AuthDirectory2.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory2.Entity = Nothing
					previousValue.AuthDirectoryRepositories2.Remove(Me)
				End If
				Me._AuthDirectory2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AuthDirectoryRepositories2.Add(Me)
					Me._AuthDirectoryID = value.ID
				Else
					Me._AuthDirectoryID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory2")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Repository_AuthDirectoryRepository", Storage:="_Repository", ThisKey:="RepositoryID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Repository() As Repository
		Get
			Return Me._Repository.Entity
		End Get
		Set
			Dim previousValue As Repository = Me._Repository.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Repository.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Repository.Entity = Nothing
					previousValue.AuthDirectoryRepositories.Remove(Me)
				End If
				Me._Repository.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.AuthDirectoryRepositories.Add(Me)
					Me._RepositoryID = value.ID
				Else
					Me._RepositoryID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Repository")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BandType")>  _
Partial Public Class BandType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _ProductBands As EntitySet(Of ProductBand)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ProductBands = New EntitySet(Of ProductBand)(AddressOf Me.attach_ProductBands, AddressOf Me.detach_ProductBands)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BandType_ProductBand", Storage:="_ProductBands", ThisKey:="ID", OtherKey:="BandTypeID")>  _
	Public Property ProductBands() As EntitySet(Of ProductBand)
		Get
			Return Me._ProductBands
		End Get
		Set
			Me._ProductBands.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ProductBands(ByVal entity As ProductBand)
		Me.SendPropertyChanging
		entity.BandType = Me
	End Sub
	
	Private Sub detach_ProductBands(ByVal entity As ProductBand)
		Me.SendPropertyChanging
		entity.BandType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Bureau")>  _
Partial Public Class Bureau
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _IDNumber As String
	
	Private _CreditScore As System.Nullable(Of Integer)
	
	Private _NoOfJudgments As System.Nullable(Of Integer)
	
	Private _NoOfDefaults As System.Nullable(Of Integer)
	
	Private _NoOfArrears As System.Nullable(Of Integer)
	
	Private _CurrentObligations As System.Nullable(Of Decimal)
	
	Private _OutcomeID As System.Nullable(Of Long)
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnIDNumberChanging(value As String)
    End Sub
    Partial Private Sub OnIDNumberChanged()
    End Sub
    Partial Private Sub OnCreditScoreChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCreditScoreChanged()
    End Sub
    Partial Private Sub OnNoOfJudgmentsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNoOfJudgmentsChanged()
    End Sub
    Partial Private Sub OnNoOfDefaultsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNoOfDefaultsChanged()
    End Sub
    Partial Private Sub OnNoOfArrearsChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNoOfArrearsChanged()
    End Sub
    Partial Private Sub OnCurrentObligationsChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCurrentObligationsChanged()
    End Sub
    Partial Private Sub OnOutcomeIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnOutcomeIDChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDNumber", DbType:="NVarChar(20)")>  _
	Public Property IDNumber() As String
		Get
			Return Me._IDNumber
		End Get
		Set
			If (String.Equals(Me._IDNumber, value) = false) Then
				Me.OnIDNumberChanging(value)
				Me.SendPropertyChanging
				Me._IDNumber = value
				Me.SendPropertyChanged("IDNumber")
				Me.OnIDNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreditScore", DbType:="Int")>  _
	Public Property CreditScore() As System.Nullable(Of Integer)
		Get
			Return Me._CreditScore
		End Get
		Set
			If (Me._CreditScore.Equals(value) = false) Then
				Me.OnCreditScoreChanging(value)
				Me.SendPropertyChanging
				Me._CreditScore = value
				Me.SendPropertyChanged("CreditScore")
				Me.OnCreditScoreChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoOfJudgments", DbType:="Int")>  _
	Public Property NoOfJudgments() As System.Nullable(Of Integer)
		Get
			Return Me._NoOfJudgments
		End Get
		Set
			If (Me._NoOfJudgments.Equals(value) = false) Then
				Me.OnNoOfJudgmentsChanging(value)
				Me.SendPropertyChanging
				Me._NoOfJudgments = value
				Me.SendPropertyChanged("NoOfJudgments")
				Me.OnNoOfJudgmentsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoOfDefaults", DbType:="Int")>  _
	Public Property NoOfDefaults() As System.Nullable(Of Integer)
		Get
			Return Me._NoOfDefaults
		End Get
		Set
			If (Me._NoOfDefaults.Equals(value) = false) Then
				Me.OnNoOfDefaultsChanging(value)
				Me.SendPropertyChanging
				Me._NoOfDefaults = value
				Me.SendPropertyChanged("NoOfDefaults")
				Me.OnNoOfDefaultsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoOfArrears", DbType:="Int")>  _
	Public Property NoOfArrears() As System.Nullable(Of Integer)
		Get
			Return Me._NoOfArrears
		End Get
		Set
			If (Me._NoOfArrears.Equals(value) = false) Then
				Me.OnNoOfArrearsChanging(value)
				Me.SendPropertyChanging
				Me._NoOfArrears = value
				Me.SendPropertyChanged("NoOfArrears")
				Me.OnNoOfArrearsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentObligations", DbType:="Money")>  _
	Public Property CurrentObligations() As System.Nullable(Of Decimal)
		Get
			Return Me._CurrentObligations
		End Get
		Set
			If (Me._CurrentObligations.Equals(value) = false) Then
				Me.OnCurrentObligationsChanging(value)
				Me.SendPropertyChanging
				Me._CurrentObligations = value
				Me.SendPropertyChanged("CurrentObligations")
				Me.OnCurrentObligationsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OutcomeID", DbType:="BigInt")>  _
	Public Property OutcomeID() As System.Nullable(Of Long)
		Get
			Return Me._OutcomeID
		End Get
		Set
			If (Me._OutcomeID.Equals(value) = false) Then
				Me.OnOutcomeIDChanging(value)
				Me.SendPropertyChanging
				Me._OutcomeID = value
				Me.SendPropertyChanged("OutcomeID")
				Me.OnOutcomeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BusinessSize")>  _
Partial Public Class BusinessSize
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _Minimum As System.Nullable(Of Integer)
	
	Private _Maximum As System.Nullable(Of Integer)
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _MerchantDetails As EntitySet(Of MerchantDetail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnMinimumChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMinimumChanged()
    End Sub
    Partial Private Sub OnMaximumChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMaximumChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MerchantDetails = New EntitySet(Of MerchantDetail)(AddressOf Me.attach_MerchantDetails, AddressOf Me.detach_MerchantDetails)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Minimum", DbType:="Int")>  _
	Public Property Minimum() As System.Nullable(Of Integer)
		Get
			Return Me._Minimum
		End Get
		Set
			If (Me._Minimum.Equals(value) = false) Then
				Me.OnMinimumChanging(value)
				Me.SendPropertyChanging
				Me._Minimum = value
				Me.SendPropertyChanged("Minimum")
				Me.OnMinimumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Maximum", DbType:="Int")>  _
	Public Property Maximum() As System.Nullable(Of Integer)
		Get
			Return Me._Maximum
		End Get
		Set
			If (Me._Maximum.Equals(value) = false) Then
				Me.OnMaximumChanging(value)
				Me.SendPropertyChanging
				Me._Maximum = value
				Me.SendPropertyChanged("Maximum")
				Me.OnMaximumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BusinessSize_MerchantDetail", Storage:="_MerchantDetails", ThisKey:="ID", OtherKey:="BusinessSizeID")>  _
	Public Property MerchantDetails() As EntitySet(Of MerchantDetail)
		Get
			Return Me._MerchantDetails
		End Get
		Set
			Me._MerchantDetails.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_MerchantDetails(ByVal entity As MerchantDetail)
		Me.SendPropertyChanging
		entity.BusinessSize = Me
	End Sub
	
	Private Sub detach_MerchantDetails(ByVal entity As MerchantDetail)
		Me.SendPropertyChanging
		entity.BusinessSize = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.BusinessStructure")>  _
Partial Public Class BusinessStructure
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _MerchantDetails As EntitySet(Of MerchantDetail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MerchantDetails = New EntitySet(Of MerchantDetail)(AddressOf Me.attach_MerchantDetails, AddressOf Me.detach_MerchantDetails)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BusinessStructure_MerchantDetail", Storage:="_MerchantDetails", ThisKey:="ID", OtherKey:="BusinessStructureID")>  _
	Public Property MerchantDetails() As EntitySet(Of MerchantDetail)
		Get
			Return Me._MerchantDetails
		End Get
		Set
			Me._MerchantDetails.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_MerchantDetails(ByVal entity As MerchantDetail)
		Me.SendPropertyChanging
		entity.BusinessStructure = Me
	End Sub
	
	Private Sub detach_MerchantDetails(ByVal entity As MerchantDetail)
		Me.SendPropertyChanging
		entity.BusinessStructure = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Channel")>  _
Partial Public Class Channel
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _FinancialInstitutionID As System.Nullable(Of Long)
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _ApplicationRepositories As EntitySet(Of ApplicationRepository)
	
	Private _MerchantTerminals As EntitySet(Of MerchantTerminal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnFinancialInstitutionIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFinancialInstitutionIDChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationRepositories = New EntitySet(Of ApplicationRepository)(AddressOf Me.attach_ApplicationRepositories, AddressOf Me.detach_ApplicationRepositories)
		Me._MerchantTerminals = New EntitySet(Of MerchantTerminal)(AddressOf Me.attach_MerchantTerminals, AddressOf Me.detach_MerchantTerminals)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(150)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinancialInstitutionID", DbType:="BigInt")>  _
	Public Property FinancialInstitutionID() As System.Nullable(Of Long)
		Get
			Return Me._FinancialInstitutionID
		End Get
		Set
			If (Me._FinancialInstitutionID.Equals(value) = false) Then
				Me.OnFinancialInstitutionIDChanging(value)
				Me.SendPropertyChanging
				Me._FinancialInstitutionID = value
				Me.SendPropertyChanged("FinancialInstitutionID")
				Me.OnFinancialInstitutionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Channel_ApplicationRepository", Storage:="_ApplicationRepositories", ThisKey:="ID", OtherKey:="ChannelID")>  _
	Public Property ApplicationRepositories() As EntitySet(Of ApplicationRepository)
		Get
			Return Me._ApplicationRepositories
		End Get
		Set
			Me._ApplicationRepositories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Channel_MerchantTerminal", Storage:="_MerchantTerminals", ThisKey:="ID", OtherKey:="ChannelID")>  _
	Public Property MerchantTerminals() As EntitySet(Of MerchantTerminal)
		Get
			Return Me._MerchantTerminals
		End Get
		Set
			Me._MerchantTerminals.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApplicationRepositories(ByVal entity As ApplicationRepository)
		Me.SendPropertyChanging
		entity.Channel = Me
	End Sub
	
	Private Sub detach_ApplicationRepositories(ByVal entity As ApplicationRepository)
		Me.SendPropertyChanging
		entity.Channel = Nothing
	End Sub
	
	Private Sub attach_MerchantTerminals(ByVal entity As MerchantTerminal)
		Me.SendPropertyChanging
		entity.Channel = Me
	End Sub
	
	Private Sub detach_MerchantTerminals(ByVal entity As MerchantTerminal)
		Me.SendPropertyChanging
		entity.Channel = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.City")>  _
Partial Public Class City
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Title As String
	
	Private _ProvinceID As Integer
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBY As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _Province As EntityRef(Of Province)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnProvinceIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnProvinceIDChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedBYChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedBYChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Province = CType(Nothing, EntityRef(Of Province))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProvinceID", DbType:="Int NOT NULL")>  _
	Public Property ProvinceID() As Integer
		Get
			Return Me._ProvinceID
		End Get
		Set
			If ((Me._ProvinceID = value)  _
						= false) Then
				If Me._Province.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnProvinceIDChanging(value)
				Me.SendPropertyChanging
				Me._ProvinceID = value
				Me.SendPropertyChanged("ProvinceID")
				Me.OnProvinceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBY", DbType:="BigInt")>  _
	Public Property CreatedBY() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBY
		End Get
		Set
			If (Me._CreatedBY.Equals(value) = false) Then
				Me.OnCreatedBYChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBY = value
				Me.SendPropertyChanged("CreatedBY")
				Me.OnCreatedBYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Province_City", Storage:="_Province", ThisKey:="ProvinceID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Province() As Province
		Get
			Return Me._Province.Entity
		End Get
		Set
			Dim previousValue As Province = Me._Province.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Province.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Province.Entity = Nothing
					previousValue.Cities.Remove(Me)
				End If
				Me._Province.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Cities.Add(Me)
					Me._ProvinceID = value.ID
				Else
					Me._ProvinceID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Province")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CollectionStatus")>  _
Partial Public Class CollectionStatus
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _AuditTypeID As System.Nullable(Of Long)
	
	Private _FinancialInstitutionID As System.Nullable(Of Long)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnAuditTypeIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnAuditTypeIDChanged()
    End Sub
    Partial Private Sub OnFinancialInstitutionIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFinancialInstitutionIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AuditTypeID", DbType:="BigInt")>  _
	Public Property AuditTypeID() As System.Nullable(Of Long)
		Get
			Return Me._AuditTypeID
		End Get
		Set
			If (Me._AuditTypeID.Equals(value) = false) Then
				Me.OnAuditTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._AuditTypeID = value
				Me.SendPropertyChanged("AuditTypeID")
				Me.OnAuditTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinancialInstitutionID", DbType:="BigInt")>  _
	Public Property FinancialInstitutionID() As System.Nullable(Of Long)
		Get
			Return Me._FinancialInstitutionID
		End Get
		Set
			If (Me._FinancialInstitutionID.Equals(value) = false) Then
				Me.OnFinancialInstitutionIDChanging(value)
				Me.SendPropertyChanging
				Me._FinancialInstitutionID = value
				Me.SendPropertyChanged("FinancialInstitutionID")
				Me.OnFinancialInstitutionIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Component")>  _
Partial Public Class Component
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _TableName As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _ComponentHistories As EntitySet(Of ComponentHistory)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory1 As EntityRef(Of AuthDirectory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnTableNameChanging(value As String)
    End Sub
    Partial Private Sub OnTableNameChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ComponentHistories = New EntitySet(Of ComponentHistory)(AddressOf Me.attach_ComponentHistories, AddressOf Me.detach_ComponentHistories)
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory1 = CType(Nothing, EntityRef(Of AuthDirectory))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TableName", DbType:="NVarChar(150)")>  _
	Public Property TableName() As String
		Get
			Return Me._TableName
		End Get
		Set
			If (String.Equals(Me._TableName, value) = false) Then
				Me.OnTableNameChanging(value)
				Me.SendPropertyChanging
				Me._TableName = value
				Me.SendPropertyChanged("TableName")
				Me.OnTableNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				If Me._AuthDirectory1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Component_ComponentHistory", Storage:="_ComponentHistories", ThisKey:="ID", OtherKey:="ComponentID")>  _
	Public Property ComponentHistories() As EntitySet(Of ComponentHistory)
		Get
			Return Me._ComponentHistories
		End Get
		Set
			Me._ComponentHistories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Component", Storage:="_AuthDirectory", ThisKey:="CreatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.Components.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Components.Add(Me)
					Me._CreatedBy = value.ID
				Else
					Me._CreatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Component1", Storage:="_AuthDirectory1", ThisKey:="UpdatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory1() As AuthDirectory
		Get
			Return Me._AuthDirectory1.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory1.Entity = Nothing
					previousValue.Components1.Remove(Me)
				End If
				Me._AuthDirectory1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Components1.Add(Me)
					Me._UpdatedBy = value.ID
				Else
					Me._UpdatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ComponentHistories(ByVal entity As ComponentHistory)
		Me.SendPropertyChanging
		entity.Component = Me
	End Sub
	
	Private Sub detach_ComponentHistories(ByVal entity As ComponentHistory)
		Me.SendPropertyChanging
		entity.Component = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ComponentHistory")>  _
Partial Public Class ComponentHistory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Actor As System.Nullable(Of Long)
	
	Private _Name As String
	
	Private _Details As String
	
	Private _ComponentHistoryTypeID As System.Nullable(Of Long)
	
	Private _ComponentID As System.Nullable(Of Long)
	
	Private _PKID As System.Nullable(Of Long)
	
	Private _DateActioned As System.Nullable(Of Date)
	
	Private _Component As EntityRef(Of Component)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _ComponentHistoryType As EntityRef(Of ComponentHistoryType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnActorChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnActorChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnDetailsChanged()
    End Sub
    Partial Private Sub OnComponentHistoryTypeIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnComponentHistoryTypeIDChanged()
    End Sub
    Partial Private Sub OnComponentIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnComponentIDChanged()
    End Sub
    Partial Private Sub OnPKIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnPKIDChanged()
    End Sub
    Partial Private Sub OnDateActionedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateActionedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Component = CType(Nothing, EntityRef(Of Component))
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._ComponentHistoryType = CType(Nothing, EntityRef(Of ComponentHistoryType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Actor", DbType:="BigInt")>  _
	Public Property Actor() As System.Nullable(Of Long)
		Get
			Return Me._Actor
		End Get
		Set
			If (Me._Actor.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnActorChanging(value)
				Me.SendPropertyChanging
				Me._Actor = value
				Me.SendPropertyChanged("Actor")
				Me.OnActorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NChar(10)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details", DbType:="NVarChar(MAX)")>  _
	Public Property Details() As String
		Get
			Return Me._Details
		End Get
		Set
			If (String.Equals(Me._Details, value) = false) Then
				Me.OnDetailsChanging(value)
				Me.SendPropertyChanging
				Me._Details = value
				Me.SendPropertyChanged("Details")
				Me.OnDetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComponentHistoryTypeID", DbType:="BigInt")>  _
	Public Property ComponentHistoryTypeID() As System.Nullable(Of Long)
		Get
			Return Me._ComponentHistoryTypeID
		End Get
		Set
			If (Me._ComponentHistoryTypeID.Equals(value) = false) Then
				If Me._ComponentHistoryType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnComponentHistoryTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._ComponentHistoryTypeID = value
				Me.SendPropertyChanged("ComponentHistoryTypeID")
				Me.OnComponentHistoryTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComponentID", DbType:="BigInt")>  _
	Public Property ComponentID() As System.Nullable(Of Long)
		Get
			Return Me._ComponentID
		End Get
		Set
			If (Me._ComponentID.Equals(value) = false) Then
				If Me._Component.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnComponentIDChanging(value)
				Me.SendPropertyChanging
				Me._ComponentID = value
				Me.SendPropertyChanged("ComponentID")
				Me.OnComponentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PKID", DbType:="BigInt")>  _
	Public Property PKID() As System.Nullable(Of Long)
		Get
			Return Me._PKID
		End Get
		Set
			If (Me._PKID.Equals(value) = false) Then
				Me.OnPKIDChanging(value)
				Me.SendPropertyChanging
				Me._PKID = value
				Me.SendPropertyChanged("PKID")
				Me.OnPKIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateActioned", DbType:="DateTime")>  _
	Public Property DateActioned() As System.Nullable(Of Date)
		Get
			Return Me._DateActioned
		End Get
		Set
			If (Me._DateActioned.Equals(value) = false) Then
				Me.OnDateActionedChanging(value)
				Me.SendPropertyChanging
				Me._DateActioned = value
				Me.SendPropertyChanged("DateActioned")
				Me.OnDateActionedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Component_ComponentHistory", Storage:="_Component", ThisKey:="ComponentID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Component() As Component
		Get
			Return Me._Component.Entity
		End Get
		Set
			Dim previousValue As Component = Me._Component.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Component.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Component.Entity = Nothing
					previousValue.ComponentHistories.Remove(Me)
				End If
				Me._Component.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ComponentHistories.Add(Me)
					Me._ComponentID = value.ID
				Else
					Me._ComponentID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Component")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_ComponentHistory", Storage:="_AuthDirectory", ThisKey:="Actor", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.ComponentHistories.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ComponentHistories.Add(Me)
					Me._Actor = value.ID
				Else
					Me._Actor = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ComponentHistoryType_ComponentHistory", Storage:="_ComponentHistoryType", ThisKey:="ComponentHistoryTypeID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property ComponentHistoryType() As ComponentHistoryType
		Get
			Return Me._ComponentHistoryType.Entity
		End Get
		Set
			Dim previousValue As ComponentHistoryType = Me._ComponentHistoryType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ComponentHistoryType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ComponentHistoryType.Entity = Nothing
					previousValue.ComponentHistories.Remove(Me)
				End If
				Me._ComponentHistoryType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ComponentHistories.Add(Me)
					Me._ComponentHistoryTypeID = value.ID
				Else
					Me._ComponentHistoryTypeID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("ComponentHistoryType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ComponentHistoryType")>  _
Partial Public Class ComponentHistoryType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _ComponentHistories As EntitySet(Of ComponentHistory)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory1 As EntityRef(Of AuthDirectory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ComponentHistories = New EntitySet(Of ComponentHistory)(AddressOf Me.attach_ComponentHistories, AddressOf Me.detach_ComponentHistories)
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory1 = CType(Nothing, EntityRef(Of AuthDirectory))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				If Me._AuthDirectory1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ComponentHistoryType_ComponentHistory", Storage:="_ComponentHistories", ThisKey:="ID", OtherKey:="ComponentHistoryTypeID")>  _
	Public Property ComponentHistories() As EntitySet(Of ComponentHistory)
		Get
			Return Me._ComponentHistories
		End Get
		Set
			Me._ComponentHistories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_ComponentHistoryType", Storage:="_AuthDirectory", ThisKey:="CreatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.ComponentHistoryTypes.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ComponentHistoryTypes.Add(Me)
					Me._CreatedBy = value.ID
				Else
					Me._CreatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_ComponentHistoryType1", Storage:="_AuthDirectory1", ThisKey:="UpdatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory1() As AuthDirectory
		Get
			Return Me._AuthDirectory1.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory1.Entity = Nothing
					previousValue.ComponentHistoryTypes1.Remove(Me)
				End If
				Me._AuthDirectory1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ComponentHistoryTypes1.Add(Me)
					Me._UpdatedBy = value.ID
				Else
					Me._UpdatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ComponentHistories(ByVal entity As ComponentHistory)
		Me.SendPropertyChanging
		entity.ComponentHistoryType = Me
	End Sub
	
	Private Sub detach_ComponentHistories(ByVal entity As ComponentHistory)
		Me.SendPropertyChanging
		entity.ComponentHistoryType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ContractTerm")>  _
Partial Public Class ContractTerm
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _MerchantTerminals As EntitySet(Of MerchantTerminal)
	
	Private _TerminalProducts As EntitySet(Of TerminalProduct)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MerchantTerminals = New EntitySet(Of MerchantTerminal)(AddressOf Me.attach_MerchantTerminals, AddressOf Me.detach_MerchantTerminals)
		Me._TerminalProducts = New EntitySet(Of TerminalProduct)(AddressOf Me.attach_TerminalProducts, AddressOf Me.detach_TerminalProducts)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(50)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ContractTerm_MerchantTerminal", Storage:="_MerchantTerminals", ThisKey:="ID", OtherKey:="ContractTermID")>  _
	Public Property MerchantTerminals() As EntitySet(Of MerchantTerminal)
		Get
			Return Me._MerchantTerminals
		End Get
		Set
			Me._MerchantTerminals.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ContractTerm_TerminalProduct", Storage:="_TerminalProducts", ThisKey:="ID", OtherKey:="ContractTermID")>  _
	Public Property TerminalProducts() As EntitySet(Of TerminalProduct)
		Get
			Return Me._TerminalProducts
		End Get
		Set
			Me._TerminalProducts.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_MerchantTerminals(ByVal entity As MerchantTerminal)
		Me.SendPropertyChanging
		entity.ContractTerm = Me
	End Sub
	
	Private Sub detach_MerchantTerminals(ByVal entity As MerchantTerminal)
		Me.SendPropertyChanging
		entity.ContractTerm = Nothing
	End Sub
	
	Private Sub attach_TerminalProducts(ByVal entity As TerminalProduct)
		Me.SendPropertyChanging
		entity.ContractTerm = Me
	End Sub
	
	Private Sub detach_TerminalProducts(ByVal entity As TerminalProduct)
		Me.SendPropertyChanging
		entity.ContractTerm = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CreditProviderAuditType")>  _
Partial Public Class CreditProviderAuditType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Sequence As System.Nullable(Of Integer)
	
	Private _CreditProviderID As System.Nullable(Of Long)
	
	Private _AuditTypeID As System.Nullable(Of Long)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnSequenceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSequenceChanged()
    End Sub
    Partial Private Sub OnCreditProviderIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreditProviderIDChanged()
    End Sub
    Partial Private Sub OnAuditTypeIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnAuditTypeIDChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sequence", DbType:="Int")>  _
	Public Property Sequence() As System.Nullable(Of Integer)
		Get
			Return Me._Sequence
		End Get
		Set
			If (Me._Sequence.Equals(value) = false) Then
				Me.OnSequenceChanging(value)
				Me.SendPropertyChanging
				Me._Sequence = value
				Me.SendPropertyChanged("Sequence")
				Me.OnSequenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreditProviderID", DbType:="BigInt")>  _
	Public Property CreditProviderID() As System.Nullable(Of Long)
		Get
			Return Me._CreditProviderID
		End Get
		Set
			If (Me._CreditProviderID.Equals(value) = false) Then
				Me.OnCreditProviderIDChanging(value)
				Me.SendPropertyChanging
				Me._CreditProviderID = value
				Me.SendPropertyChanged("CreditProviderID")
				Me.OnCreditProviderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AuditTypeID", DbType:="BigInt")>  _
	Public Property AuditTypeID() As System.Nullable(Of Long)
		Get
			Return Me._AuditTypeID
		End Get
		Set
			If (Me._AuditTypeID.Equals(value) = false) Then
				Me.OnAuditTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._AuditTypeID = value
				Me.SendPropertyChanged("AuditTypeID")
				Me.OnAuditTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CreditProviderMerchant")>  _
Partial Public Class CreditProviderMerchant
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _FinancialInstitutionID As System.Nullable(Of Long)
	
	Private _MerchantID As System.Nullable(Of Long)
	
	Private _Reference As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory1 As EntityRef(Of AuthDirectory)
	
	Private _FinancialInstitution As EntityRef(Of FinancialInstitution)
	
	Private _Merchant As EntityRef(Of Merchant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnFinancialInstitutionIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFinancialInstitutionIDChanged()
    End Sub
    Partial Private Sub OnMerchantIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMerchantIDChanged()
    End Sub
    Partial Private Sub OnReferenceChanging(value As String)
    End Sub
    Partial Private Sub OnReferenceChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory1 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._FinancialInstitution = CType(Nothing, EntityRef(Of FinancialInstitution))
		Me._Merchant = CType(Nothing, EntityRef(Of Merchant))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinancialInstitutionID", DbType:="BigInt")>  _
	Public Property FinancialInstitutionID() As System.Nullable(Of Long)
		Get
			Return Me._FinancialInstitutionID
		End Get
		Set
			If (Me._FinancialInstitutionID.Equals(value) = false) Then
				If Me._FinancialInstitution.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFinancialInstitutionIDChanging(value)
				Me.SendPropertyChanging
				Me._FinancialInstitutionID = value
				Me.SendPropertyChanged("FinancialInstitutionID")
				Me.OnFinancialInstitutionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantID", DbType:="BigInt")>  _
	Public Property MerchantID() As System.Nullable(Of Long)
		Get
			Return Me._MerchantID
		End Get
		Set
			If (Me._MerchantID.Equals(value) = false) Then
				If Me._Merchant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMerchantIDChanging(value)
				Me.SendPropertyChanging
				Me._MerchantID = value
				Me.SendPropertyChanged("MerchantID")
				Me.OnMerchantIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reference", DbType:="NVarChar(50)")>  _
	Public Property Reference() As String
		Get
			Return Me._Reference
		End Get
		Set
			If (String.Equals(Me._Reference, value) = false) Then
				Me.OnReferenceChanging(value)
				Me.SendPropertyChanging
				Me._Reference = value
				Me.SendPropertyChanged("Reference")
				Me.OnReferenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				If Me._AuthDirectory1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_CreditProviderMerchant", Storage:="_AuthDirectory", ThisKey:="CreatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.CreditProviderMerchants.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CreditProviderMerchants.Add(Me)
					Me._CreatedBy = value.ID
				Else
					Me._CreatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_CreditProviderMerchant1", Storage:="_AuthDirectory1", ThisKey:="UpdatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory1() As AuthDirectory
		Get
			Return Me._AuthDirectory1.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory1.Entity = Nothing
					previousValue.CreditProviderMerchants1.Remove(Me)
				End If
				Me._AuthDirectory1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CreditProviderMerchants1.Add(Me)
					Me._UpdatedBy = value.ID
				Else
					Me._UpdatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FinancialInstitution_CreditProviderMerchant", Storage:="_FinancialInstitution", ThisKey:="FinancialInstitutionID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property FinancialInstitution() As FinancialInstitution
		Get
			Return Me._FinancialInstitution.Entity
		End Get
		Set
			Dim previousValue As FinancialInstitution = Me._FinancialInstitution.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FinancialInstitution.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FinancialInstitution.Entity = Nothing
					previousValue.CreditProviderMerchants.Remove(Me)
				End If
				Me._FinancialInstitution.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CreditProviderMerchants.Add(Me)
					Me._FinancialInstitutionID = value.ID
				Else
					Me._FinancialInstitutionID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("FinancialInstitution")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_CreditProviderMerchant", Storage:="_Merchant", ThisKey:="MerchantID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Merchant() As Merchant
		Get
			Return Me._Merchant.Entity
		End Get
		Set
			Dim previousValue As Merchant = Me._Merchant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Merchant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Merchant.Entity = Nothing
					previousValue.CreditProviderMerchants.Remove(Me)
				End If
				Me._Merchant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CreditProviderMerchants.Add(Me)
					Me._MerchantID = value.ID
				Else
					Me._MerchantID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Merchant")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.[Database]")>  _
Partial Public Class Database
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DBName As String
	
	Private _IPAddress As String
	
	Private _DNS As String
	
	Private _AuthDirectoryID As System.Nullable(Of Long)
	
	Private _DatabaseTypeID As System.Nullable(Of Long)
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _ApplicationCreditProviders As EntitySet(Of ApplicationCreditProvider)
	
	Private _Environments As EntitySet(Of Environment)
	
	Private _Environments1 As EntitySet(Of Environment)
	
	Private _Repositories As EntitySet(Of Repository)
	
	Private _Repositories1 As EntitySet(Of Repository)
	
	Private _Repositories2 As EntitySet(Of Repository)
	
	Private _Repositories3 As EntitySet(Of Repository)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory1 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory2 As EntityRef(Of AuthDirectory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDBNameChanging(value As String)
    End Sub
    Partial Private Sub OnDBNameChanged()
    End Sub
    Partial Private Sub OnIPAddressChanging(value As String)
    End Sub
    Partial Private Sub OnIPAddressChanged()
    End Sub
    Partial Private Sub OnDNSChanging(value As String)
    End Sub
    Partial Private Sub OnDNSChanged()
    End Sub
    Partial Private Sub OnAuthDirectoryIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnAuthDirectoryIDChanged()
    End Sub
    Partial Private Sub OnDatabaseTypeIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnDatabaseTypeIDChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationCreditProviders = New EntitySet(Of ApplicationCreditProvider)(AddressOf Me.attach_ApplicationCreditProviders, AddressOf Me.detach_ApplicationCreditProviders)
		Me._Environments = New EntitySet(Of Environment)(AddressOf Me.attach_Environments, AddressOf Me.detach_Environments)
		Me._Environments1 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments1, AddressOf Me.detach_Environments1)
		Me._Repositories = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories, AddressOf Me.detach_Repositories)
		Me._Repositories1 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories1, AddressOf Me.detach_Repositories1)
		Me._Repositories2 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories2, AddressOf Me.detach_Repositories2)
		Me._Repositories3 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories3, AddressOf Me.detach_Repositories3)
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory1 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory2 = CType(Nothing, EntityRef(Of AuthDirectory))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DBName", DbType:="NVarChar(500)")>  _
	Public Property DBName() As String
		Get
			Return Me._DBName
		End Get
		Set
			If (String.Equals(Me._DBName, value) = false) Then
				Me.OnDBNameChanging(value)
				Me.SendPropertyChanging
				Me._DBName = value
				Me.SendPropertyChanged("DBName")
				Me.OnDBNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IPAddress", DbType:="NVarChar(500)")>  _
	Public Property IPAddress() As String
		Get
			Return Me._IPAddress
		End Get
		Set
			If (String.Equals(Me._IPAddress, value) = false) Then
				Me.OnIPAddressChanging(value)
				Me.SendPropertyChanging
				Me._IPAddress = value
				Me.SendPropertyChanged("IPAddress")
				Me.OnIPAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DNS", DbType:="NVarChar(500)")>  _
	Public Property DNS() As String
		Get
			Return Me._DNS
		End Get
		Set
			If (String.Equals(Me._DNS, value) = false) Then
				Me.OnDNSChanging(value)
				Me.SendPropertyChanging
				Me._DNS = value
				Me.SendPropertyChanged("DNS")
				Me.OnDNSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AuthDirectoryID", DbType:="BigInt")>  _
	Public Property AuthDirectoryID() As System.Nullable(Of Long)
		Get
			Return Me._AuthDirectoryID
		End Get
		Set
			If (Me._AuthDirectoryID.Equals(value) = false) Then
				If (Me._AuthDirectory.HasLoadedOrAssignedValue OrElse Me._AuthDirectory1.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAuthDirectoryIDChanging(value)
				Me.SendPropertyChanging
				Me._AuthDirectoryID = value
				Me.SendPropertyChanged("AuthDirectoryID")
				Me.OnAuthDirectoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DatabaseTypeID", DbType:="BigInt")>  _
	Public Property DatabaseTypeID() As System.Nullable(Of Long)
		Get
			Return Me._DatabaseTypeID
		End Get
		Set
			If (Me._DatabaseTypeID.Equals(value) = false) Then
				Me.OnDatabaseTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._DatabaseTypeID = value
				Me.SendPropertyChanged("DatabaseTypeID")
				Me.OnDatabaseTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				If Me._AuthDirectory2.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Database_ApplicationCreditProvider", Storage:="_ApplicationCreditProviders", ThisKey:="ID", OtherKey:="DatabaseID")>  _
	Public Property ApplicationCreditProviders() As EntitySet(Of ApplicationCreditProvider)
		Get
			Return Me._ApplicationCreditProviders
		End Get
		Set
			Me._ApplicationCreditProviders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Database_Environment", Storage:="_Environments", ThisKey:="ID", OtherKey:="MainDatabaseID")>  _
	Public Property Environments() As EntitySet(Of Environment)
		Get
			Return Me._Environments
		End Get
		Set
			Me._Environments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Database_Environment1", Storage:="_Environments1", ThisKey:="ID", OtherKey:="RulesEngineDBID")>  _
	Public Property Environments1() As EntitySet(Of Environment)
		Get
			Return Me._Environments1
		End Get
		Set
			Me._Environments1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Database_Repository", Storage:="_Repositories", ThisKey:="ID", OtherKey:="DatabaseID")>  _
	Public Property Repositories() As EntitySet(Of Repository)
		Get
			Return Me._Repositories
		End Get
		Set
			Me._Repositories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Database_Repository1", Storage:="_Repositories1", ThisKey:="ID", OtherKey:="MainDatabaseID")>  _
	Public Property Repositories1() As EntitySet(Of Repository)
		Get
			Return Me._Repositories1
		End Get
		Set
			Me._Repositories1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Database_Repository2", Storage:="_Repositories2", ThisKey:="ID", OtherKey:="RulesEngineDBID")>  _
	Public Property Repositories2() As EntitySet(Of Repository)
		Get
			Return Me._Repositories2
		End Get
		Set
			Me._Repositories2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Database_Repository3", Storage:="_Repositories3", ThisKey:="ID", OtherKey:="RepositoryDatabaseID")>  _
	Public Property Repositories3() As EntitySet(Of Repository)
		Get
			Return Me._Repositories3
		End Get
		Set
			Me._Repositories3.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Database", Storage:="_AuthDirectory", ThisKey:="AuthDirectoryID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.Databases.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Databases.Add(Me)
					Me._AuthDirectoryID = value.ID
				Else
					Me._AuthDirectoryID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Database1", Storage:="_AuthDirectory1", ThisKey:="AuthDirectoryID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory1() As AuthDirectory
		Get
			Return Me._AuthDirectory1.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory1.Entity = Nothing
					previousValue.Databases1.Remove(Me)
				End If
				Me._AuthDirectory1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Databases1.Add(Me)
					Me._AuthDirectoryID = value.ID
				Else
					Me._AuthDirectoryID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Database2", Storage:="_AuthDirectory2", ThisKey:="UpdatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory2() As AuthDirectory
		Get
			Return Me._AuthDirectory2.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory2.Entity = Nothing
					previousValue.Databases2.Remove(Me)
				End If
				Me._AuthDirectory2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Databases2.Add(Me)
					Me._UpdatedBy = value.ID
				Else
					Me._UpdatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory2")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApplicationCreditProviders(ByVal entity As ApplicationCreditProvider)
		Me.SendPropertyChanging
		entity.Database = Me
	End Sub
	
	Private Sub detach_ApplicationCreditProviders(ByVal entity As ApplicationCreditProvider)
		Me.SendPropertyChanging
		entity.Database = Nothing
	End Sub
	
	Private Sub attach_Environments(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.Database = Me
	End Sub
	
	Private Sub detach_Environments(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.Database = Nothing
	End Sub
	
	Private Sub attach_Environments1(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.Database1 = Me
	End Sub
	
	Private Sub detach_Environments1(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.Database1 = Nothing
	End Sub
	
	Private Sub attach_Repositories(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Database = Me
	End Sub
	
	Private Sub detach_Repositories(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Database = Nothing
	End Sub
	
	Private Sub attach_Repositories1(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Database1 = Me
	End Sub
	
	Private Sub detach_Repositories1(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Database1 = Nothing
	End Sub
	
	Private Sub attach_Repositories2(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Database2 = Me
	End Sub
	
	Private Sub detach_Repositories2(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Database2 = Nothing
	End Sub
	
	Private Sub attach_Repositories3(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Database3 = Me
	End Sub
	
	Private Sub detach_Repositories3(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Database3 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DatabaseType")>  _
Partial Public Class DatabaseType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory1 As EntityRef(Of AuthDirectory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory1 = CType(Nothing, EntityRef(Of AuthDirectory))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				If Me._AuthDirectory1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_DatabaseType", Storage:="_AuthDirectory", ThisKey:="CreatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.DatabaseTypes.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DatabaseTypes.Add(Me)
					Me._CreatedBy = value.ID
				Else
					Me._CreatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_DatabaseType1", Storage:="_AuthDirectory1", ThisKey:="UpdatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory1() As AuthDirectory
		Get
			Return Me._AuthDirectory1.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory1.Entity = Nothing
					previousValue.DatabaseTypes1.Remove(Me)
				End If
				Me._AuthDirectory1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DatabaseTypes1.Add(Me)
					Me._UpdatedBy = value.ID
				Else
					Me._UpdatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DebitOrder")>  _
Partial Public Class DebitOrder
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _StartDate As System.Nullable(Of Date)
	
	Private _EndDate As System.Nullable(Of Date)
	
	Private _DebitOrderTypeID As System.Nullable(Of Long)
	
	Private _MerchantID As System.Nullable(Of Long)
	
	Private _MerchantTerminalID As System.Nullable(Of Long)
	
	Private _StatusID As System.Nullable(Of Integer)
	
	Private _Bank As String
	
	Private _BranchName As String
	
	Private _BranchCode As String
	
	Private _AccountNumber As String
	
	Private _AccountHolder As String
	
	Private _Amount As System.Nullable(Of Decimal)
	
	Private _Requested As System.Nullable(Of Boolean)
	
	Private _Successful As System.Nullable(Of Boolean)
	
	Private _DebitOrderHistories As EntitySet(Of DebitOrderHistory)
	
	Private _DebitOrderType As EntityRef(Of DebitOrderType)
	
	Private _Merchant As EntityRef(Of Merchant)
	
	Private _MerchantTerminal As EntityRef(Of MerchantTerminal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnStartDateChanged()
    End Sub
    Partial Private Sub OnEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEndDateChanged()
    End Sub
    Partial Private Sub OnDebitOrderTypeIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnDebitOrderTypeIDChanged()
    End Sub
    Partial Private Sub OnMerchantIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMerchantIDChanged()
    End Sub
    Partial Private Sub OnMerchantTerminalIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMerchantTerminalIDChanged()
    End Sub
    Partial Private Sub OnStatusIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnStatusIDChanged()
    End Sub
    Partial Private Sub OnBankChanging(value As String)
    End Sub
    Partial Private Sub OnBankChanged()
    End Sub
    Partial Private Sub OnBranchNameChanging(value As String)
    End Sub
    Partial Private Sub OnBranchNameChanged()
    End Sub
    Partial Private Sub OnBranchCodeChanging(value As String)
    End Sub
    Partial Private Sub OnBranchCodeChanged()
    End Sub
    Partial Private Sub OnAccountNumberChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNumberChanged()
    End Sub
    Partial Private Sub OnAccountHolderChanging(value As String)
    End Sub
    Partial Private Sub OnAccountHolderChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnRequestedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnRequestedChanged()
    End Sub
    Partial Private Sub OnSuccessfulChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSuccessfulChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DebitOrderHistories = New EntitySet(Of DebitOrderHistory)(AddressOf Me.attach_DebitOrderHistories, AddressOf Me.detach_DebitOrderHistories)
		Me._DebitOrderType = CType(Nothing, EntityRef(Of DebitOrderType))
		Me._Merchant = CType(Nothing, EntityRef(Of Merchant))
		Me._MerchantTerminal = CType(Nothing, EntityRef(Of MerchantTerminal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="DateTime")>  _
	Public Property StartDate() As System.Nullable(Of Date)
		Get
			Return Me._StartDate
		End Get
		Set
			If (Me._StartDate.Equals(value) = false) Then
				Me.OnStartDateChanging(value)
				Me.SendPropertyChanging
				Me._StartDate = value
				Me.SendPropertyChanged("StartDate")
				Me.OnStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EndDate", DbType:="DateTime")>  _
	Public Property EndDate() As System.Nullable(Of Date)
		Get
			Return Me._EndDate
		End Get
		Set
			If (Me._EndDate.Equals(value) = false) Then
				Me.OnEndDateChanging(value)
				Me.SendPropertyChanging
				Me._EndDate = value
				Me.SendPropertyChanged("EndDate")
				Me.OnEndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DebitOrderTypeID", DbType:="BigInt")>  _
	Public Property DebitOrderTypeID() As System.Nullable(Of Long)
		Get
			Return Me._DebitOrderTypeID
		End Get
		Set
			If (Me._DebitOrderTypeID.Equals(value) = false) Then
				If Me._DebitOrderType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDebitOrderTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._DebitOrderTypeID = value
				Me.SendPropertyChanged("DebitOrderTypeID")
				Me.OnDebitOrderTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantID", DbType:="BigInt")>  _
	Public Property MerchantID() As System.Nullable(Of Long)
		Get
			Return Me._MerchantID
		End Get
		Set
			If (Me._MerchantID.Equals(value) = false) Then
				If Me._Merchant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMerchantIDChanging(value)
				Me.SendPropertyChanging
				Me._MerchantID = value
				Me.SendPropertyChanged("MerchantID")
				Me.OnMerchantIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantTerminalID", DbType:="BigInt")>  _
	Public Property MerchantTerminalID() As System.Nullable(Of Long)
		Get
			Return Me._MerchantTerminalID
		End Get
		Set
			If (Me._MerchantTerminalID.Equals(value) = false) Then
				If Me._MerchantTerminal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMerchantTerminalIDChanging(value)
				Me.SendPropertyChanging
				Me._MerchantTerminalID = value
				Me.SendPropertyChanged("MerchantTerminalID")
				Me.OnMerchantTerminalIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StatusID", DbType:="Int")>  _
	Public Property StatusID() As System.Nullable(Of Integer)
		Get
			Return Me._StatusID
		End Get
		Set
			If (Me._StatusID.Equals(value) = false) Then
				Me.OnStatusIDChanging(value)
				Me.SendPropertyChanging
				Me._StatusID = value
				Me.SendPropertyChanged("StatusID")
				Me.OnStatusIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bank", DbType:="NVarChar(500)")>  _
	Public Property Bank() As String
		Get
			Return Me._Bank
		End Get
		Set
			If (String.Equals(Me._Bank, value) = false) Then
				Me.OnBankChanging(value)
				Me.SendPropertyChanging
				Me._Bank = value
				Me.SendPropertyChanged("Bank")
				Me.OnBankChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BranchName", DbType:="NVarChar(500)")>  _
	Public Property BranchName() As String
		Get
			Return Me._BranchName
		End Get
		Set
			If (String.Equals(Me._BranchName, value) = false) Then
				Me.OnBranchNameChanging(value)
				Me.SendPropertyChanging
				Me._BranchName = value
				Me.SendPropertyChanged("BranchName")
				Me.OnBranchNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BranchCode", DbType:="NVarChar(50)")>  _
	Public Property BranchCode() As String
		Get
			Return Me._BranchCode
		End Get
		Set
			If (String.Equals(Me._BranchCode, value) = false) Then
				Me.OnBranchCodeChanging(value)
				Me.SendPropertyChanging
				Me._BranchCode = value
				Me.SendPropertyChanged("BranchCode")
				Me.OnBranchCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountNumber", DbType:="NVarChar(50)")>  _
	Public Property AccountNumber() As String
		Get
			Return Me._AccountNumber
		End Get
		Set
			If (String.Equals(Me._AccountNumber, value) = false) Then
				Me.OnAccountNumberChanging(value)
				Me.SendPropertyChanging
				Me._AccountNumber = value
				Me.SendPropertyChanged("AccountNumber")
				Me.OnAccountNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountHolder", DbType:="NVarChar(500)")>  _
	Public Property AccountHolder() As String
		Get
			Return Me._AccountHolder
		End Get
		Set
			If (String.Equals(Me._AccountHolder, value) = false) Then
				Me.OnAccountHolderChanging(value)
				Me.SendPropertyChanging
				Me._AccountHolder = value
				Me.SendPropertyChanged("AccountHolder")
				Me.OnAccountHolderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Money")>  _
	Public Property Amount() As System.Nullable(Of Decimal)
		Get
			Return Me._Amount
		End Get
		Set
			If (Me._Amount.Equals(value) = false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Requested", DbType:="Bit")>  _
	Public Property Requested() As System.Nullable(Of Boolean)
		Get
			Return Me._Requested
		End Get
		Set
			If (Me._Requested.Equals(value) = false) Then
				Me.OnRequestedChanging(value)
				Me.SendPropertyChanging
				Me._Requested = value
				Me.SendPropertyChanged("Requested")
				Me.OnRequestedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Successful", DbType:="Bit")>  _
	Public Property Successful() As System.Nullable(Of Boolean)
		Get
			Return Me._Successful
		End Get
		Set
			If (Me._Successful.Equals(value) = false) Then
				Me.OnSuccessfulChanging(value)
				Me.SendPropertyChanging
				Me._Successful = value
				Me.SendPropertyChanged("Successful")
				Me.OnSuccessfulChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DebitOrder_DebitOrderHistory", Storage:="_DebitOrderHistories", ThisKey:="ID", OtherKey:="DebitOrderID")>  _
	Public Property DebitOrderHistories() As EntitySet(Of DebitOrderHistory)
		Get
			Return Me._DebitOrderHistories
		End Get
		Set
			Me._DebitOrderHistories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DebitOrderType_DebitOrder", Storage:="_DebitOrderType", ThisKey:="DebitOrderTypeID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property DebitOrderType() As DebitOrderType
		Get
			Return Me._DebitOrderType.Entity
		End Get
		Set
			Dim previousValue As DebitOrderType = Me._DebitOrderType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DebitOrderType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DebitOrderType.Entity = Nothing
					previousValue.DebitOrders.Remove(Me)
				End If
				Me._DebitOrderType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DebitOrders.Add(Me)
					Me._DebitOrderTypeID = value.ID
				Else
					Me._DebitOrderTypeID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("DebitOrderType")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_DebitOrder", Storage:="_Merchant", ThisKey:="MerchantID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Merchant() As Merchant
		Get
			Return Me._Merchant.Entity
		End Get
		Set
			Dim previousValue As Merchant = Me._Merchant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Merchant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Merchant.Entity = Nothing
					previousValue.DebitOrders.Remove(Me)
				End If
				Me._Merchant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DebitOrders.Add(Me)
					Me._MerchantID = value.ID
				Else
					Me._MerchantID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Merchant")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MerchantTerminal_DebitOrder", Storage:="_MerchantTerminal", ThisKey:="MerchantTerminalID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property MerchantTerminal() As MerchantTerminal
		Get
			Return Me._MerchantTerminal.Entity
		End Get
		Set
			Dim previousValue As MerchantTerminal = Me._MerchantTerminal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MerchantTerminal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MerchantTerminal.Entity = Nothing
					previousValue.DebitOrders.Remove(Me)
				End If
				Me._MerchantTerminal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DebitOrders.Add(Me)
					Me._MerchantTerminalID = value.ID
				Else
					Me._MerchantTerminalID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("MerchantTerminal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DebitOrderHistories(ByVal entity As DebitOrderHistory)
		Me.SendPropertyChanging
		entity.DebitOrder = Me
	End Sub
	
	Private Sub detach_DebitOrderHistories(ByVal entity As DebitOrderHistory)
		Me.SendPropertyChanging
		entity.DebitOrder = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DebitOrderFile")>  _
Partial Public Class DebitOrderFile
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _DebitDate As System.Nullable(Of Date)
	
	Private _DebitOrderFileItems As EntitySet(Of DebitOrderFileItem)
	
	Private _Invoices As EntitySet(Of Invoice)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnDebitDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDebitDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DebitOrderFileItems = New EntitySet(Of DebitOrderFileItem)(AddressOf Me.attach_DebitOrderFileItems, AddressOf Me.detach_DebitOrderFileItems)
		Me._Invoices = New EntitySet(Of Invoice)(AddressOf Me.attach_Invoices, AddressOf Me.detach_Invoices)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DebitDate", DbType:="DateTime")>  _
	Public Property DebitDate() As System.Nullable(Of Date)
		Get
			Return Me._DebitDate
		End Get
		Set
			If (Me._DebitDate.Equals(value) = false) Then
				Me.OnDebitDateChanging(value)
				Me.SendPropertyChanging
				Me._DebitDate = value
				Me.SendPropertyChanged("DebitDate")
				Me.OnDebitDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DebitOrderFile_DebitOrderFileItem", Storage:="_DebitOrderFileItems", ThisKey:="ID", OtherKey:="DebitOrderFileID")>  _
	Public Property DebitOrderFileItems() As EntitySet(Of DebitOrderFileItem)
		Get
			Return Me._DebitOrderFileItems
		End Get
		Set
			Me._DebitOrderFileItems.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DebitOrderFile_Invoice", Storage:="_Invoices", ThisKey:="ID", OtherKey:="DebitOrderFileID")>  _
	Public Property Invoices() As EntitySet(Of Invoice)
		Get
			Return Me._Invoices
		End Get
		Set
			Me._Invoices.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DebitOrderFileItems(ByVal entity As DebitOrderFileItem)
		Me.SendPropertyChanging
		entity.DebitOrderFile = Me
	End Sub
	
	Private Sub detach_DebitOrderFileItems(ByVal entity As DebitOrderFileItem)
		Me.SendPropertyChanging
		entity.DebitOrderFile = Nothing
	End Sub
	
	Private Sub attach_Invoices(ByVal entity As Invoice)
		Me.SendPropertyChanging
		entity.DebitOrderFile = Me
	End Sub
	
	Private Sub detach_Invoices(ByVal entity As Invoice)
		Me.SendPropertyChanging
		entity.DebitOrderFile = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DebitOrderFileItems")>  _
Partial Public Class DebitOrderFileItem
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _DebitOrderFileID As System.Nullable(Of Long)
	
	Private _DebitOrderHistoryID As System.Nullable(Of Long)
	
	Private _DebitOrderFile As EntityRef(Of DebitOrderFile)
	
	Private _DebitOrderHistory As EntityRef(Of DebitOrderHistory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnDebitOrderFileIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnDebitOrderFileIDChanged()
    End Sub
    Partial Private Sub OnDebitOrderHistoryIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnDebitOrderHistoryIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DebitOrderFile = CType(Nothing, EntityRef(Of DebitOrderFile))
		Me._DebitOrderHistory = CType(Nothing, EntityRef(Of DebitOrderHistory))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DebitOrderFileID", DbType:="BigInt")>  _
	Public Property DebitOrderFileID() As System.Nullable(Of Long)
		Get
			Return Me._DebitOrderFileID
		End Get
		Set
			If (Me._DebitOrderFileID.Equals(value) = false) Then
				If Me._DebitOrderFile.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDebitOrderFileIDChanging(value)
				Me.SendPropertyChanging
				Me._DebitOrderFileID = value
				Me.SendPropertyChanged("DebitOrderFileID")
				Me.OnDebitOrderFileIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DebitOrderHistoryID", DbType:="BigInt")>  _
	Public Property DebitOrderHistoryID() As System.Nullable(Of Long)
		Get
			Return Me._DebitOrderHistoryID
		End Get
		Set
			If (Me._DebitOrderHistoryID.Equals(value) = false) Then
				If Me._DebitOrderHistory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDebitOrderHistoryIDChanging(value)
				Me.SendPropertyChanging
				Me._DebitOrderHistoryID = value
				Me.SendPropertyChanged("DebitOrderHistoryID")
				Me.OnDebitOrderHistoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DebitOrderFile_DebitOrderFileItem", Storage:="_DebitOrderFile", ThisKey:="DebitOrderFileID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property DebitOrderFile() As DebitOrderFile
		Get
			Return Me._DebitOrderFile.Entity
		End Get
		Set
			Dim previousValue As DebitOrderFile = Me._DebitOrderFile.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DebitOrderFile.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DebitOrderFile.Entity = Nothing
					previousValue.DebitOrderFileItems.Remove(Me)
				End If
				Me._DebitOrderFile.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DebitOrderFileItems.Add(Me)
					Me._DebitOrderFileID = value.ID
				Else
					Me._DebitOrderFileID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("DebitOrderFile")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DebitOrderHistory_DebitOrderFileItem", Storage:="_DebitOrderHistory", ThisKey:="DebitOrderHistoryID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property DebitOrderHistory() As DebitOrderHistory
		Get
			Return Me._DebitOrderHistory.Entity
		End Get
		Set
			Dim previousValue As DebitOrderHistory = Me._DebitOrderHistory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DebitOrderHistory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DebitOrderHistory.Entity = Nothing
					previousValue.DebitOrderFileItems.Remove(Me)
				End If
				Me._DebitOrderHistory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DebitOrderFileItems.Add(Me)
					Me._DebitOrderHistoryID = value.ID
				Else
					Me._DebitOrderHistoryID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("DebitOrderHistory")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DebitOrderHistory")>  _
Partial Public Class DebitOrderHistory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _AwaitingRelease As System.Nullable(Of Boolean)
	
	Private _Released As System.Nullable(Of Boolean)
	
	Private _Paid As System.Nullable(Of Boolean)
	
	Private _Switchpay As System.Nullable(Of Boolean)
	
	Private _ApplicationID As System.Nullable(Of Long)
	
	Private _DatabaseID As System.Nullable(Of Long)
	
	Private _DebitOrderID As System.Nullable(Of Long)
	
	Private _DebitOrderTypeID As System.Nullable(Of Long)
	
	Private _MerchantID As System.Nullable(Of Long)
	
	Private _MerchantTerminalID As System.Nullable(Of Long)
	
	Private _Title As String
	
	Private _DebitDate As System.Nullable(Of Date)
	
	Private _DatePrepared As System.Nullable(Of Date)
	
	Private _DateReleased As System.Nullable(Of Date)
	
	Private _DatePaid As System.Nullable(Of Date)
	
	Private _Amount As System.Nullable(Of Decimal)
	
	Private _Bank As String
	
	Private _BranchName As String
	
	Private _BranchCode As String
	
	Private _AccountNumber As String
	
	Private _AccountHolder As String
	
	Private _Reference As String
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _DebitOrderFileItems As EntitySet(Of DebitOrderFileItem)
	
	Private _Invoices As EntitySet(Of Invoice)
	
	Private _ApplicationRepository As EntityRef(Of ApplicationRepository)
	
	Private _DebitOrder As EntityRef(Of DebitOrder)
	
	Private _DebitOrderType As EntityRef(Of DebitOrderType)
	
	Private _Merchant As EntityRef(Of Merchant)
	
	Private _MerchantTerminal As EntityRef(Of MerchantTerminal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnAwaitingReleaseChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnAwaitingReleaseChanged()
    End Sub
    Partial Private Sub OnReleasedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnReleasedChanged()
    End Sub
    Partial Private Sub OnPaidChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPaidChanged()
    End Sub
    Partial Private Sub OnSwitchpayChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnSwitchpayChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnDatabaseIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnDatabaseIDChanged()
    End Sub
    Partial Private Sub OnDebitOrderIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnDebitOrderIDChanged()
    End Sub
    Partial Private Sub OnDebitOrderTypeIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnDebitOrderTypeIDChanged()
    End Sub
    Partial Private Sub OnMerchantIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMerchantIDChanged()
    End Sub
    Partial Private Sub OnMerchantTerminalIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMerchantTerminalIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDebitDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDebitDateChanged()
    End Sub
    Partial Private Sub OnDatePreparedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatePreparedChanged()
    End Sub
    Partial Private Sub OnDateReleasedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateReleasedChanged()
    End Sub
    Partial Private Sub OnDatePaidChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDatePaidChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnBankChanging(value As String)
    End Sub
    Partial Private Sub OnBankChanged()
    End Sub
    Partial Private Sub OnBranchNameChanging(value As String)
    End Sub
    Partial Private Sub OnBranchNameChanged()
    End Sub
    Partial Private Sub OnBranchCodeChanging(value As String)
    End Sub
    Partial Private Sub OnBranchCodeChanged()
    End Sub
    Partial Private Sub OnAccountNumberChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNumberChanged()
    End Sub
    Partial Private Sub OnAccountHolderChanging(value As String)
    End Sub
    Partial Private Sub OnAccountHolderChanged()
    End Sub
    Partial Private Sub OnReferenceChanging(value As String)
    End Sub
    Partial Private Sub OnReferenceChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DebitOrderFileItems = New EntitySet(Of DebitOrderFileItem)(AddressOf Me.attach_DebitOrderFileItems, AddressOf Me.detach_DebitOrderFileItems)
		Me._Invoices = New EntitySet(Of Invoice)(AddressOf Me.attach_Invoices, AddressOf Me.detach_Invoices)
		Me._ApplicationRepository = CType(Nothing, EntityRef(Of ApplicationRepository))
		Me._DebitOrder = CType(Nothing, EntityRef(Of DebitOrder))
		Me._DebitOrderType = CType(Nothing, EntityRef(Of DebitOrderType))
		Me._Merchant = CType(Nothing, EntityRef(Of Merchant))
		Me._MerchantTerminal = CType(Nothing, EntityRef(Of MerchantTerminal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AwaitingRelease", DbType:="Bit")>  _
	Public Property AwaitingRelease() As System.Nullable(Of Boolean)
		Get
			Return Me._AwaitingRelease
		End Get
		Set
			If (Me._AwaitingRelease.Equals(value) = false) Then
				Me.OnAwaitingReleaseChanging(value)
				Me.SendPropertyChanging
				Me._AwaitingRelease = value
				Me.SendPropertyChanged("AwaitingRelease")
				Me.OnAwaitingReleaseChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Released", DbType:="Bit")>  _
	Public Property Released() As System.Nullable(Of Boolean)
		Get
			Return Me._Released
		End Get
		Set
			If (Me._Released.Equals(value) = false) Then
				Me.OnReleasedChanging(value)
				Me.SendPropertyChanging
				Me._Released = value
				Me.SendPropertyChanged("Released")
				Me.OnReleasedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Paid", DbType:="Bit")>  _
	Public Property Paid() As System.Nullable(Of Boolean)
		Get
			Return Me._Paid
		End Get
		Set
			If (Me._Paid.Equals(value) = false) Then
				Me.OnPaidChanging(value)
				Me.SendPropertyChanging
				Me._Paid = value
				Me.SendPropertyChanged("Paid")
				Me.OnPaidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Switchpay", DbType:="Bit")>  _
	Public Property Switchpay() As System.Nullable(Of Boolean)
		Get
			Return Me._Switchpay
		End Get
		Set
			If (Me._Switchpay.Equals(value) = false) Then
				Me.OnSwitchpayChanging(value)
				Me.SendPropertyChanging
				Me._Switchpay = value
				Me.SendPropertyChanged("Switchpay")
				Me.OnSwitchpayChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="BigInt")>  _
	Public Property ApplicationID() As System.Nullable(Of Long)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				If Me._ApplicationRepository.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DatabaseID", DbType:="BigInt")>  _
	Public Property DatabaseID() As System.Nullable(Of Long)
		Get
			Return Me._DatabaseID
		End Get
		Set
			If (Me._DatabaseID.Equals(value) = false) Then
				If Me._ApplicationRepository.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDatabaseIDChanging(value)
				Me.SendPropertyChanging
				Me._DatabaseID = value
				Me.SendPropertyChanged("DatabaseID")
				Me.OnDatabaseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DebitOrderID", DbType:="BigInt")>  _
	Public Property DebitOrderID() As System.Nullable(Of Long)
		Get
			Return Me._DebitOrderID
		End Get
		Set
			If (Me._DebitOrderID.Equals(value) = false) Then
				If Me._DebitOrder.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDebitOrderIDChanging(value)
				Me.SendPropertyChanging
				Me._DebitOrderID = value
				Me.SendPropertyChanged("DebitOrderID")
				Me.OnDebitOrderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DebitOrderTypeID", DbType:="BigInt")>  _
	Public Property DebitOrderTypeID() As System.Nullable(Of Long)
		Get
			Return Me._DebitOrderTypeID
		End Get
		Set
			If (Me._DebitOrderTypeID.Equals(value) = false) Then
				If Me._DebitOrderType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDebitOrderTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._DebitOrderTypeID = value
				Me.SendPropertyChanged("DebitOrderTypeID")
				Me.OnDebitOrderTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantID", DbType:="BigInt")>  _
	Public Property MerchantID() As System.Nullable(Of Long)
		Get
			Return Me._MerchantID
		End Get
		Set
			If (Me._MerchantID.Equals(value) = false) Then
				If Me._Merchant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMerchantIDChanging(value)
				Me.SendPropertyChanging
				Me._MerchantID = value
				Me.SendPropertyChanged("MerchantID")
				Me.OnMerchantIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantTerminalID", DbType:="BigInt")>  _
	Public Property MerchantTerminalID() As System.Nullable(Of Long)
		Get
			Return Me._MerchantTerminalID
		End Get
		Set
			If (Me._MerchantTerminalID.Equals(value) = false) Then
				If Me._MerchantTerminal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMerchantTerminalIDChanging(value)
				Me.SendPropertyChanging
				Me._MerchantTerminalID = value
				Me.SendPropertyChanged("MerchantTerminalID")
				Me.OnMerchantTerminalIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DebitDate", DbType:="DateTime")>  _
	Public Property DebitDate() As System.Nullable(Of Date)
		Get
			Return Me._DebitDate
		End Get
		Set
			If (Me._DebitDate.Equals(value) = false) Then
				Me.OnDebitDateChanging(value)
				Me.SendPropertyChanging
				Me._DebitDate = value
				Me.SendPropertyChanged("DebitDate")
				Me.OnDebitDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DatePrepared", DbType:="DateTime")>  _
	Public Property DatePrepared() As System.Nullable(Of Date)
		Get
			Return Me._DatePrepared
		End Get
		Set
			If (Me._DatePrepared.Equals(value) = false) Then
				Me.OnDatePreparedChanging(value)
				Me.SendPropertyChanging
				Me._DatePrepared = value
				Me.SendPropertyChanged("DatePrepared")
				Me.OnDatePreparedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateReleased", DbType:="DateTime")>  _
	Public Property DateReleased() As System.Nullable(Of Date)
		Get
			Return Me._DateReleased
		End Get
		Set
			If (Me._DateReleased.Equals(value) = false) Then
				Me.OnDateReleasedChanging(value)
				Me.SendPropertyChanging
				Me._DateReleased = value
				Me.SendPropertyChanged("DateReleased")
				Me.OnDateReleasedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DatePaid", DbType:="DateTime")>  _
	Public Property DatePaid() As System.Nullable(Of Date)
		Get
			Return Me._DatePaid
		End Get
		Set
			If (Me._DatePaid.Equals(value) = false) Then
				Me.OnDatePaidChanging(value)
				Me.SendPropertyChanging
				Me._DatePaid = value
				Me.SendPropertyChanged("DatePaid")
				Me.OnDatePaidChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Money")>  _
	Public Property Amount() As System.Nullable(Of Decimal)
		Get
			Return Me._Amount
		End Get
		Set
			If (Me._Amount.Equals(value) = false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bank", DbType:="NVarChar(500)")>  _
	Public Property Bank() As String
		Get
			Return Me._Bank
		End Get
		Set
			If (String.Equals(Me._Bank, value) = false) Then
				Me.OnBankChanging(value)
				Me.SendPropertyChanging
				Me._Bank = value
				Me.SendPropertyChanged("Bank")
				Me.OnBankChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BranchName", DbType:="NVarChar(500)")>  _
	Public Property BranchName() As String
		Get
			Return Me._BranchName
		End Get
		Set
			If (String.Equals(Me._BranchName, value) = false) Then
				Me.OnBranchNameChanging(value)
				Me.SendPropertyChanging
				Me._BranchName = value
				Me.SendPropertyChanged("BranchName")
				Me.OnBranchNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BranchCode", DbType:="NVarChar(50)")>  _
	Public Property BranchCode() As String
		Get
			Return Me._BranchCode
		End Get
		Set
			If (String.Equals(Me._BranchCode, value) = false) Then
				Me.OnBranchCodeChanging(value)
				Me.SendPropertyChanging
				Me._BranchCode = value
				Me.SendPropertyChanged("BranchCode")
				Me.OnBranchCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountNumber", DbType:="NVarChar(50)")>  _
	Public Property AccountNumber() As String
		Get
			Return Me._AccountNumber
		End Get
		Set
			If (String.Equals(Me._AccountNumber, value) = false) Then
				Me.OnAccountNumberChanging(value)
				Me.SendPropertyChanging
				Me._AccountNumber = value
				Me.SendPropertyChanged("AccountNumber")
				Me.OnAccountNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountHolder", DbType:="NVarChar(500)")>  _
	Public Property AccountHolder() As String
		Get
			Return Me._AccountHolder
		End Get
		Set
			If (String.Equals(Me._AccountHolder, value) = false) Then
				Me.OnAccountHolderChanging(value)
				Me.SendPropertyChanging
				Me._AccountHolder = value
				Me.SendPropertyChanged("AccountHolder")
				Me.OnAccountHolderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reference", DbType:="NVarChar(50)")>  _
	Public Property Reference() As String
		Get
			Return Me._Reference
		End Get
		Set
			If (String.Equals(Me._Reference, value) = false) Then
				Me.OnReferenceChanging(value)
				Me.SendPropertyChanging
				Me._Reference = value
				Me.SendPropertyChanged("Reference")
				Me.OnReferenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DebitOrderHistory_DebitOrderFileItem", Storage:="_DebitOrderFileItems", ThisKey:="ID", OtherKey:="DebitOrderHistoryID")>  _
	Public Property DebitOrderFileItems() As EntitySet(Of DebitOrderFileItem)
		Get
			Return Me._DebitOrderFileItems
		End Get
		Set
			Me._DebitOrderFileItems.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DebitOrderHistory_Invoice", Storage:="_Invoices", ThisKey:="ID", OtherKey:="DebitOrderHistoryID")>  _
	Public Property Invoices() As EntitySet(Of Invoice)
		Get
			Return Me._Invoices
		End Get
		Set
			Me._Invoices.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ApplicationRepository_DebitOrderHistory", Storage:="_ApplicationRepository", ThisKey:="ApplicationID,DatabaseID", OtherKey:="ID,DatabaseID", IsForeignKey:=true)>  _
	Public Property ApplicationRepository() As ApplicationRepository
		Get
			Return Me._ApplicationRepository.Entity
		End Get
		Set
			Dim previousValue As ApplicationRepository = Me._ApplicationRepository.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ApplicationRepository.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ApplicationRepository.Entity = Nothing
					previousValue.DebitOrderHistories.Remove(Me)
				End If
				Me._ApplicationRepository.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DebitOrderHistories.Add(Me)
					Me._ApplicationID = value.ID
					Me._DatabaseID = value.DatabaseID
				Else
					Me._ApplicationID = CType(Nothing, Nullable(Of Long))
					Me._DatabaseID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("ApplicationRepository")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DebitOrder_DebitOrderHistory", Storage:="_DebitOrder", ThisKey:="DebitOrderID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property DebitOrder() As DebitOrder
		Get
			Return Me._DebitOrder.Entity
		End Get
		Set
			Dim previousValue As DebitOrder = Me._DebitOrder.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DebitOrder.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DebitOrder.Entity = Nothing
					previousValue.DebitOrderHistories.Remove(Me)
				End If
				Me._DebitOrder.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DebitOrderHistories.Add(Me)
					Me._DebitOrderID = value.ID
				Else
					Me._DebitOrderID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("DebitOrder")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DebitOrderType_DebitOrderHistory", Storage:="_DebitOrderType", ThisKey:="DebitOrderTypeID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property DebitOrderType() As DebitOrderType
		Get
			Return Me._DebitOrderType.Entity
		End Get
		Set
			Dim previousValue As DebitOrderType = Me._DebitOrderType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DebitOrderType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DebitOrderType.Entity = Nothing
					previousValue.DebitOrderHistories.Remove(Me)
				End If
				Me._DebitOrderType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DebitOrderHistories.Add(Me)
					Me._DebitOrderTypeID = value.ID
				Else
					Me._DebitOrderTypeID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("DebitOrderType")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_DebitOrderHistory", Storage:="_Merchant", ThisKey:="MerchantID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Merchant() As Merchant
		Get
			Return Me._Merchant.Entity
		End Get
		Set
			Dim previousValue As Merchant = Me._Merchant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Merchant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Merchant.Entity = Nothing
					previousValue.DebitOrderHistories.Remove(Me)
				End If
				Me._Merchant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DebitOrderHistories.Add(Me)
					Me._MerchantID = value.ID
				Else
					Me._MerchantID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Merchant")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MerchantTerminal_DebitOrderHistory", Storage:="_MerchantTerminal", ThisKey:="MerchantTerminalID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property MerchantTerminal() As MerchantTerminal
		Get
			Return Me._MerchantTerminal.Entity
		End Get
		Set
			Dim previousValue As MerchantTerminal = Me._MerchantTerminal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MerchantTerminal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MerchantTerminal.Entity = Nothing
					previousValue.DebitOrderHistories.Remove(Me)
				End If
				Me._MerchantTerminal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DebitOrderHistories.Add(Me)
					Me._MerchantTerminalID = value.ID
				Else
					Me._MerchantTerminalID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("MerchantTerminal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DebitOrderFileItems(ByVal entity As DebitOrderFileItem)
		Me.SendPropertyChanging
		entity.DebitOrderHistory = Me
	End Sub
	
	Private Sub detach_DebitOrderFileItems(ByVal entity As DebitOrderFileItem)
		Me.SendPropertyChanging
		entity.DebitOrderHistory = Nothing
	End Sub
	
	Private Sub attach_Invoices(ByVal entity As Invoice)
		Me.SendPropertyChanging
		entity.DebitOrderHistory = Me
	End Sub
	
	Private Sub detach_Invoices(ByVal entity As Invoice)
		Me.SendPropertyChanging
		entity.DebitOrderHistory = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DebitOrderType")>  _
Partial Public Class DebitOrderType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _Code As String
	
	Private _DebitOrders As EntitySet(Of DebitOrder)
	
	Private _DebitOrderHistories As EntitySet(Of DebitOrderHistory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DebitOrders = New EntitySet(Of DebitOrder)(AddressOf Me.attach_DebitOrders, AddressOf Me.detach_DebitOrders)
		Me._DebitOrderHistories = New EntitySet(Of DebitOrderHistory)(AddressOf Me.attach_DebitOrderHistories, AddressOf Me.detach_DebitOrderHistories)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code", DbType:="NVarChar(50)")>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DebitOrderType_DebitOrder", Storage:="_DebitOrders", ThisKey:="ID", OtherKey:="DebitOrderTypeID")>  _
	Public Property DebitOrders() As EntitySet(Of DebitOrder)
		Get
			Return Me._DebitOrders
		End Get
		Set
			Me._DebitOrders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DebitOrderType_DebitOrderHistory", Storage:="_DebitOrderHistories", ThisKey:="ID", OtherKey:="DebitOrderTypeID")>  _
	Public Property DebitOrderHistories() As EntitySet(Of DebitOrderHistory)
		Get
			Return Me._DebitOrderHistories
		End Get
		Set
			Me._DebitOrderHistories.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DebitOrders(ByVal entity As DebitOrder)
		Me.SendPropertyChanging
		entity.DebitOrderType = Me
	End Sub
	
	Private Sub detach_DebitOrders(ByVal entity As DebitOrder)
		Me.SendPropertyChanging
		entity.DebitOrderType = Nothing
	End Sub
	
	Private Sub attach_DebitOrderHistories(ByVal entity As DebitOrderHistory)
		Me.SendPropertyChanging
		entity.DebitOrderType = Me
	End Sub
	
	Private Sub detach_DebitOrderHistories(ByVal entity As DebitOrderHistory)
		Me.SendPropertyChanging
		entity.DebitOrderType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DeclineReason")>  _
Partial Public Class DeclineReason
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _GUID As System.Nullable(Of System.Guid)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnGUIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnGUIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GUID", DbType:="UniqueIdentifier")>  _
	Public Property GUID() As System.Nullable(Of System.Guid)
		Get
			Return Me._GUID
		End Get
		Set
			If (Me._GUID.Equals(value) = false) Then
				Me.OnGUIDChanging(value)
				Me.SendPropertyChanging
				Me._GUID = value
				Me.SendPropertyChanged("GUID")
				Me.OnGUIDChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Designation")>  _
Partial Public Class Designation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _MerchantDetails As EntitySet(Of MerchantDetail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MerchantDetails = New EntitySet(Of MerchantDetail)(AddressOf Me.attach_MerchantDetails, AddressOf Me.detach_MerchantDetails)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Designation_MerchantDetail", Storage:="_MerchantDetails", ThisKey:="ID", OtherKey:="DesignationID")>  _
	Public Property MerchantDetails() As EntitySet(Of MerchantDetail)
		Get
			Return Me._MerchantDetails
		End Get
		Set
			Me._MerchantDetails.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_MerchantDetails(ByVal entity As MerchantDetail)
		Me.SendPropertyChanging
		entity.Designation = Me
	End Sub
	
	Private Sub detach_MerchantDetails(ByVal entity As MerchantDetail)
		Me.SendPropertyChanging
		entity.Designation = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Environment")>  _
Partial Public Class Environment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _URLPrefix As String
	
	Private _WebLinkURLID As System.Nullable(Of Long)
	
	Private _APIURLID As System.Nullable(Of Long)
	
	Private _PortalURLID As System.Nullable(Of Long)
	
	Private _USSDURLID As System.Nullable(Of Long)
	
	Private _ImagesURLID As System.Nullable(Of Long)
	
	Private _SecondaryProcessURLID As System.Nullable(Of Long)
	
	Private _InternalWebAPIURLID As System.Nullable(Of Long)
	
	Private _ExternalWebAPIURLID As System.Nullable(Of Long)
	
	Private _ACPASURLID As System.Nullable(Of Long)
	
	Private _CompuScanURLID As System.Nullable(Of Long)
	
	Private _VodacomHTTPURLID As System.Nullable(Of Long)
	
	Private _VodacomSOAPURLID As System.Nullable(Of Long)
	
	Private _VodacomRESTURLID As System.Nullable(Of Long)
	
	Private _ConnectMobileNIUSSDURLID As System.Nullable(Of Long)
	
	Private _ConnectMobileSMSURLID As System.Nullable(Of Long)
	
	Private _MainDatabaseID As System.Nullable(Of Long)
	
	Private _RulesEngineDBID As System.Nullable(Of Long)
	
	Private _MainRepositoryID As System.Nullable(Of Long)
	
	Private _MainEnvironmentID As System.Nullable(Of Long)
	
	Private _EnvironmentTypeID As System.Nullable(Of Long)
	
	Private _DefaultIDNo As String
	
	Private _DefaultMobile As String
	
	Private _DefaultAmount As System.Nullable(Of Decimal)
	
	Private _DefaultBank As System.Nullable(Of Integer)
	
	Private _DefaultOTP As String
	
	Private _ServiceUserID As System.Nullable(Of Long)
	
	Private _SwitchPayUserID As System.Nullable(Of Long)
	
	Private _AdminUserID As System.Nullable(Of Long)
	
	Private _IntegrationUserID As System.Nullable(Of Long)
	
	Private _FirstEscalationUserID As System.Nullable(Of Long)
	
	Private _SecondEscalationUserID As System.Nullable(Of Long)
	
	Private _ACPASUserID As System.Nullable(Of Long)
	
	Private _CompuscanUserID As System.Nullable(Of Long)
	
	Private _VodacomUserID As System.Nullable(Of Long)
	
	Private _ConnectMobileSMSUserID As System.Nullable(Of Long)
	
	Private _ConnectMobileNIUSSDUserID As System.Nullable(Of Long)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _Environments As EntitySet(Of Environment)
	
	Private _EnvironmentRepositories As EntitySet(Of EnvironmentRepository)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory1 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory2 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory3 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory4 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory5 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory6 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory7 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory8 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory9 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory10 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory11 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory12 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory13 As EntityRef(Of AuthDirectory)
	
	Private _Database As EntityRef(Of Database)
	
	Private _Database1 As EntityRef(Of Database)
	
	Private _Environment As EntityRef(Of Environment)
	
	Private _EnvironmentType As EntityRef(Of EnvironmentType)
	
	Private _URL As EntityRef(Of URL)
	
	Private _URL1 As EntityRef(Of URL)
	
	Private _URL2 As EntityRef(Of URL)
	
	Private _URL3 As EntityRef(Of URL)
	
	Private _URL4 As EntityRef(Of URL)
	
	Private _URL5 As EntityRef(Of URL)
	
	Private _URL6 As EntityRef(Of URL)
	
	Private _URL7 As EntityRef(Of URL)
	
	Private _URL8 As EntityRef(Of URL)
	
	Private _URL9 As EntityRef(Of URL)
	
	Private _URL10 As EntityRef(Of URL)
	
	Private _URL11 As EntityRef(Of URL)
	
	Private _URL12 As EntityRef(Of URL)
	
	Private _URL13 As EntityRef(Of URL)
	
	Private _URL14 As EntityRef(Of URL)
	
	Private _Repository As EntityRef(Of Repository)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnURLPrefixChanging(value As String)
    End Sub
    Partial Private Sub OnURLPrefixChanged()
    End Sub
    Partial Private Sub OnWebLinkURLIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnWebLinkURLIDChanged()
    End Sub
    Partial Private Sub OnAPIURLIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnAPIURLIDChanged()
    End Sub
    Partial Private Sub OnPortalURLIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnPortalURLIDChanged()
    End Sub
    Partial Private Sub OnUSSDURLIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUSSDURLIDChanged()
    End Sub
    Partial Private Sub OnImagesURLIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnImagesURLIDChanged()
    End Sub
    Partial Private Sub OnSecondaryProcessURLIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnSecondaryProcessURLIDChanged()
    End Sub
    Partial Private Sub OnInternalWebAPIURLIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnInternalWebAPIURLIDChanged()
    End Sub
    Partial Private Sub OnExternalWebAPIURLIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnExternalWebAPIURLIDChanged()
    End Sub
    Partial Private Sub OnACPASURLIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnACPASURLIDChanged()
    End Sub
    Partial Private Sub OnCompuScanURLIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCompuScanURLIDChanged()
    End Sub
    Partial Private Sub OnVodacomHTTPURLIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnVodacomHTTPURLIDChanged()
    End Sub
    Partial Private Sub OnVodacomSOAPURLIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnVodacomSOAPURLIDChanged()
    End Sub
    Partial Private Sub OnVodacomRESTURLIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnVodacomRESTURLIDChanged()
    End Sub
    Partial Private Sub OnConnectMobileNIUSSDURLIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnConnectMobileNIUSSDURLIDChanged()
    End Sub
    Partial Private Sub OnConnectMobileSMSURLIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnConnectMobileSMSURLIDChanged()
    End Sub
    Partial Private Sub OnMainDatabaseIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMainDatabaseIDChanged()
    End Sub
    Partial Private Sub OnRulesEngineDBIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnRulesEngineDBIDChanged()
    End Sub
    Partial Private Sub OnMainRepositoryIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMainRepositoryIDChanged()
    End Sub
    Partial Private Sub OnMainEnvironmentIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMainEnvironmentIDChanged()
    End Sub
    Partial Private Sub OnEnvironmentTypeIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnEnvironmentTypeIDChanged()
    End Sub
    Partial Private Sub OnDefaultIDNoChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultIDNoChanged()
    End Sub
    Partial Private Sub OnDefaultMobileChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultMobileChanged()
    End Sub
    Partial Private Sub OnDefaultAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDefaultAmountChanged()
    End Sub
    Partial Private Sub OnDefaultBankChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDefaultBankChanged()
    End Sub
    Partial Private Sub OnDefaultOTPChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultOTPChanged()
    End Sub
    Partial Private Sub OnServiceUserIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnServiceUserIDChanged()
    End Sub
    Partial Private Sub OnSwitchPayUserIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnSwitchPayUserIDChanged()
    End Sub
    Partial Private Sub OnAdminUserIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnAdminUserIDChanged()
    End Sub
    Partial Private Sub OnIntegrationUserIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnIntegrationUserIDChanged()
    End Sub
    Partial Private Sub OnFirstEscalationUserIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFirstEscalationUserIDChanged()
    End Sub
    Partial Private Sub OnSecondEscalationUserIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnSecondEscalationUserIDChanged()
    End Sub
    Partial Private Sub OnACPASUserIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnACPASUserIDChanged()
    End Sub
    Partial Private Sub OnCompuscanUserIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCompuscanUserIDChanged()
    End Sub
    Partial Private Sub OnVodacomUserIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnVodacomUserIDChanged()
    End Sub
    Partial Private Sub OnConnectMobileSMSUserIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnConnectMobileSMSUserIDChanged()
    End Sub
    Partial Private Sub OnConnectMobileNIUSSDUserIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnConnectMobileNIUSSDUserIDChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Environments = New EntitySet(Of Environment)(AddressOf Me.attach_Environments, AddressOf Me.detach_Environments)
		Me._EnvironmentRepositories = New EntitySet(Of EnvironmentRepository)(AddressOf Me.attach_EnvironmentRepositories, AddressOf Me.detach_EnvironmentRepositories)
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory1 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory2 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory3 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory4 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory5 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory6 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory7 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory8 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory9 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory10 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory11 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory12 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory13 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._Database = CType(Nothing, EntityRef(Of Database))
		Me._Database1 = CType(Nothing, EntityRef(Of Database))
		Me._Environment = CType(Nothing, EntityRef(Of Environment))
		Me._EnvironmentType = CType(Nothing, EntityRef(Of EnvironmentType))
		Me._URL = CType(Nothing, EntityRef(Of URL))
		Me._URL1 = CType(Nothing, EntityRef(Of URL))
		Me._URL2 = CType(Nothing, EntityRef(Of URL))
		Me._URL3 = CType(Nothing, EntityRef(Of URL))
		Me._URL4 = CType(Nothing, EntityRef(Of URL))
		Me._URL5 = CType(Nothing, EntityRef(Of URL))
		Me._URL6 = CType(Nothing, EntityRef(Of URL))
		Me._URL7 = CType(Nothing, EntityRef(Of URL))
		Me._URL8 = CType(Nothing, EntityRef(Of URL))
		Me._URL9 = CType(Nothing, EntityRef(Of URL))
		Me._URL10 = CType(Nothing, EntityRef(Of URL))
		Me._URL11 = CType(Nothing, EntityRef(Of URL))
		Me._URL12 = CType(Nothing, EntityRef(Of URL))
		Me._URL13 = CType(Nothing, EntityRef(Of URL))
		Me._URL14 = CType(Nothing, EntityRef(Of URL))
		Me._Repository = CType(Nothing, EntityRef(Of Repository))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_URLPrefix", DbType:="NVarChar(50)")>  _
	Public Property URLPrefix() As String
		Get
			Return Me._URLPrefix
		End Get
		Set
			If (String.Equals(Me._URLPrefix, value) = false) Then
				Me.OnURLPrefixChanging(value)
				Me.SendPropertyChanging
				Me._URLPrefix = value
				Me.SendPropertyChanged("URLPrefix")
				Me.OnURLPrefixChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WebLinkURLID", DbType:="BigInt")>  _
	Public Property WebLinkURLID() As System.Nullable(Of Long)
		Get
			Return Me._WebLinkURLID
		End Get
		Set
			If (Me._WebLinkURLID.Equals(value) = false) Then
				If Me._URL12.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnWebLinkURLIDChanging(value)
				Me.SendPropertyChanging
				Me._WebLinkURLID = value
				Me.SendPropertyChanged("WebLinkURLID")
				Me.OnWebLinkURLIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_APIURLID", DbType:="BigInt")>  _
	Public Property APIURLID() As System.Nullable(Of Long)
		Get
			Return Me._APIURLID
		End Get
		Set
			If (Me._APIURLID.Equals(value) = false) Then
				If Me._URL.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAPIURLIDChanging(value)
				Me.SendPropertyChanging
				Me._APIURLID = value
				Me.SendPropertyChanged("APIURLID")
				Me.OnAPIURLIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PortalURLID", DbType:="BigInt")>  _
	Public Property PortalURLID() As System.Nullable(Of Long)
		Get
			Return Me._PortalURLID
		End Get
		Set
			If (Me._PortalURLID.Equals(value) = false) Then
				If Me._URL9.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPortalURLIDChanging(value)
				Me.SendPropertyChanging
				Me._PortalURLID = value
				Me.SendPropertyChanged("PortalURLID")
				Me.OnPortalURLIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_USSDURLID", DbType:="BigInt")>  _
	Public Property USSDURLID() As System.Nullable(Of Long)
		Get
			Return Me._USSDURLID
		End Get
		Set
			If (Me._USSDURLID.Equals(value) = false) Then
				If Me._URL11.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUSSDURLIDChanging(value)
				Me.SendPropertyChanging
				Me._USSDURLID = value
				Me.SendPropertyChanged("USSDURLID")
				Me.OnUSSDURLIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ImagesURLID", DbType:="BigInt")>  _
	Public Property ImagesURLID() As System.Nullable(Of Long)
		Get
			Return Me._ImagesURLID
		End Get
		Set
			If (Me._ImagesURLID.Equals(value) = false) Then
				If Me._URL7.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnImagesURLIDChanging(value)
				Me.SendPropertyChanging
				Me._ImagesURLID = value
				Me.SendPropertyChanged("ImagesURLID")
				Me.OnImagesURLIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SecondaryProcessURLID", DbType:="BigInt")>  _
	Public Property SecondaryProcessURLID() As System.Nullable(Of Long)
		Get
			Return Me._SecondaryProcessURLID
		End Get
		Set
			If (Me._SecondaryProcessURLID.Equals(value) = false) Then
				If Me._URL10.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSecondaryProcessURLIDChanging(value)
				Me.SendPropertyChanging
				Me._SecondaryProcessURLID = value
				Me.SendPropertyChanged("SecondaryProcessURLID")
				Me.OnSecondaryProcessURLIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InternalWebAPIURLID", DbType:="BigInt")>  _
	Public Property InternalWebAPIURLID() As System.Nullable(Of Long)
		Get
			Return Me._InternalWebAPIURLID
		End Get
		Set
			If (Me._InternalWebAPIURLID.Equals(value) = false) Then
				If Me._URL8.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnInternalWebAPIURLIDChanging(value)
				Me.SendPropertyChanging
				Me._InternalWebAPIURLID = value
				Me.SendPropertyChanged("InternalWebAPIURLID")
				Me.OnInternalWebAPIURLIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExternalWebAPIURLID", DbType:="BigInt")>  _
	Public Property ExternalWebAPIURLID() As System.Nullable(Of Long)
		Get
			Return Me._ExternalWebAPIURLID
		End Get
		Set
			If (Me._ExternalWebAPIURLID.Equals(value) = false) Then
				If Me._URL1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnExternalWebAPIURLIDChanging(value)
				Me.SendPropertyChanging
				Me._ExternalWebAPIURLID = value
				Me.SendPropertyChanged("ExternalWebAPIURLID")
				Me.OnExternalWebAPIURLIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACPASURLID", DbType:="BigInt")>  _
	Public Property ACPASURLID() As System.Nullable(Of Long)
		Get
			Return Me._ACPASURLID
		End Get
		Set
			If (Me._ACPASURLID.Equals(value) = false) Then
				If Me._URL13.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACPASURLIDChanging(value)
				Me.SendPropertyChanging
				Me._ACPASURLID = value
				Me.SendPropertyChanged("ACPASURLID")
				Me.OnACPASURLIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompuScanURLID", DbType:="BigInt")>  _
	Public Property CompuScanURLID() As System.Nullable(Of Long)
		Get
			Return Me._CompuScanURLID
		End Get
		Set
			If (Me._CompuScanURLID.Equals(value) = false) Then
				If Me._URL14.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCompuScanURLIDChanging(value)
				Me.SendPropertyChanging
				Me._CompuScanURLID = value
				Me.SendPropertyChanged("CompuScanURLID")
				Me.OnCompuScanURLIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VodacomHTTPURLID", DbType:="BigInt")>  _
	Public Property VodacomHTTPURLID() As System.Nullable(Of Long)
		Get
			Return Me._VodacomHTTPURLID
		End Get
		Set
			If (Me._VodacomHTTPURLID.Equals(value) = false) Then
				If Me._URL2.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVodacomHTTPURLIDChanging(value)
				Me.SendPropertyChanging
				Me._VodacomHTTPURLID = value
				Me.SendPropertyChanged("VodacomHTTPURLID")
				Me.OnVodacomHTTPURLIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VodacomSOAPURLID", DbType:="BigInt")>  _
	Public Property VodacomSOAPURLID() As System.Nullable(Of Long)
		Get
			Return Me._VodacomSOAPURLID
		End Get
		Set
			If (Me._VodacomSOAPURLID.Equals(value) = false) Then
				If Me._URL4.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVodacomSOAPURLIDChanging(value)
				Me.SendPropertyChanging
				Me._VodacomSOAPURLID = value
				Me.SendPropertyChanged("VodacomSOAPURLID")
				Me.OnVodacomSOAPURLIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VodacomRESTURLID", DbType:="BigInt")>  _
	Public Property VodacomRESTURLID() As System.Nullable(Of Long)
		Get
			Return Me._VodacomRESTURLID
		End Get
		Set
			If (Me._VodacomRESTURLID.Equals(value) = false) Then
				If Me._URL3.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVodacomRESTURLIDChanging(value)
				Me.SendPropertyChanging
				Me._VodacomRESTURLID = value
				Me.SendPropertyChanged("VodacomRESTURLID")
				Me.OnVodacomRESTURLIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConnectMobileNIUSSDURLID", DbType:="BigInt")>  _
	Public Property ConnectMobileNIUSSDURLID() As System.Nullable(Of Long)
		Get
			Return Me._ConnectMobileNIUSSDURLID
		End Get
		Set
			If (Me._ConnectMobileNIUSSDURLID.Equals(value) = false) Then
				If Me._URL5.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnConnectMobileNIUSSDURLIDChanging(value)
				Me.SendPropertyChanging
				Me._ConnectMobileNIUSSDURLID = value
				Me.SendPropertyChanged("ConnectMobileNIUSSDURLID")
				Me.OnConnectMobileNIUSSDURLIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConnectMobileSMSURLID", DbType:="BigInt")>  _
	Public Property ConnectMobileSMSURLID() As System.Nullable(Of Long)
		Get
			Return Me._ConnectMobileSMSURLID
		End Get
		Set
			If (Me._ConnectMobileSMSURLID.Equals(value) = false) Then
				If Me._URL6.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnConnectMobileSMSURLIDChanging(value)
				Me.SendPropertyChanging
				Me._ConnectMobileSMSURLID = value
				Me.SendPropertyChanged("ConnectMobileSMSURLID")
				Me.OnConnectMobileSMSURLIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MainDatabaseID", DbType:="BigInt")>  _
	Public Property MainDatabaseID() As System.Nullable(Of Long)
		Get
			Return Me._MainDatabaseID
		End Get
		Set
			If (Me._MainDatabaseID.Equals(value) = false) Then
				If Me._Database.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMainDatabaseIDChanging(value)
				Me.SendPropertyChanging
				Me._MainDatabaseID = value
				Me.SendPropertyChanged("MainDatabaseID")
				Me.OnMainDatabaseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RulesEngineDBID", DbType:="BigInt")>  _
	Public Property RulesEngineDBID() As System.Nullable(Of Long)
		Get
			Return Me._RulesEngineDBID
		End Get
		Set
			If (Me._RulesEngineDBID.Equals(value) = false) Then
				If Me._Database1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRulesEngineDBIDChanging(value)
				Me.SendPropertyChanging
				Me._RulesEngineDBID = value
				Me.SendPropertyChanged("RulesEngineDBID")
				Me.OnRulesEngineDBIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MainRepositoryID", DbType:="BigInt")>  _
	Public Property MainRepositoryID() As System.Nullable(Of Long)
		Get
			Return Me._MainRepositoryID
		End Get
		Set
			If (Me._MainRepositoryID.Equals(value) = false) Then
				If Me._Repository.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMainRepositoryIDChanging(value)
				Me.SendPropertyChanging
				Me._MainRepositoryID = value
				Me.SendPropertyChanged("MainRepositoryID")
				Me.OnMainRepositoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MainEnvironmentID", DbType:="BigInt")>  _
	Public Property MainEnvironmentID() As System.Nullable(Of Long)
		Get
			Return Me._MainEnvironmentID
		End Get
		Set
			If (Me._MainEnvironmentID.Equals(value) = false) Then
				If Me._Environment.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMainEnvironmentIDChanging(value)
				Me.SendPropertyChanging
				Me._MainEnvironmentID = value
				Me.SendPropertyChanged("MainEnvironmentID")
				Me.OnMainEnvironmentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnvironmentTypeID", DbType:="BigInt")>  _
	Public Property EnvironmentTypeID() As System.Nullable(Of Long)
		Get
			Return Me._EnvironmentTypeID
		End Get
		Set
			If (Me._EnvironmentTypeID.Equals(value) = false) Then
				If Me._EnvironmentType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEnvironmentTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._EnvironmentTypeID = value
				Me.SendPropertyChanged("EnvironmentTypeID")
				Me.OnEnvironmentTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultIDNo", DbType:="NVarChar(50)")>  _
	Public Property DefaultIDNo() As String
		Get
			Return Me._DefaultIDNo
		End Get
		Set
			If (String.Equals(Me._DefaultIDNo, value) = false) Then
				Me.OnDefaultIDNoChanging(value)
				Me.SendPropertyChanging
				Me._DefaultIDNo = value
				Me.SendPropertyChanged("DefaultIDNo")
				Me.OnDefaultIDNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultMobile", DbType:="NVarChar(50)")>  _
	Public Property DefaultMobile() As String
		Get
			Return Me._DefaultMobile
		End Get
		Set
			If (String.Equals(Me._DefaultMobile, value) = false) Then
				Me.OnDefaultMobileChanging(value)
				Me.SendPropertyChanging
				Me._DefaultMobile = value
				Me.SendPropertyChanged("DefaultMobile")
				Me.OnDefaultMobileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultAmount", DbType:="Money")>  _
	Public Property DefaultAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._DefaultAmount
		End Get
		Set
			If (Me._DefaultAmount.Equals(value) = false) Then
				Me.OnDefaultAmountChanging(value)
				Me.SendPropertyChanging
				Me._DefaultAmount = value
				Me.SendPropertyChanged("DefaultAmount")
				Me.OnDefaultAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultBank", DbType:="Int")>  _
	Public Property DefaultBank() As System.Nullable(Of Integer)
		Get
			Return Me._DefaultBank
		End Get
		Set
			If (Me._DefaultBank.Equals(value) = false) Then
				Me.OnDefaultBankChanging(value)
				Me.SendPropertyChanging
				Me._DefaultBank = value
				Me.SendPropertyChanged("DefaultBank")
				Me.OnDefaultBankChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultOTP", DbType:="NVarChar(10)")>  _
	Public Property DefaultOTP() As String
		Get
			Return Me._DefaultOTP
		End Get
		Set
			If (String.Equals(Me._DefaultOTP, value) = false) Then
				Me.OnDefaultOTPChanging(value)
				Me.SendPropertyChanging
				Me._DefaultOTP = value
				Me.SendPropertyChanged("DefaultOTP")
				Me.OnDefaultOTPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUserID", DbType:="BigInt")>  _
	Public Property ServiceUserID() As System.Nullable(Of Long)
		Get
			Return Me._ServiceUserID
		End Get
		Set
			If (Me._ServiceUserID.Equals(value) = false) Then
				If Me._AuthDirectory9.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnServiceUserIDChanging(value)
				Me.SendPropertyChanging
				Me._ServiceUserID = value
				Me.SendPropertyChanged("ServiceUserID")
				Me.OnServiceUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SwitchPayUserID", DbType:="BigInt")>  _
	Public Property SwitchPayUserID() As System.Nullable(Of Long)
		Get
			Return Me._SwitchPayUserID
		End Get
		Set
			If (Me._SwitchPayUserID.Equals(value) = false) Then
				If Me._AuthDirectory10.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSwitchPayUserIDChanging(value)
				Me.SendPropertyChanging
				Me._SwitchPayUserID = value
				Me.SendPropertyChanged("SwitchPayUserID")
				Me.OnSwitchPayUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AdminUserID", DbType:="BigInt")>  _
	Public Property AdminUserID() As System.Nullable(Of Long)
		Get
			Return Me._AdminUserID
		End Get
		Set
			If (Me._AdminUserID.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAdminUserIDChanging(value)
				Me.SendPropertyChanging
				Me._AdminUserID = value
				Me.SendPropertyChanged("AdminUserID")
				Me.OnAdminUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IntegrationUserID", DbType:="BigInt")>  _
	Public Property IntegrationUserID() As System.Nullable(Of Long)
		Get
			Return Me._IntegrationUserID
		End Get
		Set
			If (Me._IntegrationUserID.Equals(value) = false) Then
				If Me._AuthDirectory7.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIntegrationUserIDChanging(value)
				Me.SendPropertyChanging
				Me._IntegrationUserID = value
				Me.SendPropertyChanged("IntegrationUserID")
				Me.OnIntegrationUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstEscalationUserID", DbType:="BigInt")>  _
	Public Property FirstEscalationUserID() As System.Nullable(Of Long)
		Get
			Return Me._FirstEscalationUserID
		End Get
		Set
			If (Me._FirstEscalationUserID.Equals(value) = false) Then
				If Me._AuthDirectory6.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFirstEscalationUserIDChanging(value)
				Me.SendPropertyChanging
				Me._FirstEscalationUserID = value
				Me.SendPropertyChanged("FirstEscalationUserID")
				Me.OnFirstEscalationUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SecondEscalationUserID", DbType:="BigInt")>  _
	Public Property SecondEscalationUserID() As System.Nullable(Of Long)
		Get
			Return Me._SecondEscalationUserID
		End Get
		Set
			If (Me._SecondEscalationUserID.Equals(value) = false) Then
				If Me._AuthDirectory8.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSecondEscalationUserIDChanging(value)
				Me.SendPropertyChanging
				Me._SecondEscalationUserID = value
				Me.SendPropertyChanged("SecondEscalationUserID")
				Me.OnSecondEscalationUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACPASUserID", DbType:="BigInt")>  _
	Public Property ACPASUserID() As System.Nullable(Of Long)
		Get
			Return Me._ACPASUserID
		End Get
		Set
			If (Me._ACPASUserID.Equals(value) = false) Then
				If Me._AuthDirectory12.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACPASUserIDChanging(value)
				Me.SendPropertyChanging
				Me._ACPASUserID = value
				Me.SendPropertyChanged("ACPASUserID")
				Me.OnACPASUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompuscanUserID", DbType:="BigInt")>  _
	Public Property CompuscanUserID() As System.Nullable(Of Long)
		Get
			Return Me._CompuscanUserID
		End Get
		Set
			If (Me._CompuscanUserID.Equals(value) = false) Then
				If Me._AuthDirectory2.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCompuscanUserIDChanging(value)
				Me.SendPropertyChanging
				Me._CompuscanUserID = value
				Me.SendPropertyChanged("CompuscanUserID")
				Me.OnCompuscanUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VodacomUserID", DbType:="BigInt")>  _
	Public Property VodacomUserID() As System.Nullable(Of Long)
		Get
			Return Me._VodacomUserID
		End Get
		Set
			If (Me._VodacomUserID.Equals(value) = false) Then
				If (Me._AuthDirectory3.HasLoadedOrAssignedValue OrElse Me._AuthDirectory13.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVodacomUserIDChanging(value)
				Me.SendPropertyChanging
				Me._VodacomUserID = value
				Me.SendPropertyChanged("VodacomUserID")
				Me.OnVodacomUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConnectMobileSMSUserID", DbType:="BigInt")>  _
	Public Property ConnectMobileSMSUserID() As System.Nullable(Of Long)
		Get
			Return Me._ConnectMobileSMSUserID
		End Get
		Set
			If (Me._ConnectMobileSMSUserID.Equals(value) = false) Then
				If Me._AuthDirectory5.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnConnectMobileSMSUserIDChanging(value)
				Me.SendPropertyChanging
				Me._ConnectMobileSMSUserID = value
				Me.SendPropertyChanged("ConnectMobileSMSUserID")
				Me.OnConnectMobileSMSUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConnectMobileNIUSSDUserID", DbType:="BigInt")>  _
	Public Property ConnectMobileNIUSSDUserID() As System.Nullable(Of Long)
		Get
			Return Me._ConnectMobileNIUSSDUserID
		End Get
		Set
			If (Me._ConnectMobileNIUSSDUserID.Equals(value) = false) Then
				If Me._AuthDirectory4.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnConnectMobileNIUSSDUserIDChanging(value)
				Me.SendPropertyChanging
				Me._ConnectMobileNIUSSDUserID = value
				Me.SendPropertyChanged("ConnectMobileNIUSSDUserID")
				Me.OnConnectMobileNIUSSDUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				If Me._AuthDirectory1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				If Me._AuthDirectory11.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Environment_Environment", Storage:="_Environments", ThisKey:="ID", OtherKey:="MainEnvironmentID")>  _
	Public Property Environments() As EntitySet(Of Environment)
		Get
			Return Me._Environments
		End Get
		Set
			Me._Environments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Environment_EnvironmentRepository", Storage:="_EnvironmentRepositories", ThisKey:="ID", OtherKey:="EnvironmentID")>  _
	Public Property EnvironmentRepositories() As EntitySet(Of EnvironmentRepository)
		Get
			Return Me._EnvironmentRepositories
		End Get
		Set
			Me._EnvironmentRepositories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment", Storage:="_AuthDirectory", ThisKey:="AdminUserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.Environments.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments.Add(Me)
					Me._AdminUserID = value.ID
				Else
					Me._AdminUserID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment1", Storage:="_AuthDirectory1", ThisKey:="CreatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory1() As AuthDirectory
		Get
			Return Me._AuthDirectory1.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory1.Entity = Nothing
					previousValue.Environments1.Remove(Me)
				End If
				Me._AuthDirectory1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments1.Add(Me)
					Me._CreatedBy = value.ID
				Else
					Me._CreatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment2", Storage:="_AuthDirectory2", ThisKey:="CompuscanUserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory2() As AuthDirectory
		Get
			Return Me._AuthDirectory2.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory2.Entity = Nothing
					previousValue.Environments2.Remove(Me)
				End If
				Me._AuthDirectory2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments2.Add(Me)
					Me._CompuscanUserID = value.ID
				Else
					Me._CompuscanUserID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory2")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment3", Storage:="_AuthDirectory3", ThisKey:="VodacomUserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory3() As AuthDirectory
		Get
			Return Me._AuthDirectory3.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory3.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory3.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory3.Entity = Nothing
					previousValue.Environments3.Remove(Me)
				End If
				Me._AuthDirectory3.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments3.Add(Me)
					Me._VodacomUserID = value.ID
				Else
					Me._VodacomUserID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory3")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment4", Storage:="_AuthDirectory4", ThisKey:="ConnectMobileNIUSSDUserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory4() As AuthDirectory
		Get
			Return Me._AuthDirectory4.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory4.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory4.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory4.Entity = Nothing
					previousValue.Environments4.Remove(Me)
				End If
				Me._AuthDirectory4.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments4.Add(Me)
					Me._ConnectMobileNIUSSDUserID = value.ID
				Else
					Me._ConnectMobileNIUSSDUserID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory4")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment5", Storage:="_AuthDirectory5", ThisKey:="ConnectMobileSMSUserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory5() As AuthDirectory
		Get
			Return Me._AuthDirectory5.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory5.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory5.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory5.Entity = Nothing
					previousValue.Environments5.Remove(Me)
				End If
				Me._AuthDirectory5.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments5.Add(Me)
					Me._ConnectMobileSMSUserID = value.ID
				Else
					Me._ConnectMobileSMSUserID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory5")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment6", Storage:="_AuthDirectory6", ThisKey:="FirstEscalationUserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory6() As AuthDirectory
		Get
			Return Me._AuthDirectory6.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory6.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory6.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory6.Entity = Nothing
					previousValue.Environments6.Remove(Me)
				End If
				Me._AuthDirectory6.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments6.Add(Me)
					Me._FirstEscalationUserID = value.ID
				Else
					Me._FirstEscalationUserID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory6")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment7", Storage:="_AuthDirectory7", ThisKey:="IntegrationUserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory7() As AuthDirectory
		Get
			Return Me._AuthDirectory7.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory7.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory7.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory7.Entity = Nothing
					previousValue.Environments7.Remove(Me)
				End If
				Me._AuthDirectory7.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments7.Add(Me)
					Me._IntegrationUserID = value.ID
				Else
					Me._IntegrationUserID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory7")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment8", Storage:="_AuthDirectory8", ThisKey:="SecondEscalationUserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory8() As AuthDirectory
		Get
			Return Me._AuthDirectory8.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory8.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory8.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory8.Entity = Nothing
					previousValue.Environments8.Remove(Me)
				End If
				Me._AuthDirectory8.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments8.Add(Me)
					Me._SecondEscalationUserID = value.ID
				Else
					Me._SecondEscalationUserID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory8")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment9", Storage:="_AuthDirectory9", ThisKey:="ServiceUserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory9() As AuthDirectory
		Get
			Return Me._AuthDirectory9.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory9.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory9.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory9.Entity = Nothing
					previousValue.Environments9.Remove(Me)
				End If
				Me._AuthDirectory9.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments9.Add(Me)
					Me._ServiceUserID = value.ID
				Else
					Me._ServiceUserID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory9")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment10", Storage:="_AuthDirectory10", ThisKey:="SwitchPayUserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory10() As AuthDirectory
		Get
			Return Me._AuthDirectory10.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory10.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory10.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory10.Entity = Nothing
					previousValue.Environments10.Remove(Me)
				End If
				Me._AuthDirectory10.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments10.Add(Me)
					Me._SwitchPayUserID = value.ID
				Else
					Me._SwitchPayUserID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory10")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment11", Storage:="_AuthDirectory11", ThisKey:="UpdatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory11() As AuthDirectory
		Get
			Return Me._AuthDirectory11.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory11.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory11.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory11.Entity = Nothing
					previousValue.Environments11.Remove(Me)
				End If
				Me._AuthDirectory11.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments11.Add(Me)
					Me._UpdatedBy = value.ID
				Else
					Me._UpdatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory11")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment12", Storage:="_AuthDirectory12", ThisKey:="ACPASUserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory12() As AuthDirectory
		Get
			Return Me._AuthDirectory12.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory12.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory12.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory12.Entity = Nothing
					previousValue.Environments12.Remove(Me)
				End If
				Me._AuthDirectory12.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments12.Add(Me)
					Me._ACPASUserID = value.ID
				Else
					Me._ACPASUserID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory12")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Environment13", Storage:="_AuthDirectory13", ThisKey:="VodacomUserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory13() As AuthDirectory
		Get
			Return Me._AuthDirectory13.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory13.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory13.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory13.Entity = Nothing
					previousValue.Environments13.Remove(Me)
				End If
				Me._AuthDirectory13.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments13.Add(Me)
					Me._VodacomUserID = value.ID
				Else
					Me._VodacomUserID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory13")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Database_Environment", Storage:="_Database", ThisKey:="MainDatabaseID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Database() As Database
		Get
			Return Me._Database.Entity
		End Get
		Set
			Dim previousValue As Database = Me._Database.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Database.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Database.Entity = Nothing
					previousValue.Environments.Remove(Me)
				End If
				Me._Database.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments.Add(Me)
					Me._MainDatabaseID = value.ID
				Else
					Me._MainDatabaseID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Database")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Database_Environment1", Storage:="_Database1", ThisKey:="RulesEngineDBID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Database1() As Database
		Get
			Return Me._Database1.Entity
		End Get
		Set
			Dim previousValue As Database = Me._Database1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Database1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Database1.Entity = Nothing
					previousValue.Environments1.Remove(Me)
				End If
				Me._Database1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments1.Add(Me)
					Me._RulesEngineDBID = value.ID
				Else
					Me._RulesEngineDBID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Database1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Environment_Environment", Storage:="_Environment", ThisKey:="MainEnvironmentID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Environment() As Environment
		Get
			Return Me._Environment.Entity
		End Get
		Set
			Dim previousValue As Environment = Me._Environment.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Environment.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Environment.Entity = Nothing
					previousValue.Environments.Remove(Me)
				End If
				Me._Environment.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments.Add(Me)
					Me._MainEnvironmentID = value.ID
				Else
					Me._MainEnvironmentID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Environment")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EnvironmentType_Environment", Storage:="_EnvironmentType", ThisKey:="EnvironmentTypeID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property EnvironmentType() As EnvironmentType
		Get
			Return Me._EnvironmentType.Entity
		End Get
		Set
			Dim previousValue As EnvironmentType = Me._EnvironmentType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EnvironmentType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EnvironmentType.Entity = Nothing
					previousValue.Environments.Remove(Me)
				End If
				Me._EnvironmentType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments.Add(Me)
					Me._EnvironmentTypeID = value.ID
				Else
					Me._EnvironmentTypeID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("EnvironmentType")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment", Storage:="_URL", ThisKey:="APIURLID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property URL() As URL
		Get
			Return Me._URL.Entity
		End Get
		Set
			Dim previousValue As URL = Me._URL.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._URL.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._URL.Entity = Nothing
					previousValue.Environments.Remove(Me)
				End If
				Me._URL.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments.Add(Me)
					Me._APIURLID = value.ID
				Else
					Me._APIURLID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("URL")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment1", Storage:="_URL1", ThisKey:="ExternalWebAPIURLID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property URL1() As URL
		Get
			Return Me._URL1.Entity
		End Get
		Set
			Dim previousValue As URL = Me._URL1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._URL1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._URL1.Entity = Nothing
					previousValue.Environments1.Remove(Me)
				End If
				Me._URL1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments1.Add(Me)
					Me._ExternalWebAPIURLID = value.ID
				Else
					Me._ExternalWebAPIURLID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("URL1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment2", Storage:="_URL2", ThisKey:="VodacomHTTPURLID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property URL2() As URL
		Get
			Return Me._URL2.Entity
		End Get
		Set
			Dim previousValue As URL = Me._URL2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._URL2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._URL2.Entity = Nothing
					previousValue.Environments2.Remove(Me)
				End If
				Me._URL2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments2.Add(Me)
					Me._VodacomHTTPURLID = value.ID
				Else
					Me._VodacomHTTPURLID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("URL2")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment3", Storage:="_URL3", ThisKey:="VodacomRESTURLID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property URL3() As URL
		Get
			Return Me._URL3.Entity
		End Get
		Set
			Dim previousValue As URL = Me._URL3.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._URL3.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._URL3.Entity = Nothing
					previousValue.Environments3.Remove(Me)
				End If
				Me._URL3.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments3.Add(Me)
					Me._VodacomRESTURLID = value.ID
				Else
					Me._VodacomRESTURLID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("URL3")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment4", Storage:="_URL4", ThisKey:="VodacomSOAPURLID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property URL4() As URL
		Get
			Return Me._URL4.Entity
		End Get
		Set
			Dim previousValue As URL = Me._URL4.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._URL4.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._URL4.Entity = Nothing
					previousValue.Environments4.Remove(Me)
				End If
				Me._URL4.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments4.Add(Me)
					Me._VodacomSOAPURLID = value.ID
				Else
					Me._VodacomSOAPURLID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("URL4")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment5", Storage:="_URL5", ThisKey:="ConnectMobileNIUSSDURLID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property URL5() As URL
		Get
			Return Me._URL5.Entity
		End Get
		Set
			Dim previousValue As URL = Me._URL5.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._URL5.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._URL5.Entity = Nothing
					previousValue.Environments5.Remove(Me)
				End If
				Me._URL5.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments5.Add(Me)
					Me._ConnectMobileNIUSSDURLID = value.ID
				Else
					Me._ConnectMobileNIUSSDURLID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("URL5")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment6", Storage:="_URL6", ThisKey:="ConnectMobileSMSURLID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property URL6() As URL
		Get
			Return Me._URL6.Entity
		End Get
		Set
			Dim previousValue As URL = Me._URL6.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._URL6.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._URL6.Entity = Nothing
					previousValue.Environments6.Remove(Me)
				End If
				Me._URL6.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments6.Add(Me)
					Me._ConnectMobileSMSURLID = value.ID
				Else
					Me._ConnectMobileSMSURLID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("URL6")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment7", Storage:="_URL7", ThisKey:="ImagesURLID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property URL7() As URL
		Get
			Return Me._URL7.Entity
		End Get
		Set
			Dim previousValue As URL = Me._URL7.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._URL7.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._URL7.Entity = Nothing
					previousValue.Environments7.Remove(Me)
				End If
				Me._URL7.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments7.Add(Me)
					Me._ImagesURLID = value.ID
				Else
					Me._ImagesURLID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("URL7")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment8", Storage:="_URL8", ThisKey:="InternalWebAPIURLID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property URL8() As URL
		Get
			Return Me._URL8.Entity
		End Get
		Set
			Dim previousValue As URL = Me._URL8.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._URL8.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._URL8.Entity = Nothing
					previousValue.Environments8.Remove(Me)
				End If
				Me._URL8.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments8.Add(Me)
					Me._InternalWebAPIURLID = value.ID
				Else
					Me._InternalWebAPIURLID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("URL8")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment9", Storage:="_URL9", ThisKey:="PortalURLID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property URL9() As URL
		Get
			Return Me._URL9.Entity
		End Get
		Set
			Dim previousValue As URL = Me._URL9.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._URL9.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._URL9.Entity = Nothing
					previousValue.Environments9.Remove(Me)
				End If
				Me._URL9.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments9.Add(Me)
					Me._PortalURLID = value.ID
				Else
					Me._PortalURLID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("URL9")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment10", Storage:="_URL10", ThisKey:="SecondaryProcessURLID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property URL10() As URL
		Get
			Return Me._URL10.Entity
		End Get
		Set
			Dim previousValue As URL = Me._URL10.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._URL10.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._URL10.Entity = Nothing
					previousValue.Environments10.Remove(Me)
				End If
				Me._URL10.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments10.Add(Me)
					Me._SecondaryProcessURLID = value.ID
				Else
					Me._SecondaryProcessURLID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("URL10")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment11", Storage:="_URL11", ThisKey:="USSDURLID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property URL11() As URL
		Get
			Return Me._URL11.Entity
		End Get
		Set
			Dim previousValue As URL = Me._URL11.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._URL11.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._URL11.Entity = Nothing
					previousValue.Environments11.Remove(Me)
				End If
				Me._URL11.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments11.Add(Me)
					Me._USSDURLID = value.ID
				Else
					Me._USSDURLID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("URL11")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment12", Storage:="_URL12", ThisKey:="WebLinkURLID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property URL12() As URL
		Get
			Return Me._URL12.Entity
		End Get
		Set
			Dim previousValue As URL = Me._URL12.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._URL12.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._URL12.Entity = Nothing
					previousValue.Environments12.Remove(Me)
				End If
				Me._URL12.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments12.Add(Me)
					Me._WebLinkURLID = value.ID
				Else
					Me._WebLinkURLID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("URL12")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment13", Storage:="_URL13", ThisKey:="ACPASURLID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property URL13() As URL
		Get
			Return Me._URL13.Entity
		End Get
		Set
			Dim previousValue As URL = Me._URL13.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._URL13.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._URL13.Entity = Nothing
					previousValue.Environments13.Remove(Me)
				End If
				Me._URL13.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments13.Add(Me)
					Me._ACPASURLID = value.ID
				Else
					Me._ACPASURLID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("URL13")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment14", Storage:="_URL14", ThisKey:="CompuScanURLID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property URL14() As URL
		Get
			Return Me._URL14.Entity
		End Get
		Set
			Dim previousValue As URL = Me._URL14.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._URL14.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._URL14.Entity = Nothing
					previousValue.Environments14.Remove(Me)
				End If
				Me._URL14.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments14.Add(Me)
					Me._CompuScanURLID = value.ID
				Else
					Me._CompuScanURLID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("URL14")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Repository_Environment", Storage:="_Repository", ThisKey:="MainRepositoryID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Repository() As Repository
		Get
			Return Me._Repository.Entity
		End Get
		Set
			Dim previousValue As Repository = Me._Repository.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Repository.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Repository.Entity = Nothing
					previousValue.Environments.Remove(Me)
				End If
				Me._Repository.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Environments.Add(Me)
					Me._MainRepositoryID = value.ID
				Else
					Me._MainRepositoryID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Repository")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Environments(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.Environment = Me
	End Sub
	
	Private Sub detach_Environments(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.Environment = Nothing
	End Sub
	
	Private Sub attach_EnvironmentRepositories(ByVal entity As EnvironmentRepository)
		Me.SendPropertyChanging
		entity.Environment = Me
	End Sub
	
	Private Sub detach_EnvironmentRepositories(ByVal entity As EnvironmentRepository)
		Me.SendPropertyChanging
		entity.Environment = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EnvironmentRepository")>  _
Partial Public Class EnvironmentRepository
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _EnvironmentID As System.Nullable(Of Long)
	
	Private _RepositoryID As System.Nullable(Of Long)
	
	Private _FinancialInstitutionID As System.Nullable(Of Long)
	
	Private _MerchantID As System.Nullable(Of Long)
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _ApplicationRepositories As EntitySet(Of ApplicationRepository)
	
	Private _Merchants As EntitySet(Of Merchant)
	
	Private _MerchantTerminals As EntitySet(Of MerchantTerminal)
	
	Private _MerchantTerminals1 As EntitySet(Of MerchantTerminal)
	
	Private _Products As EntitySet(Of Product)
	
	Private _Products1 As EntitySet(Of Product)
	
	Private _ProductBands As EntitySet(Of ProductBand)
	
	Private _TerminalProducts As EntitySet(Of TerminalProduct)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory1 As EntityRef(Of AuthDirectory)
	
	Private _Environment As EntityRef(Of Environment)
	
	Private _FinancialInstitution As EntityRef(Of FinancialInstitution)
	
	Private _Merchant As EntityRef(Of Merchant)
	
	Private _Repository As EntityRef(Of Repository)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnEnvironmentIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnEnvironmentIDChanged()
    End Sub
    Partial Private Sub OnRepositoryIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnRepositoryIDChanged()
    End Sub
    Partial Private Sub OnFinancialInstitutionIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFinancialInstitutionIDChanged()
    End Sub
    Partial Private Sub OnMerchantIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMerchantIDChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationRepositories = New EntitySet(Of ApplicationRepository)(AddressOf Me.attach_ApplicationRepositories, AddressOf Me.detach_ApplicationRepositories)
		Me._Merchants = New EntitySet(Of Merchant)(AddressOf Me.attach_Merchants, AddressOf Me.detach_Merchants)
		Me._MerchantTerminals = New EntitySet(Of MerchantTerminal)(AddressOf Me.attach_MerchantTerminals, AddressOf Me.detach_MerchantTerminals)
		Me._MerchantTerminals1 = New EntitySet(Of MerchantTerminal)(AddressOf Me.attach_MerchantTerminals1, AddressOf Me.detach_MerchantTerminals1)
		Me._Products = New EntitySet(Of Product)(AddressOf Me.attach_Products, AddressOf Me.detach_Products)
		Me._Products1 = New EntitySet(Of Product)(AddressOf Me.attach_Products1, AddressOf Me.detach_Products1)
		Me._ProductBands = New EntitySet(Of ProductBand)(AddressOf Me.attach_ProductBands, AddressOf Me.detach_ProductBands)
		Me._TerminalProducts = New EntitySet(Of TerminalProduct)(AddressOf Me.attach_TerminalProducts, AddressOf Me.detach_TerminalProducts)
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory1 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._Environment = CType(Nothing, EntityRef(Of Environment))
		Me._FinancialInstitution = CType(Nothing, EntityRef(Of FinancialInstitution))
		Me._Merchant = CType(Nothing, EntityRef(Of Merchant))
		Me._Repository = CType(Nothing, EntityRef(Of Repository))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnvironmentID", DbType:="BigInt")>  _
	Public Property EnvironmentID() As System.Nullable(Of Long)
		Get
			Return Me._EnvironmentID
		End Get
		Set
			If (Me._EnvironmentID.Equals(value) = false) Then
				If Me._Environment.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEnvironmentIDChanging(value)
				Me.SendPropertyChanging
				Me._EnvironmentID = value
				Me.SendPropertyChanged("EnvironmentID")
				Me.OnEnvironmentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RepositoryID", DbType:="BigInt")>  _
	Public Property RepositoryID() As System.Nullable(Of Long)
		Get
			Return Me._RepositoryID
		End Get
		Set
			If (Me._RepositoryID.Equals(value) = false) Then
				If Me._Repository.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRepositoryIDChanging(value)
				Me.SendPropertyChanging
				Me._RepositoryID = value
				Me.SendPropertyChanged("RepositoryID")
				Me.OnRepositoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinancialInstitutionID", DbType:="BigInt")>  _
	Public Property FinancialInstitutionID() As System.Nullable(Of Long)
		Get
			Return Me._FinancialInstitutionID
		End Get
		Set
			If (Me._FinancialInstitutionID.Equals(value) = false) Then
				If Me._FinancialInstitution.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFinancialInstitutionIDChanging(value)
				Me.SendPropertyChanging
				Me._FinancialInstitutionID = value
				Me.SendPropertyChanged("FinancialInstitutionID")
				Me.OnFinancialInstitutionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantID", DbType:="BigInt")>  _
	Public Property MerchantID() As System.Nullable(Of Long)
		Get
			Return Me._MerchantID
		End Get
		Set
			If (Me._MerchantID.Equals(value) = false) Then
				If Me._Merchant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMerchantIDChanging(value)
				Me.SendPropertyChanging
				Me._MerchantID = value
				Me.SendPropertyChanged("MerchantID")
				Me.OnMerchantIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				If Me._AuthDirectory1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EnvironmentRepository_ApplicationRepository", Storage:="_ApplicationRepositories", ThisKey:="ID", OtherKey:="EnvironmentRepositoryID")>  _
	Public Property ApplicationRepositories() As EntitySet(Of ApplicationRepository)
		Get
			Return Me._ApplicationRepositories
		End Get
		Set
			Me._ApplicationRepositories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EnvironmentRepository_Merchant", Storage:="_Merchants", ThisKey:="ID", OtherKey:="EnvironmentRepositoryID")>  _
	Public Property Merchants() As EntitySet(Of Merchant)
		Get
			Return Me._Merchants
		End Get
		Set
			Me._Merchants.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EnvironmentRepository_MerchantTerminal", Storage:="_MerchantTerminals", ThisKey:="ID", OtherKey:="EnvironmentRepositoryID")>  _
	Public Property MerchantTerminals() As EntitySet(Of MerchantTerminal)
		Get
			Return Me._MerchantTerminals
		End Get
		Set
			Me._MerchantTerminals.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EnvironmentRepository_MerchantTerminal1", Storage:="_MerchantTerminals1", ThisKey:="ID", OtherKey:="EnvironmentRepositoryID")>  _
	Public Property MerchantTerminals1() As EntitySet(Of MerchantTerminal)
		Get
			Return Me._MerchantTerminals1
		End Get
		Set
			Me._MerchantTerminals1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EnvironmentRepository_Product", Storage:="_Products", ThisKey:="ID", OtherKey:="EnvironmentRepositoryID")>  _
	Public Property Products() As EntitySet(Of Product)
		Get
			Return Me._Products
		End Get
		Set
			Me._Products.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EnvironmentRepository_Product1", Storage:="_Products1", ThisKey:="ID", OtherKey:="EnvironmentRepositoryID")>  _
	Public Property Products1() As EntitySet(Of Product)
		Get
			Return Me._Products1
		End Get
		Set
			Me._Products1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EnvironmentRepository_ProductBand", Storage:="_ProductBands", ThisKey:="ID", OtherKey:="EnvironmentRepositoryID")>  _
	Public Property ProductBands() As EntitySet(Of ProductBand)
		Get
			Return Me._ProductBands
		End Get
		Set
			Me._ProductBands.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EnvironmentRepository_TerminalProduct", Storage:="_TerminalProducts", ThisKey:="ID", OtherKey:="EnvironmentRepositoryID")>  _
	Public Property TerminalProducts() As EntitySet(Of TerminalProduct)
		Get
			Return Me._TerminalProducts
		End Get
		Set
			Me._TerminalProducts.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_EnvironmentRepository", Storage:="_AuthDirectory", ThisKey:="CreatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.EnvironmentRepositories.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EnvironmentRepositories.Add(Me)
					Me._CreatedBy = value.ID
				Else
					Me._CreatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_EnvironmentRepository1", Storage:="_AuthDirectory1", ThisKey:="UpdatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory1() As AuthDirectory
		Get
			Return Me._AuthDirectory1.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory1.Entity = Nothing
					previousValue.EnvironmentRepositories1.Remove(Me)
				End If
				Me._AuthDirectory1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EnvironmentRepositories1.Add(Me)
					Me._UpdatedBy = value.ID
				Else
					Me._UpdatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Environment_EnvironmentRepository", Storage:="_Environment", ThisKey:="EnvironmentID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Environment() As Environment
		Get
			Return Me._Environment.Entity
		End Get
		Set
			Dim previousValue As Environment = Me._Environment.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Environment.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Environment.Entity = Nothing
					previousValue.EnvironmentRepositories.Remove(Me)
				End If
				Me._Environment.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EnvironmentRepositories.Add(Me)
					Me._EnvironmentID = value.ID
				Else
					Me._EnvironmentID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Environment")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FinancialInstitution_EnvironmentRepository", Storage:="_FinancialInstitution", ThisKey:="FinancialInstitutionID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property FinancialInstitution() As FinancialInstitution
		Get
			Return Me._FinancialInstitution.Entity
		End Get
		Set
			Dim previousValue As FinancialInstitution = Me._FinancialInstitution.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FinancialInstitution.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FinancialInstitution.Entity = Nothing
					previousValue.EnvironmentRepositories.Remove(Me)
				End If
				Me._FinancialInstitution.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EnvironmentRepositories.Add(Me)
					Me._FinancialInstitutionID = value.ID
				Else
					Me._FinancialInstitutionID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("FinancialInstitution")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_EnvironmentRepository", Storage:="_Merchant", ThisKey:="MerchantID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Merchant() As Merchant
		Get
			Return Me._Merchant.Entity
		End Get
		Set
			Dim previousValue As Merchant = Me._Merchant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Merchant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Merchant.Entity = Nothing
					previousValue.EnvironmentRepositories.Remove(Me)
				End If
				Me._Merchant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EnvironmentRepositories.Add(Me)
					Me._MerchantID = value.ID
				Else
					Me._MerchantID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Merchant")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Repository_EnvironmentRepository", Storage:="_Repository", ThisKey:="RepositoryID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Repository() As Repository
		Get
			Return Me._Repository.Entity
		End Get
		Set
			Dim previousValue As Repository = Me._Repository.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Repository.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Repository.Entity = Nothing
					previousValue.EnvironmentRepositories.Remove(Me)
				End If
				Me._Repository.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.EnvironmentRepositories.Add(Me)
					Me._RepositoryID = value.ID
				Else
					Me._RepositoryID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Repository")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApplicationRepositories(ByVal entity As ApplicationRepository)
		Me.SendPropertyChanging
		entity.EnvironmentRepository = Me
	End Sub
	
	Private Sub detach_ApplicationRepositories(ByVal entity As ApplicationRepository)
		Me.SendPropertyChanging
		entity.EnvironmentRepository = Nothing
	End Sub
	
	Private Sub attach_Merchants(ByVal entity As Merchant)
		Me.SendPropertyChanging
		entity.EnvironmentRepository = Me
	End Sub
	
	Private Sub detach_Merchants(ByVal entity As Merchant)
		Me.SendPropertyChanging
		entity.EnvironmentRepository = Nothing
	End Sub
	
	Private Sub attach_MerchantTerminals(ByVal entity As MerchantTerminal)
		Me.SendPropertyChanging
		entity.EnvironmentRepository = Me
	End Sub
	
	Private Sub detach_MerchantTerminals(ByVal entity As MerchantTerminal)
		Me.SendPropertyChanging
		entity.EnvironmentRepository = Nothing
	End Sub
	
	Private Sub attach_MerchantTerminals1(ByVal entity As MerchantTerminal)
		Me.SendPropertyChanging
		entity.EnvironmentRepository1 = Me
	End Sub
	
	Private Sub detach_MerchantTerminals1(ByVal entity As MerchantTerminal)
		Me.SendPropertyChanging
		entity.EnvironmentRepository1 = Nothing
	End Sub
	
	Private Sub attach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.EnvironmentRepository = Me
	End Sub
	
	Private Sub detach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.EnvironmentRepository = Nothing
	End Sub
	
	Private Sub attach_Products1(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.EnvironmentRepository1 = Me
	End Sub
	
	Private Sub detach_Products1(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.EnvironmentRepository1 = Nothing
	End Sub
	
	Private Sub attach_ProductBands(ByVal entity As ProductBand)
		Me.SendPropertyChanging
		entity.EnvironmentRepository = Me
	End Sub
	
	Private Sub detach_ProductBands(ByVal entity As ProductBand)
		Me.SendPropertyChanging
		entity.EnvironmentRepository = Nothing
	End Sub
	
	Private Sub attach_TerminalProducts(ByVal entity As TerminalProduct)
		Me.SendPropertyChanging
		entity.EnvironmentRepository = Me
	End Sub
	
	Private Sub detach_TerminalProducts(ByVal entity As TerminalProduct)
		Me.SendPropertyChanging
		entity.EnvironmentRepository = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.EnvironmentType")>  _
Partial Public Class EnvironmentType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _Environments As EntitySet(Of Environment)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Environments = New EntitySet(Of Environment)(AddressOf Me.attach_Environments, AddressOf Me.detach_Environments)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EnvironmentType_Environment", Storage:="_Environments", ThisKey:="ID", OtherKey:="EnvironmentTypeID")>  _
	Public Property Environments() As EntitySet(Of Environment)
		Get
			Return Me._Environments
		End Get
		Set
			Me._Environments.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Environments(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.EnvironmentType = Me
	End Sub
	
	Private Sub detach_Environments(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.EnvironmentType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FieldCategory")>  _
Partial Public Class FieldCategory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Sequence As System.Nullable(Of Integer)
	
	Private _Title As String
	
	Private _Description As String
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _FieldCategoryEntities As EntitySet(Of FieldCategoryEntity)
	
	Private _FieldDefinitions As EntitySet(Of FieldDefinition)
	
	Private _FieldDefinitionEntities As EntitySet(Of FieldDefinitionEntity)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnSequenceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSequenceChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FieldCategoryEntities = New EntitySet(Of FieldCategoryEntity)(AddressOf Me.attach_FieldCategoryEntities, AddressOf Me.detach_FieldCategoryEntities)
		Me._FieldDefinitions = New EntitySet(Of FieldDefinition)(AddressOf Me.attach_FieldDefinitions, AddressOf Me.detach_FieldDefinitions)
		Me._FieldDefinitionEntities = New EntitySet(Of FieldDefinitionEntity)(AddressOf Me.attach_FieldDefinitionEntities, AddressOf Me.detach_FieldDefinitionEntities)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sequence", DbType:="Int")>  _
	Public Property Sequence() As System.Nullable(Of Integer)
		Get
			Return Me._Sequence
		End Get
		Set
			If (Me._Sequence.Equals(value) = false) Then
				Me.OnSequenceChanging(value)
				Me.SendPropertyChanging
				Me._Sequence = value
				Me.SendPropertyChanged("Sequence")
				Me.OnSequenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FieldCategory_FieldCategoryEntity", Storage:="_FieldCategoryEntities", ThisKey:="ID", OtherKey:="FieldCategoryID")>  _
	Public Property FieldCategoryEntities() As EntitySet(Of FieldCategoryEntity)
		Get
			Return Me._FieldCategoryEntities
		End Get
		Set
			Me._FieldCategoryEntities.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FieldCategory_FieldDefinition", Storage:="_FieldDefinitions", ThisKey:="ID", OtherKey:="FieldCategoryID")>  _
	Public Property FieldDefinitions() As EntitySet(Of FieldDefinition)
		Get
			Return Me._FieldDefinitions
		End Get
		Set
			Me._FieldDefinitions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FieldCategory_FieldDefinitionEntity", Storage:="_FieldDefinitionEntities", ThisKey:="ID", OtherKey:="FieldCategoryID")>  _
	Public Property FieldDefinitionEntities() As EntitySet(Of FieldDefinitionEntity)
		Get
			Return Me._FieldDefinitionEntities
		End Get
		Set
			Me._FieldDefinitionEntities.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_FieldCategoryEntities(ByVal entity As FieldCategoryEntity)
		Me.SendPropertyChanging
		entity.FieldCategory = Me
	End Sub
	
	Private Sub detach_FieldCategoryEntities(ByVal entity As FieldCategoryEntity)
		Me.SendPropertyChanging
		entity.FieldCategory = Nothing
	End Sub
	
	Private Sub attach_FieldDefinitions(ByVal entity As FieldDefinition)
		Me.SendPropertyChanging
		entity.FieldCategory = Me
	End Sub
	
	Private Sub detach_FieldDefinitions(ByVal entity As FieldDefinition)
		Me.SendPropertyChanging
		entity.FieldCategory = Nothing
	End Sub
	
	Private Sub attach_FieldDefinitionEntities(ByVal entity As FieldDefinitionEntity)
		Me.SendPropertyChanging
		entity.FieldCategory = Me
	End Sub
	
	Private Sub detach_FieldDefinitionEntities(ByVal entity As FieldDefinitionEntity)
		Me.SendPropertyChanging
		entity.FieldCategory = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FieldCategoryEntity")>  _
Partial Public Class FieldCategoryEntity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Sequence As System.Nullable(Of Integer)
	
	Private _CreditProviderID As System.Nullable(Of Long)
	
	Private _MerchantID As System.Nullable(Of Long)
	
	Private _FieldCategoryID As System.Nullable(Of Long)
	
	Private _Title As String
	
	Private _Description As String
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _FieldCategory As EntityRef(Of FieldCategory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnSequenceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSequenceChanged()
    End Sub
    Partial Private Sub OnCreditProviderIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreditProviderIDChanged()
    End Sub
    Partial Private Sub OnMerchantIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMerchantIDChanged()
    End Sub
    Partial Private Sub OnFieldCategoryIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFieldCategoryIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FieldCategory = CType(Nothing, EntityRef(Of FieldCategory))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sequence", DbType:="Int")>  _
	Public Property Sequence() As System.Nullable(Of Integer)
		Get
			Return Me._Sequence
		End Get
		Set
			If (Me._Sequence.Equals(value) = false) Then
				Me.OnSequenceChanging(value)
				Me.SendPropertyChanging
				Me._Sequence = value
				Me.SendPropertyChanged("Sequence")
				Me.OnSequenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreditProviderID", DbType:="BigInt")>  _
	Public Property CreditProviderID() As System.Nullable(Of Long)
		Get
			Return Me._CreditProviderID
		End Get
		Set
			If (Me._CreditProviderID.Equals(value) = false) Then
				Me.OnCreditProviderIDChanging(value)
				Me.SendPropertyChanging
				Me._CreditProviderID = value
				Me.SendPropertyChanged("CreditProviderID")
				Me.OnCreditProviderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantID", DbType:="BigInt")>  _
	Public Property MerchantID() As System.Nullable(Of Long)
		Get
			Return Me._MerchantID
		End Get
		Set
			If (Me._MerchantID.Equals(value) = false) Then
				Me.OnMerchantIDChanging(value)
				Me.SendPropertyChanging
				Me._MerchantID = value
				Me.SendPropertyChanged("MerchantID")
				Me.OnMerchantIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldCategoryID", DbType:="BigInt")>  _
	Public Property FieldCategoryID() As System.Nullable(Of Long)
		Get
			Return Me._FieldCategoryID
		End Get
		Set
			If (Me._FieldCategoryID.Equals(value) = false) Then
				If Me._FieldCategory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFieldCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._FieldCategoryID = value
				Me.SendPropertyChanged("FieldCategoryID")
				Me.OnFieldCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FieldCategory_FieldCategoryEntity", Storage:="_FieldCategory", ThisKey:="FieldCategoryID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property FieldCategory() As FieldCategory
		Get
			Return Me._FieldCategory.Entity
		End Get
		Set
			Dim previousValue As FieldCategory = Me._FieldCategory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FieldCategory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FieldCategory.Entity = Nothing
					previousValue.FieldCategoryEntities.Remove(Me)
				End If
				Me._FieldCategory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FieldCategoryEntities.Add(Me)
					Me._FieldCategoryID = value.ID
				Else
					Me._FieldCategoryID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("FieldCategory")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FieldDefinition")>  _
Partial Public Class FieldDefinition
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Sequence As System.Nullable(Of Integer)
	
	Private _FieldCategoryID As System.Nullable(Of Long)
	
	Private _FieldTypeID As System.Nullable(Of Long)
	
	Private _Title As String
	
	Private _Header As String
	
	Private _Description As String
	
	Private _RegEx As String
	
	Private _Minimum As System.Nullable(Of Integer)
	
	Private _Maximum As System.Nullable(Of Integer)
	
	Private _DefaultValue As String
	
	Private _IsRequired As System.Nullable(Of Boolean)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _FieldDefinitionEntities As EntitySet(Of FieldDefinitionEntity)
	
	Private _FieldOptions As EntitySet(Of FieldOption)
	
	Private _FieldCategory As EntityRef(Of FieldCategory)
	
	Private _FieldType As EntityRef(Of FieldType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnSequenceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSequenceChanged()
    End Sub
    Partial Private Sub OnFieldCategoryIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFieldCategoryIDChanged()
    End Sub
    Partial Private Sub OnFieldTypeIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFieldTypeIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnHeaderChanging(value As String)
    End Sub
    Partial Private Sub OnHeaderChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnRegExChanging(value As String)
    End Sub
    Partial Private Sub OnRegExChanged()
    End Sub
    Partial Private Sub OnMinimumChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMinimumChanged()
    End Sub
    Partial Private Sub OnMaximumChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMaximumChanged()
    End Sub
    Partial Private Sub OnDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultValueChanged()
    End Sub
    Partial Private Sub OnIsRequiredChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsRequiredChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FieldDefinitionEntities = New EntitySet(Of FieldDefinitionEntity)(AddressOf Me.attach_FieldDefinitionEntities, AddressOf Me.detach_FieldDefinitionEntities)
		Me._FieldOptions = New EntitySet(Of FieldOption)(AddressOf Me.attach_FieldOptions, AddressOf Me.detach_FieldOptions)
		Me._FieldCategory = CType(Nothing, EntityRef(Of FieldCategory))
		Me._FieldType = CType(Nothing, EntityRef(Of FieldType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sequence", DbType:="Int")>  _
	Public Property Sequence() As System.Nullable(Of Integer)
		Get
			Return Me._Sequence
		End Get
		Set
			If (Me._Sequence.Equals(value) = false) Then
				Me.OnSequenceChanging(value)
				Me.SendPropertyChanging
				Me._Sequence = value
				Me.SendPropertyChanged("Sequence")
				Me.OnSequenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldCategoryID", DbType:="BigInt")>  _
	Public Property FieldCategoryID() As System.Nullable(Of Long)
		Get
			Return Me._FieldCategoryID
		End Get
		Set
			If (Me._FieldCategoryID.Equals(value) = false) Then
				If Me._FieldCategory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFieldCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._FieldCategoryID = value
				Me.SendPropertyChanged("FieldCategoryID")
				Me.OnFieldCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldTypeID", DbType:="BigInt")>  _
	Public Property FieldTypeID() As System.Nullable(Of Long)
		Get
			Return Me._FieldTypeID
		End Get
		Set
			If (Me._FieldTypeID.Equals(value) = false) Then
				If Me._FieldType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFieldTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._FieldTypeID = value
				Me.SendPropertyChanged("FieldTypeID")
				Me.OnFieldTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Header", DbType:="NVarChar(MAX)")>  _
	Public Property Header() As String
		Get
			Return Me._Header
		End Get
		Set
			If (String.Equals(Me._Header, value) = false) Then
				Me.OnHeaderChanging(value)
				Me.SendPropertyChanging
				Me._Header = value
				Me.SendPropertyChanged("Header")
				Me.OnHeaderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegEx", DbType:="NVarChar(500)")>  _
	Public Property RegEx() As String
		Get
			Return Me._RegEx
		End Get
		Set
			If (String.Equals(Me._RegEx, value) = false) Then
				Me.OnRegExChanging(value)
				Me.SendPropertyChanging
				Me._RegEx = value
				Me.SendPropertyChanged("RegEx")
				Me.OnRegExChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Minimum", DbType:="Int")>  _
	Public Property Minimum() As System.Nullable(Of Integer)
		Get
			Return Me._Minimum
		End Get
		Set
			If (Me._Minimum.Equals(value) = false) Then
				Me.OnMinimumChanging(value)
				Me.SendPropertyChanging
				Me._Minimum = value
				Me.SendPropertyChanged("Minimum")
				Me.OnMinimumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Maximum", DbType:="Int")>  _
	Public Property Maximum() As System.Nullable(Of Integer)
		Get
			Return Me._Maximum
		End Get
		Set
			If (Me._Maximum.Equals(value) = false) Then
				Me.OnMaximumChanging(value)
				Me.SendPropertyChanging
				Me._Maximum = value
				Me.SendPropertyChanged("Maximum")
				Me.OnMaximumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultValue", DbType:="NVarChar(500)")>  _
	Public Property DefaultValue() As String
		Get
			Return Me._DefaultValue
		End Get
		Set
			If (String.Equals(Me._DefaultValue, value) = false) Then
				Me.OnDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._DefaultValue = value
				Me.SendPropertyChanged("DefaultValue")
				Me.OnDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsRequired", DbType:="Bit")>  _
	Public Property IsRequired() As System.Nullable(Of Boolean)
		Get
			Return Me._IsRequired
		End Get
		Set
			If (Me._IsRequired.Equals(value) = false) Then
				Me.OnIsRequiredChanging(value)
				Me.SendPropertyChanging
				Me._IsRequired = value
				Me.SendPropertyChanged("IsRequired")
				Me.OnIsRequiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FieldDefinition_FieldDefinitionEntity", Storage:="_FieldDefinitionEntities", ThisKey:="ID", OtherKey:="FieldDefinitionID")>  _
	Public Property FieldDefinitionEntities() As EntitySet(Of FieldDefinitionEntity)
		Get
			Return Me._FieldDefinitionEntities
		End Get
		Set
			Me._FieldDefinitionEntities.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FieldDefinition_FieldOption", Storage:="_FieldOptions", ThisKey:="ID", OtherKey:="FieldDefinitionID")>  _
	Public Property FieldOptions() As EntitySet(Of FieldOption)
		Get
			Return Me._FieldOptions
		End Get
		Set
			Me._FieldOptions.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FieldCategory_FieldDefinition", Storage:="_FieldCategory", ThisKey:="FieldCategoryID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property FieldCategory() As FieldCategory
		Get
			Return Me._FieldCategory.Entity
		End Get
		Set
			Dim previousValue As FieldCategory = Me._FieldCategory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FieldCategory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FieldCategory.Entity = Nothing
					previousValue.FieldDefinitions.Remove(Me)
				End If
				Me._FieldCategory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FieldDefinitions.Add(Me)
					Me._FieldCategoryID = value.ID
				Else
					Me._FieldCategoryID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("FieldCategory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FieldType_FieldDefinition", Storage:="_FieldType", ThisKey:="FieldTypeID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property FieldType() As FieldType
		Get
			Return Me._FieldType.Entity
		End Get
		Set
			Dim previousValue As FieldType = Me._FieldType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FieldType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FieldType.Entity = Nothing
					previousValue.FieldDefinitions.Remove(Me)
				End If
				Me._FieldType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FieldDefinitions.Add(Me)
					Me._FieldTypeID = value.ID
				Else
					Me._FieldTypeID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("FieldType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_FieldDefinitionEntities(ByVal entity As FieldDefinitionEntity)
		Me.SendPropertyChanging
		entity.FieldDefinition = Me
	End Sub
	
	Private Sub detach_FieldDefinitionEntities(ByVal entity As FieldDefinitionEntity)
		Me.SendPropertyChanging
		entity.FieldDefinition = Nothing
	End Sub
	
	Private Sub attach_FieldOptions(ByVal entity As FieldOption)
		Me.SendPropertyChanging
		entity.FieldDefinition = Me
	End Sub
	
	Private Sub detach_FieldOptions(ByVal entity As FieldOption)
		Me.SendPropertyChanging
		entity.FieldDefinition = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FieldDefinitionEntity")>  _
Partial Public Class FieldDefinitionEntity
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Sequence As System.Nullable(Of Integer)
	
	Private _CreditProviderID As System.Nullable(Of Long)
	
	Private _MerchantID As System.Nullable(Of Long)
	
	Private _FieldCategoryID As System.Nullable(Of Long)
	
	Private _FieldDefinitionID As System.Nullable(Of Long)
	
	Private _Title As String
	
	Private _Header As String
	
	Private _Description As String
	
	Private _RegEx As String
	
	Private _Minimum As System.Nullable(Of Integer)
	
	Private _Maximum As System.Nullable(Of Integer)
	
	Private _DefaultValue As String
	
	Private _IsRequired As System.Nullable(Of Boolean)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _FieldCategory As EntityRef(Of FieldCategory)
	
	Private _FieldDefinition As EntityRef(Of FieldDefinition)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnSequenceChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSequenceChanged()
    End Sub
    Partial Private Sub OnCreditProviderIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreditProviderIDChanged()
    End Sub
    Partial Private Sub OnMerchantIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMerchantIDChanged()
    End Sub
    Partial Private Sub OnFieldCategoryIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFieldCategoryIDChanged()
    End Sub
    Partial Private Sub OnFieldDefinitionIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFieldDefinitionIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnHeaderChanging(value As String)
    End Sub
    Partial Private Sub OnHeaderChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnRegExChanging(value As String)
    End Sub
    Partial Private Sub OnRegExChanged()
    End Sub
    Partial Private Sub OnMinimumChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMinimumChanged()
    End Sub
    Partial Private Sub OnMaximumChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMaximumChanged()
    End Sub
    Partial Private Sub OnDefaultValueChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultValueChanged()
    End Sub
    Partial Private Sub OnIsRequiredChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsRequiredChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FieldCategory = CType(Nothing, EntityRef(Of FieldCategory))
		Me._FieldDefinition = CType(Nothing, EntityRef(Of FieldDefinition))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Sequence", DbType:="Int")>  _
	Public Property Sequence() As System.Nullable(Of Integer)
		Get
			Return Me._Sequence
		End Get
		Set
			If (Me._Sequence.Equals(value) = false) Then
				Me.OnSequenceChanging(value)
				Me.SendPropertyChanging
				Me._Sequence = value
				Me.SendPropertyChanged("Sequence")
				Me.OnSequenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreditProviderID", DbType:="BigInt")>  _
	Public Property CreditProviderID() As System.Nullable(Of Long)
		Get
			Return Me._CreditProviderID
		End Get
		Set
			If (Me._CreditProviderID.Equals(value) = false) Then
				Me.OnCreditProviderIDChanging(value)
				Me.SendPropertyChanging
				Me._CreditProviderID = value
				Me.SendPropertyChanged("CreditProviderID")
				Me.OnCreditProviderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantID", DbType:="BigInt")>  _
	Public Property MerchantID() As System.Nullable(Of Long)
		Get
			Return Me._MerchantID
		End Get
		Set
			If (Me._MerchantID.Equals(value) = false) Then
				Me.OnMerchantIDChanging(value)
				Me.SendPropertyChanging
				Me._MerchantID = value
				Me.SendPropertyChanged("MerchantID")
				Me.OnMerchantIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldCategoryID", DbType:="BigInt")>  _
	Public Property FieldCategoryID() As System.Nullable(Of Long)
		Get
			Return Me._FieldCategoryID
		End Get
		Set
			If (Me._FieldCategoryID.Equals(value) = false) Then
				If Me._FieldCategory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFieldCategoryIDChanging(value)
				Me.SendPropertyChanging
				Me._FieldCategoryID = value
				Me.SendPropertyChanged("FieldCategoryID")
				Me.OnFieldCategoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldDefinitionID", DbType:="BigInt")>  _
	Public Property FieldDefinitionID() As System.Nullable(Of Long)
		Get
			Return Me._FieldDefinitionID
		End Get
		Set
			If (Me._FieldDefinitionID.Equals(value) = false) Then
				If Me._FieldDefinition.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFieldDefinitionIDChanging(value)
				Me.SendPropertyChanging
				Me._FieldDefinitionID = value
				Me.SendPropertyChanged("FieldDefinitionID")
				Me.OnFieldDefinitionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Header", DbType:="NVarChar(MAX)")>  _
	Public Property Header() As String
		Get
			Return Me._Header
		End Get
		Set
			If (String.Equals(Me._Header, value) = false) Then
				Me.OnHeaderChanging(value)
				Me.SendPropertyChanging
				Me._Header = value
				Me.SendPropertyChanged("Header")
				Me.OnHeaderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegEx", DbType:="NVarChar(500)")>  _
	Public Property RegEx() As String
		Get
			Return Me._RegEx
		End Get
		Set
			If (String.Equals(Me._RegEx, value) = false) Then
				Me.OnRegExChanging(value)
				Me.SendPropertyChanging
				Me._RegEx = value
				Me.SendPropertyChanged("RegEx")
				Me.OnRegExChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Minimum", DbType:="Int")>  _
	Public Property Minimum() As System.Nullable(Of Integer)
		Get
			Return Me._Minimum
		End Get
		Set
			If (Me._Minimum.Equals(value) = false) Then
				Me.OnMinimumChanging(value)
				Me.SendPropertyChanging
				Me._Minimum = value
				Me.SendPropertyChanged("Minimum")
				Me.OnMinimumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Maximum", DbType:="Int")>  _
	Public Property Maximum() As System.Nullable(Of Integer)
		Get
			Return Me._Maximum
		End Get
		Set
			If (Me._Maximum.Equals(value) = false) Then
				Me.OnMaximumChanging(value)
				Me.SendPropertyChanging
				Me._Maximum = value
				Me.SendPropertyChanged("Maximum")
				Me.OnMaximumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultValue", DbType:="NVarChar(500)")>  _
	Public Property DefaultValue() As String
		Get
			Return Me._DefaultValue
		End Get
		Set
			If (String.Equals(Me._DefaultValue, value) = false) Then
				Me.OnDefaultValueChanging(value)
				Me.SendPropertyChanging
				Me._DefaultValue = value
				Me.SendPropertyChanged("DefaultValue")
				Me.OnDefaultValueChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsRequired", DbType:="Bit")>  _
	Public Property IsRequired() As System.Nullable(Of Boolean)
		Get
			Return Me._IsRequired
		End Get
		Set
			If (Me._IsRequired.Equals(value) = false) Then
				Me.OnIsRequiredChanging(value)
				Me.SendPropertyChanging
				Me._IsRequired = value
				Me.SendPropertyChanged("IsRequired")
				Me.OnIsRequiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FieldCategory_FieldDefinitionEntity", Storage:="_FieldCategory", ThisKey:="FieldCategoryID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property FieldCategory() As FieldCategory
		Get
			Return Me._FieldCategory.Entity
		End Get
		Set
			Dim previousValue As FieldCategory = Me._FieldCategory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FieldCategory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FieldCategory.Entity = Nothing
					previousValue.FieldDefinitionEntities.Remove(Me)
				End If
				Me._FieldCategory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FieldDefinitionEntities.Add(Me)
					Me._FieldCategoryID = value.ID
				Else
					Me._FieldCategoryID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("FieldCategory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FieldDefinition_FieldDefinitionEntity", Storage:="_FieldDefinition", ThisKey:="FieldDefinitionID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property FieldDefinition() As FieldDefinition
		Get
			Return Me._FieldDefinition.Entity
		End Get
		Set
			Dim previousValue As FieldDefinition = Me._FieldDefinition.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FieldDefinition.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FieldDefinition.Entity = Nothing
					previousValue.FieldDefinitionEntities.Remove(Me)
				End If
				Me._FieldDefinition.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FieldDefinitionEntities.Add(Me)
					Me._FieldDefinitionID = value.ID
				Else
					Me._FieldDefinitionID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("FieldDefinition")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FieldOption")>  _
Partial Public Class FieldOption
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _FieldDefinitionID As System.Nullable(Of Long)
	
	Private _Title As String
	
	Private _Code As System.Nullable(Of Long)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _FieldDefinition As EntityRef(Of FieldDefinition)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnFieldDefinitionIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFieldDefinitionIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FieldDefinition = CType(Nothing, EntityRef(Of FieldDefinition))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FieldDefinitionID", DbType:="BigInt")>  _
	Public Property FieldDefinitionID() As System.Nullable(Of Long)
		Get
			Return Me._FieldDefinitionID
		End Get
		Set
			If (Me._FieldDefinitionID.Equals(value) = false) Then
				If Me._FieldDefinition.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFieldDefinitionIDChanging(value)
				Me.SendPropertyChanging
				Me._FieldDefinitionID = value
				Me.SendPropertyChanged("FieldDefinitionID")
				Me.OnFieldDefinitionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code", DbType:="BigInt")>  _
	Public Property Code() As System.Nullable(Of Long)
		Get
			Return Me._Code
		End Get
		Set
			If (Me._Code.Equals(value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FieldDefinition_FieldOption", Storage:="_FieldDefinition", ThisKey:="FieldDefinitionID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property FieldDefinition() As FieldDefinition
		Get
			Return Me._FieldDefinition.Entity
		End Get
		Set
			Dim previousValue As FieldDefinition = Me._FieldDefinition.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FieldDefinition.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FieldDefinition.Entity = Nothing
					previousValue.FieldOptions.Remove(Me)
				End If
				Me._FieldDefinition.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FieldOptions.Add(Me)
					Me._FieldDefinitionID = value.ID
				Else
					Me._FieldDefinitionID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("FieldDefinition")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FieldType")>  _
Partial Public Class FieldType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DataType As String
	
	Private _ClassName As String
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _FieldDefinitions As EntitySet(Of FieldDefinition)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDataTypeChanging(value As String)
    End Sub
    Partial Private Sub OnDataTypeChanged()
    End Sub
    Partial Private Sub OnClassNameChanging(value As String)
    End Sub
    Partial Private Sub OnClassNameChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._FieldDefinitions = New EntitySet(Of FieldDefinition)(AddressOf Me.attach_FieldDefinitions, AddressOf Me.detach_FieldDefinitions)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DataType", DbType:="NVarChar(100)")>  _
	Public Property DataType() As String
		Get
			Return Me._DataType
		End Get
		Set
			If (String.Equals(Me._DataType, value) = false) Then
				Me.OnDataTypeChanging(value)
				Me.SendPropertyChanging
				Me._DataType = value
				Me.SendPropertyChanged("DataType")
				Me.OnDataTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ClassName", DbType:="NVarChar(250)")>  _
	Public Property ClassName() As String
		Get
			Return Me._ClassName
		End Get
		Set
			If (String.Equals(Me._ClassName, value) = false) Then
				Me.OnClassNameChanging(value)
				Me.SendPropertyChanging
				Me._ClassName = value
				Me.SendPropertyChanged("ClassName")
				Me.OnClassNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FieldType_FieldDefinition", Storage:="_FieldDefinitions", ThisKey:="ID", OtherKey:="FieldTypeID")>  _
	Public Property FieldDefinitions() As EntitySet(Of FieldDefinition)
		Get
			Return Me._FieldDefinitions
		End Get
		Set
			Me._FieldDefinitions.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_FieldDefinitions(ByVal entity As FieldDefinition)
		Me.SendPropertyChanging
		entity.FieldType = Me
	End Sub
	
	Private Sub detach_FieldDefinitions(ByVal entity As FieldDefinition)
		Me.SendPropertyChanging
		entity.FieldType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.FinancialInstitution")>  _
Partial Public Class FinancialInstitution
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _Phone As String
	
	Private _Email As String
	
	Private _PrimaryUser As System.Nullable(Of Long)
	
	Private _IsCreditProvider As System.Nullable(Of Boolean)
	
	Private _IsOnBankList As System.Nullable(Of Boolean)
	
	Private _IDForTerminal As System.Nullable(Of Long)
	
	Private _IDForBankList As System.Nullable(Of Long)
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _IsOnTerminalList As System.Nullable(Of Boolean)
	
	Private _ApplicationCreditProviders As EntitySet(Of ApplicationCreditProvider)
	
	Private _ApplicationRepositories As EntitySet(Of ApplicationRepository)
	
	Private _ApplicationRepositories1 As EntitySet(Of ApplicationRepository)
	
	Private _CreditProviderMerchants As EntitySet(Of CreditProviderMerchant)
	
	Private _EnvironmentRepositories As EntitySet(Of EnvironmentRepository)
	
	Private _MerchantBankDetails As EntitySet(Of MerchantBankDetail)
	
	Private _MerchantTerminals As EntitySet(Of MerchantTerminal)
	
	Private _Products As EntitySet(Of Product)
	
	Private _ProductBands As EntitySet(Of ProductBand)
	
	Private _Suppliers As EntitySet(Of Supplier)
	
	Private _TerminalProducts As EntitySet(Of TerminalProduct)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory1 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory2 As EntityRef(Of AuthDirectory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnPrimaryUserChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnPrimaryUserChanged()
    End Sub
    Partial Private Sub OnIsCreditProviderChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsCreditProviderChanged()
    End Sub
    Partial Private Sub OnIsOnBankListChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsOnBankListChanged()
    End Sub
    Partial Private Sub OnIDForTerminalChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnIDForTerminalChanged()
    End Sub
    Partial Private Sub OnIDForBankListChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnIDForBankListChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnIsOnTerminalListChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsOnTerminalListChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationCreditProviders = New EntitySet(Of ApplicationCreditProvider)(AddressOf Me.attach_ApplicationCreditProviders, AddressOf Me.detach_ApplicationCreditProviders)
		Me._ApplicationRepositories = New EntitySet(Of ApplicationRepository)(AddressOf Me.attach_ApplicationRepositories, AddressOf Me.detach_ApplicationRepositories)
		Me._ApplicationRepositories1 = New EntitySet(Of ApplicationRepository)(AddressOf Me.attach_ApplicationRepositories1, AddressOf Me.detach_ApplicationRepositories1)
		Me._CreditProviderMerchants = New EntitySet(Of CreditProviderMerchant)(AddressOf Me.attach_CreditProviderMerchants, AddressOf Me.detach_CreditProviderMerchants)
		Me._EnvironmentRepositories = New EntitySet(Of EnvironmentRepository)(AddressOf Me.attach_EnvironmentRepositories, AddressOf Me.detach_EnvironmentRepositories)
		Me._MerchantBankDetails = New EntitySet(Of MerchantBankDetail)(AddressOf Me.attach_MerchantBankDetails, AddressOf Me.detach_MerchantBankDetails)
		Me._MerchantTerminals = New EntitySet(Of MerchantTerminal)(AddressOf Me.attach_MerchantTerminals, AddressOf Me.detach_MerchantTerminals)
		Me._Products = New EntitySet(Of Product)(AddressOf Me.attach_Products, AddressOf Me.detach_Products)
		Me._ProductBands = New EntitySet(Of ProductBand)(AddressOf Me.attach_ProductBands, AddressOf Me.detach_ProductBands)
		Me._Suppliers = New EntitySet(Of Supplier)(AddressOf Me.attach_Suppliers, AddressOf Me.detach_Suppliers)
		Me._TerminalProducts = New EntitySet(Of TerminalProduct)(AddressOf Me.attach_TerminalProducts, AddressOf Me.detach_TerminalProducts)
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory1 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory2 = CType(Nothing, EntityRef(Of AuthDirectory))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(500)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryUser", DbType:="BigInt")>  _
	Public Property PrimaryUser() As System.Nullable(Of Long)
		Get
			Return Me._PrimaryUser
		End Get
		Set
			If (Me._PrimaryUser.Equals(value) = false) Then
				If Me._AuthDirectory2.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPrimaryUserChanging(value)
				Me.SendPropertyChanging
				Me._PrimaryUser = value
				Me.SendPropertyChanged("PrimaryUser")
				Me.OnPrimaryUserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsCreditProvider", DbType:="Bit")>  _
	Public Property IsCreditProvider() As System.Nullable(Of Boolean)
		Get
			Return Me._IsCreditProvider
		End Get
		Set
			If (Me._IsCreditProvider.Equals(value) = false) Then
				Me.OnIsCreditProviderChanging(value)
				Me.SendPropertyChanging
				Me._IsCreditProvider = value
				Me.SendPropertyChanged("IsCreditProvider")
				Me.OnIsCreditProviderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsOnBankList", DbType:="Bit")>  _
	Public Property IsOnBankList() As System.Nullable(Of Boolean)
		Get
			Return Me._IsOnBankList
		End Get
		Set
			If (Me._IsOnBankList.Equals(value) = false) Then
				Me.OnIsOnBankListChanging(value)
				Me.SendPropertyChanging
				Me._IsOnBankList = value
				Me.SendPropertyChanged("IsOnBankList")
				Me.OnIsOnBankListChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDForTerminal", DbType:="BigInt")>  _
	Public Property IDForTerminal() As System.Nullable(Of Long)
		Get
			Return Me._IDForTerminal
		End Get
		Set
			If (Me._IDForTerminal.Equals(value) = false) Then
				Me.OnIDForTerminalChanging(value)
				Me.SendPropertyChanging
				Me._IDForTerminal = value
				Me.SendPropertyChanged("IDForTerminal")
				Me.OnIDForTerminalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDForBankList", DbType:="BigInt")>  _
	Public Property IDForBankList() As System.Nullable(Of Long)
		Get
			Return Me._IDForBankList
		End Get
		Set
			If (Me._IDForBankList.Equals(value) = false) Then
				Me.OnIDForBankListChanging(value)
				Me.SendPropertyChanging
				Me._IDForBankList = value
				Me.SendPropertyChanged("IDForBankList")
				Me.OnIDForBankListChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				If Me._AuthDirectory1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsOnTerminalList", DbType:="Bit")>  _
	Public Property IsOnTerminalList() As System.Nullable(Of Boolean)
		Get
			Return Me._IsOnTerminalList
		End Get
		Set
			If (Me._IsOnTerminalList.Equals(value) = false) Then
				Me.OnIsOnTerminalListChanging(value)
				Me.SendPropertyChanging
				Me._IsOnTerminalList = value
				Me.SendPropertyChanged("IsOnTerminalList")
				Me.OnIsOnTerminalListChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FinancialInstitution_ApplicationCreditProvider", Storage:="_ApplicationCreditProviders", ThisKey:="ID", OtherKey:="CreditProviderID")>  _
	Public Property ApplicationCreditProviders() As EntitySet(Of ApplicationCreditProvider)
		Get
			Return Me._ApplicationCreditProviders
		End Get
		Set
			Me._ApplicationCreditProviders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FinancialInstitution_ApplicationRepository", Storage:="_ApplicationRepositories", ThisKey:="ID", OtherKey:="CreditProviderID")>  _
	Public Property ApplicationRepositories() As EntitySet(Of ApplicationRepository)
		Get
			Return Me._ApplicationRepositories
		End Get
		Set
			Me._ApplicationRepositories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FinancialInstitution_ApplicationRepository1", Storage:="_ApplicationRepositories1", ThisKey:="ID", OtherKey:="FinancialInstitutionID")>  _
	Public Property ApplicationRepositories1() As EntitySet(Of ApplicationRepository)
		Get
			Return Me._ApplicationRepositories1
		End Get
		Set
			Me._ApplicationRepositories1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FinancialInstitution_CreditProviderMerchant", Storage:="_CreditProviderMerchants", ThisKey:="ID", OtherKey:="FinancialInstitutionID")>  _
	Public Property CreditProviderMerchants() As EntitySet(Of CreditProviderMerchant)
		Get
			Return Me._CreditProviderMerchants
		End Get
		Set
			Me._CreditProviderMerchants.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FinancialInstitution_EnvironmentRepository", Storage:="_EnvironmentRepositories", ThisKey:="ID", OtherKey:="FinancialInstitutionID")>  _
	Public Property EnvironmentRepositories() As EntitySet(Of EnvironmentRepository)
		Get
			Return Me._EnvironmentRepositories
		End Get
		Set
			Me._EnvironmentRepositories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FinancialInstitution_MerchantBankDetail", Storage:="_MerchantBankDetails", ThisKey:="ID", OtherKey:="FinancialInstitutionID")>  _
	Public Property MerchantBankDetails() As EntitySet(Of MerchantBankDetail)
		Get
			Return Me._MerchantBankDetails
		End Get
		Set
			Me._MerchantBankDetails.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FinancialInstitution_MerchantTerminal", Storage:="_MerchantTerminals", ThisKey:="ID", OtherKey:="FinancialInstitutionID")>  _
	Public Property MerchantTerminals() As EntitySet(Of MerchantTerminal)
		Get
			Return Me._MerchantTerminals
		End Get
		Set
			Me._MerchantTerminals.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FinancialInstitution_Product", Storage:="_Products", ThisKey:="ID", OtherKey:="FinancialInstitutionID")>  _
	Public Property Products() As EntitySet(Of Product)
		Get
			Return Me._Products
		End Get
		Set
			Me._Products.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FinancialInstitution_ProductBand", Storage:="_ProductBands", ThisKey:="ID", OtherKey:="FinancialInstitutionID")>  _
	Public Property ProductBands() As EntitySet(Of ProductBand)
		Get
			Return Me._ProductBands
		End Get
		Set
			Me._ProductBands.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FinancialInstitution_Supplier", Storage:="_Suppliers", ThisKey:="ID", OtherKey:="FinancialInstitutionID")>  _
	Public Property Suppliers() As EntitySet(Of Supplier)
		Get
			Return Me._Suppliers
		End Get
		Set
			Me._Suppliers.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FinancialInstitution_TerminalProduct", Storage:="_TerminalProducts", ThisKey:="ID", OtherKey:="FinancialInstitutionID")>  _
	Public Property TerminalProducts() As EntitySet(Of TerminalProduct)
		Get
			Return Me._TerminalProducts
		End Get
		Set
			Me._TerminalProducts.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_FinancialInstitution", Storage:="_AuthDirectory", ThisKey:="CreatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.FinancialInstitutions.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FinancialInstitutions.Add(Me)
					Me._CreatedBy = value.ID
				Else
					Me._CreatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_FinancialInstitution1", Storage:="_AuthDirectory1", ThisKey:="UpdatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory1() As AuthDirectory
		Get
			Return Me._AuthDirectory1.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory1.Entity = Nothing
					previousValue.FinancialInstitutions1.Remove(Me)
				End If
				Me._AuthDirectory1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FinancialInstitutions1.Add(Me)
					Me._UpdatedBy = value.ID
				Else
					Me._UpdatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_FinancialInstitution2", Storage:="_AuthDirectory2", ThisKey:="PrimaryUser", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory2() As AuthDirectory
		Get
			Return Me._AuthDirectory2.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory2.Entity = Nothing
					previousValue.FinancialInstitutions2.Remove(Me)
				End If
				Me._AuthDirectory2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.FinancialInstitutions2.Add(Me)
					Me._PrimaryUser = value.ID
				Else
					Me._PrimaryUser = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory2")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApplicationCreditProviders(ByVal entity As ApplicationCreditProvider)
		Me.SendPropertyChanging
		entity.FinancialInstitution = Me
	End Sub
	
	Private Sub detach_ApplicationCreditProviders(ByVal entity As ApplicationCreditProvider)
		Me.SendPropertyChanging
		entity.FinancialInstitution = Nothing
	End Sub
	
	Private Sub attach_ApplicationRepositories(ByVal entity As ApplicationRepository)
		Me.SendPropertyChanging
		entity.FinancialInstitution = Me
	End Sub
	
	Private Sub detach_ApplicationRepositories(ByVal entity As ApplicationRepository)
		Me.SendPropertyChanging
		entity.FinancialInstitution = Nothing
	End Sub
	
	Private Sub attach_ApplicationRepositories1(ByVal entity As ApplicationRepository)
		Me.SendPropertyChanging
		entity.FinancialInstitution1 = Me
	End Sub
	
	Private Sub detach_ApplicationRepositories1(ByVal entity As ApplicationRepository)
		Me.SendPropertyChanging
		entity.FinancialInstitution1 = Nothing
	End Sub
	
	Private Sub attach_CreditProviderMerchants(ByVal entity As CreditProviderMerchant)
		Me.SendPropertyChanging
		entity.FinancialInstitution = Me
	End Sub
	
	Private Sub detach_CreditProviderMerchants(ByVal entity As CreditProviderMerchant)
		Me.SendPropertyChanging
		entity.FinancialInstitution = Nothing
	End Sub
	
	Private Sub attach_EnvironmentRepositories(ByVal entity As EnvironmentRepository)
		Me.SendPropertyChanging
		entity.FinancialInstitution = Me
	End Sub
	
	Private Sub detach_EnvironmentRepositories(ByVal entity As EnvironmentRepository)
		Me.SendPropertyChanging
		entity.FinancialInstitution = Nothing
	End Sub
	
	Private Sub attach_MerchantBankDetails(ByVal entity As MerchantBankDetail)
		Me.SendPropertyChanging
		entity.FinancialInstitution = Me
	End Sub
	
	Private Sub detach_MerchantBankDetails(ByVal entity As MerchantBankDetail)
		Me.SendPropertyChanging
		entity.FinancialInstitution = Nothing
	End Sub
	
	Private Sub attach_MerchantTerminals(ByVal entity As MerchantTerminal)
		Me.SendPropertyChanging
		entity.FinancialInstitution = Me
	End Sub
	
	Private Sub detach_MerchantTerminals(ByVal entity As MerchantTerminal)
		Me.SendPropertyChanging
		entity.FinancialInstitution = Nothing
	End Sub
	
	Private Sub attach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.FinancialInstitution = Me
	End Sub
	
	Private Sub detach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.FinancialInstitution = Nothing
	End Sub
	
	Private Sub attach_ProductBands(ByVal entity As ProductBand)
		Me.SendPropertyChanging
		entity.FinancialInstitution = Me
	End Sub
	
	Private Sub detach_ProductBands(ByVal entity As ProductBand)
		Me.SendPropertyChanging
		entity.FinancialInstitution = Nothing
	End Sub
	
	Private Sub attach_Suppliers(ByVal entity As Supplier)
		Me.SendPropertyChanging
		entity.FinancialInstitution = Me
	End Sub
	
	Private Sub detach_Suppliers(ByVal entity As Supplier)
		Me.SendPropertyChanging
		entity.FinancialInstitution = Nothing
	End Sub
	
	Private Sub attach_TerminalProducts(ByVal entity As TerminalProduct)
		Me.SendPropertyChanging
		entity.FinancialInstitution = Me
	End Sub
	
	Private Sub detach_TerminalProducts(ByVal entity As TerminalProduct)
		Me.SendPropertyChanging
		entity.FinancialInstitution = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Footprint")>  _
Partial Public Class Footprint
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _Minimum As System.Nullable(Of Integer)
	
	Private _Maximum As System.Nullable(Of Integer)
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _MerchantDetails As EntitySet(Of MerchantDetail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnMinimumChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMinimumChanged()
    End Sub
    Partial Private Sub OnMaximumChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMaximumChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MerchantDetails = New EntitySet(Of MerchantDetail)(AddressOf Me.attach_MerchantDetails, AddressOf Me.detach_MerchantDetails)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Minimum", DbType:="Int")>  _
	Public Property Minimum() As System.Nullable(Of Integer)
		Get
			Return Me._Minimum
		End Get
		Set
			If (Me._Minimum.Equals(value) = false) Then
				Me.OnMinimumChanging(value)
				Me.SendPropertyChanging
				Me._Minimum = value
				Me.SendPropertyChanged("Minimum")
				Me.OnMinimumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Maximum", DbType:="Int")>  _
	Public Property Maximum() As System.Nullable(Of Integer)
		Get
			Return Me._Maximum
		End Get
		Set
			If (Me._Maximum.Equals(value) = false) Then
				Me.OnMaximumChanging(value)
				Me.SendPropertyChanging
				Me._Maximum = value
				Me.SendPropertyChanged("Maximum")
				Me.OnMaximumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Footprint_MerchantDetail", Storage:="_MerchantDetails", ThisKey:="ID", OtherKey:="FootprintID")>  _
	Public Property MerchantDetails() As EntitySet(Of MerchantDetail)
		Get
			Return Me._MerchantDetails
		End Get
		Set
			Me._MerchantDetails.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_MerchantDetails(ByVal entity As MerchantDetail)
		Me.SendPropertyChanging
		entity.Footprint = Me
	End Sub
	
	Private Sub detach_MerchantDetails(ByVal entity As MerchantDetail)
		Me.SendPropertyChanging
		entity.Footprint = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HistoryType")>  _
Partial Public Class HistoryType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _CausesNotification As System.Nullable(Of Boolean)
	
	Private _IsBankStatus As System.Nullable(Of Boolean)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnCausesNotificationChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnCausesNotificationChanged()
    End Sub
    Partial Private Sub OnIsBankStatusChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsBankStatusChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CausesNotification", DbType:="Bit")>  _
	Public Property CausesNotification() As System.Nullable(Of Boolean)
		Get
			Return Me._CausesNotification
		End Get
		Set
			If (Me._CausesNotification.Equals(value) = false) Then
				Me.OnCausesNotificationChanging(value)
				Me.SendPropertyChanging
				Me._CausesNotification = value
				Me.SendPropertyChanged("CausesNotification")
				Me.OnCausesNotificationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsBankStatus", DbType:="Bit")>  _
	Public Property IsBankStatus() As System.Nullable(Of Boolean)
		Get
			Return Me._IsBankStatus
		End Get
		Set
			If (Me._IsBankStatus.Equals(value) = false) Then
				Me.OnIsBankStatusChanging(value)
				Me.SendPropertyChanging
				Me._IsBankStatus = value
				Me.SendPropertyChanged("IsBankStatus")
				Me.OnIsBankStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.importmerchant")>  _
Partial Public Class importmerchant
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _sId As System.Nullable(Of System.Guid)
	
	Private _FileNo As System.Nullable(Of Long)
	
	Private _Title As String
	
	Private _Reference As String
	
	Private _PBLM As System.Nullable(Of Boolean)
	
	Private _PBLMAmount As System.Nullable(Of Decimal)
	
	Private _LayBy As System.Nullable(Of Boolean)
	
	Private _LayByAmount As System.Nullable(Of Decimal)
	
	Private _NonEMVDevice As System.Nullable(Of Boolean)
	
	Private _NonEMVDeviceAmount As System.Nullable(Of Decimal)
	
	Private _EFTPOS As System.Nullable(Of Boolean)
	
	Private _EFTPOSAmount As System.Nullable(Of Decimal)
	
	Private _AcquiringBank As String
	
	Private _TypeOfAccount As String
	
	Private _EntityType As String
	
	Private _OtherEntity As String
	
	Private _RegisteredName As String
	
	Private _RegisteredNumber As String
	
	Private _AdditionalValueAdded As String
	
	Private _VAT As String
	
	Private _TelNumber As String
	
	Private _FaxNumber As String
	
	Private _CompanyEmail As String
	
	Private _PrimaryContactPerson As String
	
	Private _PrimaryContactNumber As String
	
	Private _BillingEmail As String
	
	Private _CompanyAddress As String
	
	Private _PhysicalSuburb As String
	
	Private _PhysicalCode As String
	
	Private _PhysicalCity As String
	
	Private _PhysicalProvince As String
	
	Private _PostalAdress As String
	
	Private _PostalSuburb As String
	
	Private _PostalCode As String
	
	Private _PostalCity As String
	
	Private _PostalProvince As String
	
	Private _Website As String
	
	Private _TypeOfBusiness As String
	
	Private _TypeOfProductService As String
	
	Private _Footprint As String
	
	Private _BusinessStructure As String
	
	Private _TotalBranches As String
	
	Private _HearAboutSP As String
	
	Private _HearOther As String
	
	Private _Bank As String
	
	Private _Branch As String
	
	Private _BranchNumber As String
	
	Private _AccountHolderName As String
	
	Private _AccountNumber As String
	
	Private _Designation As String
	
	Private _FirstName As String
	
	Private _LastName As String
	
	Private _Mobile As String
	
	Private _Email As String
	
	Private _Amount As System.Nullable(Of Decimal)
	
	Private _MID As System.Nullable(Of Long)
	
	Private _URL As String
	
	Private _DisplayName As String
	
	Private _DebitOrderReference As String
	
	Private _BillingFirstName As String
	
	Private _PrimaryLastName As String
	
	Private _PrimaryEmail As String
	
	Private _EFTDeviceSupplier As String
	
	Private _BillingLastName As String
	
	Private _BillingMobile As String
	
	Private _PBLSerialNumber As String
	
	Private _EFTVASLayerSerialNumber As String
	
	Private _TotalTrustees As System.Nullable(Of Integer)
	
	Private _YearsInBusiness As System.Nullable(Of Integer)
	
	Private _MothsInBusiness As System.Nullable(Of Integer)
	
	Private _EFTPOSPeriod As System.Nullable(Of Integer)
	
	Private _Term1 As System.Nullable(Of Integer)
	
	Private _Term2 As System.Nullable(Of Integer)
	
	Private _Term3 As System.Nullable(Of Integer)
	
	Private _Term4 As System.Nullable(Of Integer)
	
	Private _Term5 As System.Nullable(Of Integer)
	
	Private _Term6 As System.Nullable(Of Integer)
	
	Private _Term7 As System.Nullable(Of Integer)
	
	Private _Term8 As String
	
	Private _Term9 As String
	
	Private _Term10 As System.Nullable(Of Integer)
	
	Private _NonEFTDevicePeriod As System.Nullable(Of Integer)
	
	Private _LayByPeriod As System.Nullable(Of Integer)
	
	Private _PBLMPeriod As System.Nullable(Of Integer)
	
	Private _MerchantCommission As System.Nullable(Of Decimal)
	
	Private _MerchantLaybyDeposit As System.Nullable(Of Decimal)
	
	Private _PBLMFee As System.Nullable(Of Decimal)
	
	Private _LBMFee As System.Nullable(Of Decimal)
	
	Private _ActivationDate As System.Nullable(Of Date)
	
	Private _ActivationAmount As System.Nullable(Of Decimal)
	
	Private _ApplicationDate As System.Nullable(Of Date)
	
	Private _LayByDate As System.Nullable(Of Date)
	
	Private _EFTPOSDate As System.Nullable(Of Date)
	
	Private _NonEFTDevuceDate As System.Nullable(Of Date)
	
	Private _PBLMDate As System.Nullable(Of Date)
	
	Private _ActivationFee As System.Nullable(Of Boolean)
	
	Private _IsTrusteeJuristicPerson As System.Nullable(Of Boolean)
	
	Private _IsPostalDifferent As System.Nullable(Of Boolean)
	
	Private _ParentMerchantBankDetails As System.Nullable(Of Boolean)
	
	Private _ParentMerchantID As System.Nullable(Of Long)
	
	Private _ParentMerchant As String
	
	Private _SalesChannel As String
	
	Private _Agent As String
	
	Private _MerchantLogo As System.Data.Linq.Binary
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _CreatedBy As String
	
	Private _UpdatedBy As String
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _Description As String
	
	Private _Processed As System.Nullable(Of Boolean)
	
	Private _Transferred As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnsIdChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnsIdChanged()
    End Sub
    Partial Private Sub OnFileNoChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFileNoChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnReferenceChanging(value As String)
    End Sub
    Partial Private Sub OnReferenceChanged()
    End Sub
    Partial Private Sub OnPBLMChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnPBLMChanged()
    End Sub
    Partial Private Sub OnPBLMAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPBLMAmountChanged()
    End Sub
    Partial Private Sub OnLayByChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnLayByChanged()
    End Sub
    Partial Private Sub OnLayByAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnLayByAmountChanged()
    End Sub
    Partial Private Sub OnNonEMVDeviceChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnNonEMVDeviceChanged()
    End Sub
    Partial Private Sub OnNonEMVDeviceAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnNonEMVDeviceAmountChanged()
    End Sub
    Partial Private Sub OnEFTPOSChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnEFTPOSChanged()
    End Sub
    Partial Private Sub OnEFTPOSAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnEFTPOSAmountChanged()
    End Sub
    Partial Private Sub OnAcquiringBankChanging(value As String)
    End Sub
    Partial Private Sub OnAcquiringBankChanged()
    End Sub
    Partial Private Sub OnTypeOfAccountChanging(value As String)
    End Sub
    Partial Private Sub OnTypeOfAccountChanged()
    End Sub
    Partial Private Sub OnEntityTypeChanging(value As String)
    End Sub
    Partial Private Sub OnEntityTypeChanged()
    End Sub
    Partial Private Sub OnOtherEntityChanging(value As String)
    End Sub
    Partial Private Sub OnOtherEntityChanged()
    End Sub
    Partial Private Sub OnRegisteredNameChanging(value As String)
    End Sub
    Partial Private Sub OnRegisteredNameChanged()
    End Sub
    Partial Private Sub OnRegisteredNumberChanging(value As String)
    End Sub
    Partial Private Sub OnRegisteredNumberChanged()
    End Sub
    Partial Private Sub OnAdditionalValueAddedChanging(value As String)
    End Sub
    Partial Private Sub OnAdditionalValueAddedChanged()
    End Sub
    Partial Private Sub OnVATChanging(value As String)
    End Sub
    Partial Private Sub OnVATChanged()
    End Sub
    Partial Private Sub OnTelNumberChanging(value As String)
    End Sub
    Partial Private Sub OnTelNumberChanged()
    End Sub
    Partial Private Sub OnFaxNumberChanging(value As String)
    End Sub
    Partial Private Sub OnFaxNumberChanged()
    End Sub
    Partial Private Sub OnCompanyEmailChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyEmailChanged()
    End Sub
    Partial Private Sub OnPrimaryContactPersonChanging(value As String)
    End Sub
    Partial Private Sub OnPrimaryContactPersonChanged()
    End Sub
    Partial Private Sub OnPrimaryContactNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPrimaryContactNumberChanged()
    End Sub
    Partial Private Sub OnBillingEmailChanging(value As String)
    End Sub
    Partial Private Sub OnBillingEmailChanged()
    End Sub
    Partial Private Sub OnCompanyAddressChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyAddressChanged()
    End Sub
    Partial Private Sub OnPhysicalSuburbChanging(value As String)
    End Sub
    Partial Private Sub OnPhysicalSuburbChanged()
    End Sub
    Partial Private Sub OnPhysicalCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPhysicalCodeChanged()
    End Sub
    Partial Private Sub OnPhysicalCityChanging(value As String)
    End Sub
    Partial Private Sub OnPhysicalCityChanged()
    End Sub
    Partial Private Sub OnPhysicalProvinceChanging(value As String)
    End Sub
    Partial Private Sub OnPhysicalProvinceChanged()
    End Sub
    Partial Private Sub OnPostalAdressChanging(value As String)
    End Sub
    Partial Private Sub OnPostalAdressChanged()
    End Sub
    Partial Private Sub OnPostalSuburbChanging(value As String)
    End Sub
    Partial Private Sub OnPostalSuburbChanged()
    End Sub
    Partial Private Sub OnPostalCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPostalCodeChanged()
    End Sub
    Partial Private Sub OnPostalCityChanging(value As String)
    End Sub
    Partial Private Sub OnPostalCityChanged()
    End Sub
    Partial Private Sub OnPostalProvinceChanging(value As String)
    End Sub
    Partial Private Sub OnPostalProvinceChanged()
    End Sub
    Partial Private Sub OnWebsiteChanging(value As String)
    End Sub
    Partial Private Sub OnWebsiteChanged()
    End Sub
    Partial Private Sub OnTypeOfBusinessChanging(value As String)
    End Sub
    Partial Private Sub OnTypeOfBusinessChanged()
    End Sub
    Partial Private Sub OnTypeOfProductServiceChanging(value As String)
    End Sub
    Partial Private Sub OnTypeOfProductServiceChanged()
    End Sub
    Partial Private Sub OnFootprintChanging(value As String)
    End Sub
    Partial Private Sub OnFootprintChanged()
    End Sub
    Partial Private Sub OnBusinessStructureChanging(value As String)
    End Sub
    Partial Private Sub OnBusinessStructureChanged()
    End Sub
    Partial Private Sub OnTotalBranchesChanging(value As String)
    End Sub
    Partial Private Sub OnTotalBranchesChanged()
    End Sub
    Partial Private Sub OnHearAboutSPChanging(value As String)
    End Sub
    Partial Private Sub OnHearAboutSPChanged()
    End Sub
    Partial Private Sub OnHearOtherChanging(value As String)
    End Sub
    Partial Private Sub OnHearOtherChanged()
    End Sub
    Partial Private Sub OnBankChanging(value As String)
    End Sub
    Partial Private Sub OnBankChanged()
    End Sub
    Partial Private Sub OnBranchChanging(value As String)
    End Sub
    Partial Private Sub OnBranchChanged()
    End Sub
    Partial Private Sub OnBranchNumberChanging(value As String)
    End Sub
    Partial Private Sub OnBranchNumberChanged()
    End Sub
    Partial Private Sub OnAccountHolderNameChanging(value As String)
    End Sub
    Partial Private Sub OnAccountHolderNameChanged()
    End Sub
    Partial Private Sub OnAccountNumberChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNumberChanged()
    End Sub
    Partial Private Sub OnDesignationChanging(value As String)
    End Sub
    Partial Private Sub OnDesignationChanged()
    End Sub
    Partial Private Sub OnFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstNameChanged()
    End Sub
    Partial Private Sub OnLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnLastNameChanged()
    End Sub
    Partial Private Sub OnMobileChanging(value As String)
    End Sub
    Partial Private Sub OnMobileChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnAmountChanged()
    End Sub
    Partial Private Sub OnMIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMIDChanged()
    End Sub
    Partial Private Sub OnURLChanging(value As String)
    End Sub
    Partial Private Sub OnURLChanged()
    End Sub
    Partial Private Sub OnDisplayNameChanging(value As String)
    End Sub
    Partial Private Sub OnDisplayNameChanged()
    End Sub
    Partial Private Sub OnDebitOrderReferenceChanging(value As String)
    End Sub
    Partial Private Sub OnDebitOrderReferenceChanged()
    End Sub
    Partial Private Sub OnBillingFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnBillingFirstNameChanged()
    End Sub
    Partial Private Sub OnPrimaryLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnPrimaryLastNameChanged()
    End Sub
    Partial Private Sub OnPrimaryEmailChanging(value As String)
    End Sub
    Partial Private Sub OnPrimaryEmailChanged()
    End Sub
    Partial Private Sub OnEFTDeviceSupplierChanging(value As String)
    End Sub
    Partial Private Sub OnEFTDeviceSupplierChanged()
    End Sub
    Partial Private Sub OnBillingLastNameChanging(value As String)
    End Sub
    Partial Private Sub OnBillingLastNameChanged()
    End Sub
    Partial Private Sub OnBillingMobileChanging(value As String)
    End Sub
    Partial Private Sub OnBillingMobileChanged()
    End Sub
    Partial Private Sub OnPBLSerialNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPBLSerialNumberChanged()
    End Sub
    Partial Private Sub OnEFTVASLayerSerialNumberChanging(value As String)
    End Sub
    Partial Private Sub OnEFTVASLayerSerialNumberChanged()
    End Sub
    Partial Private Sub OnTotalTrusteesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTotalTrusteesChanged()
    End Sub
    Partial Private Sub OnYearsInBusinessChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnYearsInBusinessChanged()
    End Sub
    Partial Private Sub OnMothsInBusinessChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMothsInBusinessChanged()
    End Sub
    Partial Private Sub OnEFTPOSPeriodChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEFTPOSPeriodChanged()
    End Sub
    Partial Private Sub OnTerm1Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTerm1Changed()
    End Sub
    Partial Private Sub OnTerm2Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTerm2Changed()
    End Sub
    Partial Private Sub OnTerm3Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTerm3Changed()
    End Sub
    Partial Private Sub OnTerm4Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTerm4Changed()
    End Sub
    Partial Private Sub OnTerm5Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTerm5Changed()
    End Sub
    Partial Private Sub OnTerm6Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTerm6Changed()
    End Sub
    Partial Private Sub OnTerm7Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTerm7Changed()
    End Sub
    Partial Private Sub OnTerm8Changing(value As String)
    End Sub
    Partial Private Sub OnTerm8Changed()
    End Sub
    Partial Private Sub OnTerm9Changing(value As String)
    End Sub
    Partial Private Sub OnTerm9Changed()
    End Sub
    Partial Private Sub OnTerm10Changing(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTerm10Changed()
    End Sub
    Partial Private Sub OnNonEFTDevicePeriodChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnNonEFTDevicePeriodChanged()
    End Sub
    Partial Private Sub OnLayByPeriodChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLayByPeriodChanged()
    End Sub
    Partial Private Sub OnPBLMPeriodChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPBLMPeriodChanged()
    End Sub
    Partial Private Sub OnMerchantCommissionChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMerchantCommissionChanged()
    End Sub
    Partial Private Sub OnMerchantLaybyDepositChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnMerchantLaybyDepositChanged()
    End Sub
    Partial Private Sub OnPBLMFeeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPBLMFeeChanged()
    End Sub
    Partial Private Sub OnLBMFeeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnLBMFeeChanged()
    End Sub
    Partial Private Sub OnActivationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnActivationDateChanged()
    End Sub
    Partial Private Sub OnActivationAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnActivationAmountChanged()
    End Sub
    Partial Private Sub OnApplicationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnApplicationDateChanged()
    End Sub
    Partial Private Sub OnLayByDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLayByDateChanged()
    End Sub
    Partial Private Sub OnEFTPOSDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEFTPOSDateChanged()
    End Sub
    Partial Private Sub OnNonEFTDevuceDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnNonEFTDevuceDateChanged()
    End Sub
    Partial Private Sub OnPBLMDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnPBLMDateChanged()
    End Sub
    Partial Private Sub OnActivationFeeChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnActivationFeeChanged()
    End Sub
    Partial Private Sub OnIsTrusteeJuristicPersonChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsTrusteeJuristicPersonChanged()
    End Sub
    Partial Private Sub OnIsPostalDifferentChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsPostalDifferentChanged()
    End Sub
    Partial Private Sub OnParentMerchantBankDetailsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnParentMerchantBankDetailsChanged()
    End Sub
    Partial Private Sub OnParentMerchantIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnParentMerchantIDChanged()
    End Sub
    Partial Private Sub OnParentMerchantChanging(value As String)
    End Sub
    Partial Private Sub OnParentMerchantChanged()
    End Sub
    Partial Private Sub OnSalesChannelChanging(value As String)
    End Sub
    Partial Private Sub OnSalesChannelChanged()
    End Sub
    Partial Private Sub OnAgentChanging(value As String)
    End Sub
    Partial Private Sub OnAgentChanged()
    End Sub
    Partial Private Sub OnMerchantLogoChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnMerchantLogoChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As String)
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As String)
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnProcessedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnProcessedChanged()
    End Sub
    Partial Private Sub OnTransferredChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnTransferredChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_sId", DbType:="UniqueIdentifier")>  _
	Public Property sId() As System.Nullable(Of System.Guid)
		Get
			Return Me._sId
		End Get
		Set
			If (Me._sId.Equals(value) = false) Then
				Me.OnsIdChanging(value)
				Me.SendPropertyChanging
				Me._sId = value
				Me.SendPropertyChanged("sId")
				Me.OnsIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FileNo", DbType:="BigInt")>  _
	Public Property FileNo() As System.Nullable(Of Long)
		Get
			Return Me._FileNo
		End Get
		Set
			If (Me._FileNo.Equals(value) = false) Then
				Me.OnFileNoChanging(value)
				Me.SendPropertyChanging
				Me._FileNo = value
				Me.SendPropertyChanged("FileNo")
				Me.OnFileNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reference", DbType:="NVarChar(500)")>  _
	Public Property Reference() As String
		Get
			Return Me._Reference
		End Get
		Set
			If (String.Equals(Me._Reference, value) = false) Then
				Me.OnReferenceChanging(value)
				Me.SendPropertyChanging
				Me._Reference = value
				Me.SendPropertyChanged("Reference")
				Me.OnReferenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PBLM", DbType:="Bit")>  _
	Public Property PBLM() As System.Nullable(Of Boolean)
		Get
			Return Me._PBLM
		End Get
		Set
			If (Me._PBLM.Equals(value) = false) Then
				Me.OnPBLMChanging(value)
				Me.SendPropertyChanging
				Me._PBLM = value
				Me.SendPropertyChanged("PBLM")
				Me.OnPBLMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PBLMAmount", DbType:="Money")>  _
	Public Property PBLMAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._PBLMAmount
		End Get
		Set
			If (Me._PBLMAmount.Equals(value) = false) Then
				Me.OnPBLMAmountChanging(value)
				Me.SendPropertyChanging
				Me._PBLMAmount = value
				Me.SendPropertyChanged("PBLMAmount")
				Me.OnPBLMAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LayBy", DbType:="Bit")>  _
	Public Property LayBy() As System.Nullable(Of Boolean)
		Get
			Return Me._LayBy
		End Get
		Set
			If (Me._LayBy.Equals(value) = false) Then
				Me.OnLayByChanging(value)
				Me.SendPropertyChanging
				Me._LayBy = value
				Me.SendPropertyChanged("LayBy")
				Me.OnLayByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LayByAmount", DbType:="Money")>  _
	Public Property LayByAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._LayByAmount
		End Get
		Set
			If (Me._LayByAmount.Equals(value) = false) Then
				Me.OnLayByAmountChanging(value)
				Me.SendPropertyChanging
				Me._LayByAmount = value
				Me.SendPropertyChanged("LayByAmount")
				Me.OnLayByAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NonEMVDevice", DbType:="Bit")>  _
	Public Property NonEMVDevice() As System.Nullable(Of Boolean)
		Get
			Return Me._NonEMVDevice
		End Get
		Set
			If (Me._NonEMVDevice.Equals(value) = false) Then
				Me.OnNonEMVDeviceChanging(value)
				Me.SendPropertyChanging
				Me._NonEMVDevice = value
				Me.SendPropertyChanged("NonEMVDevice")
				Me.OnNonEMVDeviceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NonEMVDeviceAmount", DbType:="Money")>  _
	Public Property NonEMVDeviceAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._NonEMVDeviceAmount
		End Get
		Set
			If (Me._NonEMVDeviceAmount.Equals(value) = false) Then
				Me.OnNonEMVDeviceAmountChanging(value)
				Me.SendPropertyChanging
				Me._NonEMVDeviceAmount = value
				Me.SendPropertyChanged("NonEMVDeviceAmount")
				Me.OnNonEMVDeviceAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EFTPOS", DbType:="Bit")>  _
	Public Property EFTPOS() As System.Nullable(Of Boolean)
		Get
			Return Me._EFTPOS
		End Get
		Set
			If (Me._EFTPOS.Equals(value) = false) Then
				Me.OnEFTPOSChanging(value)
				Me.SendPropertyChanging
				Me._EFTPOS = value
				Me.SendPropertyChanged("EFTPOS")
				Me.OnEFTPOSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EFTPOSAmount", DbType:="Money")>  _
	Public Property EFTPOSAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._EFTPOSAmount
		End Get
		Set
			If (Me._EFTPOSAmount.Equals(value) = false) Then
				Me.OnEFTPOSAmountChanging(value)
				Me.SendPropertyChanging
				Me._EFTPOSAmount = value
				Me.SendPropertyChanged("EFTPOSAmount")
				Me.OnEFTPOSAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AcquiringBank", DbType:="NVarChar(255)")>  _
	Public Property AcquiringBank() As String
		Get
			Return Me._AcquiringBank
		End Get
		Set
			If (String.Equals(Me._AcquiringBank, value) = false) Then
				Me.OnAcquiringBankChanging(value)
				Me.SendPropertyChanging
				Me._AcquiringBank = value
				Me.SendPropertyChanged("AcquiringBank")
				Me.OnAcquiringBankChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeOfAccount", DbType:="NVarChar(500)")>  _
	Public Property TypeOfAccount() As String
		Get
			Return Me._TypeOfAccount
		End Get
		Set
			If (String.Equals(Me._TypeOfAccount, value) = false) Then
				Me.OnTypeOfAccountChanging(value)
				Me.SendPropertyChanging
				Me._TypeOfAccount = value
				Me.SendPropertyChanged("TypeOfAccount")
				Me.OnTypeOfAccountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EntityType", DbType:="NVarChar(255)")>  _
	Public Property EntityType() As String
		Get
			Return Me._EntityType
		End Get
		Set
			If (String.Equals(Me._EntityType, value) = false) Then
				Me.OnEntityTypeChanging(value)
				Me.SendPropertyChanging
				Me._EntityType = value
				Me.SendPropertyChanged("EntityType")
				Me.OnEntityTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OtherEntity", DbType:="NVarChar(500)")>  _
	Public Property OtherEntity() As String
		Get
			Return Me._OtherEntity
		End Get
		Set
			If (String.Equals(Me._OtherEntity, value) = false) Then
				Me.OnOtherEntityChanging(value)
				Me.SendPropertyChanging
				Me._OtherEntity = value
				Me.SendPropertyChanged("OtherEntity")
				Me.OnOtherEntityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegisteredName", DbType:="NVarChar(255)")>  _
	Public Property RegisteredName() As String
		Get
			Return Me._RegisteredName
		End Get
		Set
			If (String.Equals(Me._RegisteredName, value) = false) Then
				Me.OnRegisteredNameChanging(value)
				Me.SendPropertyChanging
				Me._RegisteredName = value
				Me.SendPropertyChanged("RegisteredName")
				Me.OnRegisteredNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegisteredNumber", DbType:="NVarChar(255)")>  _
	Public Property RegisteredNumber() As String
		Get
			Return Me._RegisteredNumber
		End Get
		Set
			If (String.Equals(Me._RegisteredNumber, value) = false) Then
				Me.OnRegisteredNumberChanging(value)
				Me.SendPropertyChanging
				Me._RegisteredNumber = value
				Me.SendPropertyChanged("RegisteredNumber")
				Me.OnRegisteredNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AdditionalValueAdded", DbType:="NVarChar(2000)")>  _
	Public Property AdditionalValueAdded() As String
		Get
			Return Me._AdditionalValueAdded
		End Get
		Set
			If (String.Equals(Me._AdditionalValueAdded, value) = false) Then
				Me.OnAdditionalValueAddedChanging(value)
				Me.SendPropertyChanging
				Me._AdditionalValueAdded = value
				Me.SendPropertyChanged("AdditionalValueAdded")
				Me.OnAdditionalValueAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VAT", DbType:="NVarChar(255)")>  _
	Public Property VAT() As String
		Get
			Return Me._VAT
		End Get
		Set
			If (String.Equals(Me._VAT, value) = false) Then
				Me.OnVATChanging(value)
				Me.SendPropertyChanging
				Me._VAT = value
				Me.SendPropertyChanged("VAT")
				Me.OnVATChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TelNumber", DbType:="NVarChar(255)")>  _
	Public Property TelNumber() As String
		Get
			Return Me._TelNumber
		End Get
		Set
			If (String.Equals(Me._TelNumber, value) = false) Then
				Me.OnTelNumberChanging(value)
				Me.SendPropertyChanging
				Me._TelNumber = value
				Me.SendPropertyChanged("TelNumber")
				Me.OnTelNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FaxNumber", DbType:="NVarChar(100)")>  _
	Public Property FaxNumber() As String
		Get
			Return Me._FaxNumber
		End Get
		Set
			If (String.Equals(Me._FaxNumber, value) = false) Then
				Me.OnFaxNumberChanging(value)
				Me.SendPropertyChanging
				Me._FaxNumber = value
				Me.SendPropertyChanged("FaxNumber")
				Me.OnFaxNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyEmail", DbType:="NVarChar(500)")>  _
	Public Property CompanyEmail() As String
		Get
			Return Me._CompanyEmail
		End Get
		Set
			If (String.Equals(Me._CompanyEmail, value) = false) Then
				Me.OnCompanyEmailChanging(value)
				Me.SendPropertyChanging
				Me._CompanyEmail = value
				Me.SendPropertyChanged("CompanyEmail")
				Me.OnCompanyEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryContactPerson", DbType:="NVarChar(255)")>  _
	Public Property PrimaryContactPerson() As String
		Get
			Return Me._PrimaryContactPerson
		End Get
		Set
			If (String.Equals(Me._PrimaryContactPerson, value) = false) Then
				Me.OnPrimaryContactPersonChanging(value)
				Me.SendPropertyChanging
				Me._PrimaryContactPerson = value
				Me.SendPropertyChanged("PrimaryContactPerson")
				Me.OnPrimaryContactPersonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryContactNumber", DbType:="NVarChar(255)")>  _
	Public Property PrimaryContactNumber() As String
		Get
			Return Me._PrimaryContactNumber
		End Get
		Set
			If (String.Equals(Me._PrimaryContactNumber, value) = false) Then
				Me.OnPrimaryContactNumberChanging(value)
				Me.SendPropertyChanging
				Me._PrimaryContactNumber = value
				Me.SendPropertyChanged("PrimaryContactNumber")
				Me.OnPrimaryContactNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillingEmail", DbType:="NVarChar(500)")>  _
	Public Property BillingEmail() As String
		Get
			Return Me._BillingEmail
		End Get
		Set
			If (String.Equals(Me._BillingEmail, value) = false) Then
				Me.OnBillingEmailChanging(value)
				Me.SendPropertyChanging
				Me._BillingEmail = value
				Me.SendPropertyChanged("BillingEmail")
				Me.OnBillingEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyAddress", DbType:="NVarChar(MAX)")>  _
	Public Property CompanyAddress() As String
		Get
			Return Me._CompanyAddress
		End Get
		Set
			If (String.Equals(Me._CompanyAddress, value) = false) Then
				Me.OnCompanyAddressChanging(value)
				Me.SendPropertyChanging
				Me._CompanyAddress = value
				Me.SendPropertyChanged("CompanyAddress")
				Me.OnCompanyAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhysicalSuburb", DbType:="NVarChar(255)")>  _
	Public Property PhysicalSuburb() As String
		Get
			Return Me._PhysicalSuburb
		End Get
		Set
			If (String.Equals(Me._PhysicalSuburb, value) = false) Then
				Me.OnPhysicalSuburbChanging(value)
				Me.SendPropertyChanging
				Me._PhysicalSuburb = value
				Me.SendPropertyChanged("PhysicalSuburb")
				Me.OnPhysicalSuburbChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhysicalCode", DbType:="NVarChar(255)")>  _
	Public Property PhysicalCode() As String
		Get
			Return Me._PhysicalCode
		End Get
		Set
			If (String.Equals(Me._PhysicalCode, value) = false) Then
				Me.OnPhysicalCodeChanging(value)
				Me.SendPropertyChanging
				Me._PhysicalCode = value
				Me.SendPropertyChanged("PhysicalCode")
				Me.OnPhysicalCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhysicalCity", DbType:="NVarChar(255)")>  _
	Public Property PhysicalCity() As String
		Get
			Return Me._PhysicalCity
		End Get
		Set
			If (String.Equals(Me._PhysicalCity, value) = false) Then
				Me.OnPhysicalCityChanging(value)
				Me.SendPropertyChanging
				Me._PhysicalCity = value
				Me.SendPropertyChanged("PhysicalCity")
				Me.OnPhysicalCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhysicalProvince", DbType:="NVarChar(255)")>  _
	Public Property PhysicalProvince() As String
		Get
			Return Me._PhysicalProvince
		End Get
		Set
			If (String.Equals(Me._PhysicalProvince, value) = false) Then
				Me.OnPhysicalProvinceChanging(value)
				Me.SendPropertyChanging
				Me._PhysicalProvince = value
				Me.SendPropertyChanged("PhysicalProvince")
				Me.OnPhysicalProvinceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalAdress", DbType:="NVarChar(MAX)")>  _
	Public Property PostalAdress() As String
		Get
			Return Me._PostalAdress
		End Get
		Set
			If (String.Equals(Me._PostalAdress, value) = false) Then
				Me.OnPostalAdressChanging(value)
				Me.SendPropertyChanging
				Me._PostalAdress = value
				Me.SendPropertyChanged("PostalAdress")
				Me.OnPostalAdressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalSuburb", DbType:="NVarChar(255)")>  _
	Public Property PostalSuburb() As String
		Get
			Return Me._PostalSuburb
		End Get
		Set
			If (String.Equals(Me._PostalSuburb, value) = false) Then
				Me.OnPostalSuburbChanging(value)
				Me.SendPropertyChanging
				Me._PostalSuburb = value
				Me.SendPropertyChanged("PostalSuburb")
				Me.OnPostalSuburbChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalCode", DbType:="NVarChar(255)")>  _
	Public Property PostalCode() As String
		Get
			Return Me._PostalCode
		End Get
		Set
			If (String.Equals(Me._PostalCode, value) = false) Then
				Me.OnPostalCodeChanging(value)
				Me.SendPropertyChanging
				Me._PostalCode = value
				Me.SendPropertyChanged("PostalCode")
				Me.OnPostalCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalCity", DbType:="NVarChar(255)")>  _
	Public Property PostalCity() As String
		Get
			Return Me._PostalCity
		End Get
		Set
			If (String.Equals(Me._PostalCity, value) = false) Then
				Me.OnPostalCityChanging(value)
				Me.SendPropertyChanging
				Me._PostalCity = value
				Me.SendPropertyChanged("PostalCity")
				Me.OnPostalCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalProvince", DbType:="NVarChar(255)")>  _
	Public Property PostalProvince() As String
		Get
			Return Me._PostalProvince
		End Get
		Set
			If (String.Equals(Me._PostalProvince, value) = false) Then
				Me.OnPostalProvinceChanging(value)
				Me.SendPropertyChanging
				Me._PostalProvince = value
				Me.SendPropertyChanged("PostalProvince")
				Me.OnPostalProvinceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Website", DbType:="NVarChar(500)")>  _
	Public Property Website() As String
		Get
			Return Me._Website
		End Get
		Set
			If (String.Equals(Me._Website, value) = false) Then
				Me.OnWebsiteChanging(value)
				Me.SendPropertyChanging
				Me._Website = value
				Me.SendPropertyChanged("Website")
				Me.OnWebsiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeOfBusiness", DbType:="NVarChar(255)")>  _
	Public Property TypeOfBusiness() As String
		Get
			Return Me._TypeOfBusiness
		End Get
		Set
			If (String.Equals(Me._TypeOfBusiness, value) = false) Then
				Me.OnTypeOfBusinessChanging(value)
				Me.SendPropertyChanging
				Me._TypeOfBusiness = value
				Me.SendPropertyChanged("TypeOfBusiness")
				Me.OnTypeOfBusinessChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeOfProductService", DbType:="NVarChar(255)")>  _
	Public Property TypeOfProductService() As String
		Get
			Return Me._TypeOfProductService
		End Get
		Set
			If (String.Equals(Me._TypeOfProductService, value) = false) Then
				Me.OnTypeOfProductServiceChanging(value)
				Me.SendPropertyChanging
				Me._TypeOfProductService = value
				Me.SendPropertyChanged("TypeOfProductService")
				Me.OnTypeOfProductServiceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Footprint", DbType:="NVarChar(255)")>  _
	Public Property Footprint() As String
		Get
			Return Me._Footprint
		End Get
		Set
			If (String.Equals(Me._Footprint, value) = false) Then
				Me.OnFootprintChanging(value)
				Me.SendPropertyChanging
				Me._Footprint = value
				Me.SendPropertyChanged("Footprint")
				Me.OnFootprintChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BusinessStructure", DbType:="NVarChar(255)")>  _
	Public Property BusinessStructure() As String
		Get
			Return Me._BusinessStructure
		End Get
		Set
			If (String.Equals(Me._BusinessStructure, value) = false) Then
				Me.OnBusinessStructureChanging(value)
				Me.SendPropertyChanging
				Me._BusinessStructure = value
				Me.SendPropertyChanged("BusinessStructure")
				Me.OnBusinessStructureChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalBranches", DbType:="NVarChar(255)")>  _
	Public Property TotalBranches() As String
		Get
			Return Me._TotalBranches
		End Get
		Set
			If (String.Equals(Me._TotalBranches, value) = false) Then
				Me.OnTotalBranchesChanging(value)
				Me.SendPropertyChanging
				Me._TotalBranches = value
				Me.SendPropertyChanged("TotalBranches")
				Me.OnTotalBranchesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HearAboutSP", DbType:="NVarChar(255)")>  _
	Public Property HearAboutSP() As String
		Get
			Return Me._HearAboutSP
		End Get
		Set
			If (String.Equals(Me._HearAboutSP, value) = false) Then
				Me.OnHearAboutSPChanging(value)
				Me.SendPropertyChanging
				Me._HearAboutSP = value
				Me.SendPropertyChanged("HearAboutSP")
				Me.OnHearAboutSPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HearOther", DbType:="NVarChar(255)")>  _
	Public Property HearOther() As String
		Get
			Return Me._HearOther
		End Get
		Set
			If (String.Equals(Me._HearOther, value) = false) Then
				Me.OnHearOtherChanging(value)
				Me.SendPropertyChanging
				Me._HearOther = value
				Me.SendPropertyChanged("HearOther")
				Me.OnHearOtherChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Bank", DbType:="NVarChar(255)")>  _
	Public Property Bank() As String
		Get
			Return Me._Bank
		End Get
		Set
			If (String.Equals(Me._Bank, value) = false) Then
				Me.OnBankChanging(value)
				Me.SendPropertyChanging
				Me._Bank = value
				Me.SendPropertyChanged("Bank")
				Me.OnBankChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Branch", DbType:="NVarChar(255)")>  _
	Public Property Branch() As String
		Get
			Return Me._Branch
		End Get
		Set
			If (String.Equals(Me._Branch, value) = false) Then
				Me.OnBranchChanging(value)
				Me.SendPropertyChanging
				Me._Branch = value
				Me.SendPropertyChanged("Branch")
				Me.OnBranchChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BranchNumber", DbType:="NVarChar(255)")>  _
	Public Property BranchNumber() As String
		Get
			Return Me._BranchNumber
		End Get
		Set
			If (String.Equals(Me._BranchNumber, value) = false) Then
				Me.OnBranchNumberChanging(value)
				Me.SendPropertyChanging
				Me._BranchNumber = value
				Me.SendPropertyChanged("BranchNumber")
				Me.OnBranchNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountHolderName", DbType:="NVarChar(255)")>  _
	Public Property AccountHolderName() As String
		Get
			Return Me._AccountHolderName
		End Get
		Set
			If (String.Equals(Me._AccountHolderName, value) = false) Then
				Me.OnAccountHolderNameChanging(value)
				Me.SendPropertyChanging
				Me._AccountHolderName = value
				Me.SendPropertyChanged("AccountHolderName")
				Me.OnAccountHolderNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountNumber", DbType:="NVarChar(255)")>  _
	Public Property AccountNumber() As String
		Get
			Return Me._AccountNumber
		End Get
		Set
			If (String.Equals(Me._AccountNumber, value) = false) Then
				Me.OnAccountNumberChanging(value)
				Me.SendPropertyChanging
				Me._AccountNumber = value
				Me.SendPropertyChanged("AccountNumber")
				Me.OnAccountNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Designation", DbType:="NVarChar(255)")>  _
	Public Property Designation() As String
		Get
			Return Me._Designation
		End Get
		Set
			If (String.Equals(Me._Designation, value) = false) Then
				Me.OnDesignationChanging(value)
				Me.SendPropertyChanging
				Me._Designation = value
				Me.SendPropertyChanged("Designation")
				Me.OnDesignationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstName", DbType:="NVarChar(255)")>  _
	Public Property FirstName() As String
		Get
			Return Me._FirstName
		End Get
		Set
			If (String.Equals(Me._FirstName, value) = false) Then
				Me.OnFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._FirstName = value
				Me.SendPropertyChanged("FirstName")
				Me.OnFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LastName", DbType:="NVarChar(255)")>  _
	Public Property LastName() As String
		Get
			Return Me._LastName
		End Get
		Set
			If (String.Equals(Me._LastName, value) = false) Then
				Me.OnLastNameChanging(value)
				Me.SendPropertyChanging
				Me._LastName = value
				Me.SendPropertyChanged("LastName")
				Me.OnLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Mobile", DbType:="NVarChar(255)")>  _
	Public Property Mobile() As String
		Get
			Return Me._Mobile
		End Get
		Set
			If (String.Equals(Me._Mobile, value) = false) Then
				Me.OnMobileChanging(value)
				Me.SendPropertyChanging
				Me._Mobile = value
				Me.SendPropertyChanged("Mobile")
				Me.OnMobileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(500)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="Money")>  _
	Public Property Amount() As System.Nullable(Of Decimal)
		Get
			Return Me._Amount
		End Get
		Set
			If (Me._Amount.Equals(value) = false) Then
				Me.OnAmountChanging(value)
				Me.SendPropertyChanging
				Me._Amount = value
				Me.SendPropertyChanged("Amount")
				Me.OnAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MID", DbType:="BigInt")>  _
	Public Property MID() As System.Nullable(Of Long)
		Get
			Return Me._MID
		End Get
		Set
			If (Me._MID.Equals(value) = false) Then
				Me.OnMIDChanging(value)
				Me.SendPropertyChanging
				Me._MID = value
				Me.SendPropertyChanged("MID")
				Me.OnMIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_URL", DbType:="NVarChar(1000)")>  _
	Public Property URL() As String
		Get
			Return Me._URL
		End Get
		Set
			If (String.Equals(Me._URL, value) = false) Then
				Me.OnURLChanging(value)
				Me.SendPropertyChanging
				Me._URL = value
				Me.SendPropertyChanged("URL")
				Me.OnURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DisplayName", DbType:="NVarChar(255)")>  _
	Public Property DisplayName() As String
		Get
			Return Me._DisplayName
		End Get
		Set
			If (String.Equals(Me._DisplayName, value) = false) Then
				Me.OnDisplayNameChanging(value)
				Me.SendPropertyChanging
				Me._DisplayName = value
				Me.SendPropertyChanged("DisplayName")
				Me.OnDisplayNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DebitOrderReference", DbType:="NVarChar(255)")>  _
	Public Property DebitOrderReference() As String
		Get
			Return Me._DebitOrderReference
		End Get
		Set
			If (String.Equals(Me._DebitOrderReference, value) = false) Then
				Me.OnDebitOrderReferenceChanging(value)
				Me.SendPropertyChanging
				Me._DebitOrderReference = value
				Me.SendPropertyChanged("DebitOrderReference")
				Me.OnDebitOrderReferenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillingFirstName", DbType:="NVarChar(255)")>  _
	Public Property BillingFirstName() As String
		Get
			Return Me._BillingFirstName
		End Get
		Set
			If (String.Equals(Me._BillingFirstName, value) = false) Then
				Me.OnBillingFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._BillingFirstName = value
				Me.SendPropertyChanged("BillingFirstName")
				Me.OnBillingFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryLastName", DbType:="NVarChar(255)")>  _
	Public Property PrimaryLastName() As String
		Get
			Return Me._PrimaryLastName
		End Get
		Set
			If (String.Equals(Me._PrimaryLastName, value) = false) Then
				Me.OnPrimaryLastNameChanging(value)
				Me.SendPropertyChanging
				Me._PrimaryLastName = value
				Me.SendPropertyChanged("PrimaryLastName")
				Me.OnPrimaryLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryEmail", DbType:="NVarChar(255)")>  _
	Public Property PrimaryEmail() As String
		Get
			Return Me._PrimaryEmail
		End Get
		Set
			If (String.Equals(Me._PrimaryEmail, value) = false) Then
				Me.OnPrimaryEmailChanging(value)
				Me.SendPropertyChanging
				Me._PrimaryEmail = value
				Me.SendPropertyChanged("PrimaryEmail")
				Me.OnPrimaryEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EFTDeviceSupplier", DbType:="NVarChar(255)")>  _
	Public Property EFTDeviceSupplier() As String
		Get
			Return Me._EFTDeviceSupplier
		End Get
		Set
			If (String.Equals(Me._EFTDeviceSupplier, value) = false) Then
				Me.OnEFTDeviceSupplierChanging(value)
				Me.SendPropertyChanging
				Me._EFTDeviceSupplier = value
				Me.SendPropertyChanged("EFTDeviceSupplier")
				Me.OnEFTDeviceSupplierChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillingLastName", DbType:="NVarChar(255)")>  _
	Public Property BillingLastName() As String
		Get
			Return Me._BillingLastName
		End Get
		Set
			If (String.Equals(Me._BillingLastName, value) = false) Then
				Me.OnBillingLastNameChanging(value)
				Me.SendPropertyChanging
				Me._BillingLastName = value
				Me.SendPropertyChanged("BillingLastName")
				Me.OnBillingLastNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillingMobile", DbType:="NVarChar(255)")>  _
	Public Property BillingMobile() As String
		Get
			Return Me._BillingMobile
		End Get
		Set
			If (String.Equals(Me._BillingMobile, value) = false) Then
				Me.OnBillingMobileChanging(value)
				Me.SendPropertyChanging
				Me._BillingMobile = value
				Me.SendPropertyChanged("BillingMobile")
				Me.OnBillingMobileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PBLSerialNumber", DbType:="NVarChar(255)")>  _
	Public Property PBLSerialNumber() As String
		Get
			Return Me._PBLSerialNumber
		End Get
		Set
			If (String.Equals(Me._PBLSerialNumber, value) = false) Then
				Me.OnPBLSerialNumberChanging(value)
				Me.SendPropertyChanging
				Me._PBLSerialNumber = value
				Me.SendPropertyChanged("PBLSerialNumber")
				Me.OnPBLSerialNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EFTVASLayerSerialNumber", DbType:="NVarChar(255)")>  _
	Public Property EFTVASLayerSerialNumber() As String
		Get
			Return Me._EFTVASLayerSerialNumber
		End Get
		Set
			If (String.Equals(Me._EFTVASLayerSerialNumber, value) = false) Then
				Me.OnEFTVASLayerSerialNumberChanging(value)
				Me.SendPropertyChanging
				Me._EFTVASLayerSerialNumber = value
				Me.SendPropertyChanged("EFTVASLayerSerialNumber")
				Me.OnEFTVASLayerSerialNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalTrustees", DbType:="Int")>  _
	Public Property TotalTrustees() As System.Nullable(Of Integer)
		Get
			Return Me._TotalTrustees
		End Get
		Set
			If (Me._TotalTrustees.Equals(value) = false) Then
				Me.OnTotalTrusteesChanging(value)
				Me.SendPropertyChanging
				Me._TotalTrustees = value
				Me.SendPropertyChanged("TotalTrustees")
				Me.OnTotalTrusteesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YearsInBusiness", DbType:="Int")>  _
	Public Property YearsInBusiness() As System.Nullable(Of Integer)
		Get
			Return Me._YearsInBusiness
		End Get
		Set
			If (Me._YearsInBusiness.Equals(value) = false) Then
				Me.OnYearsInBusinessChanging(value)
				Me.SendPropertyChanging
				Me._YearsInBusiness = value
				Me.SendPropertyChanged("YearsInBusiness")
				Me.OnYearsInBusinessChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MothsInBusiness", DbType:="Int")>  _
	Public Property MothsInBusiness() As System.Nullable(Of Integer)
		Get
			Return Me._MothsInBusiness
		End Get
		Set
			If (Me._MothsInBusiness.Equals(value) = false) Then
				Me.OnMothsInBusinessChanging(value)
				Me.SendPropertyChanging
				Me._MothsInBusiness = value
				Me.SendPropertyChanged("MothsInBusiness")
				Me.OnMothsInBusinessChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EFTPOSPeriod", DbType:="Int")>  _
	Public Property EFTPOSPeriod() As System.Nullable(Of Integer)
		Get
			Return Me._EFTPOSPeriod
		End Get
		Set
			If (Me._EFTPOSPeriod.Equals(value) = false) Then
				Me.OnEFTPOSPeriodChanging(value)
				Me.SendPropertyChanging
				Me._EFTPOSPeriod = value
				Me.SendPropertyChanged("EFTPOSPeriod")
				Me.OnEFTPOSPeriodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Term1", DbType:="Int")>  _
	Public Property Term1() As System.Nullable(Of Integer)
		Get
			Return Me._Term1
		End Get
		Set
			If (Me._Term1.Equals(value) = false) Then
				Me.OnTerm1Changing(value)
				Me.SendPropertyChanging
				Me._Term1 = value
				Me.SendPropertyChanged("Term1")
				Me.OnTerm1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Term2", DbType:="Int")>  _
	Public Property Term2() As System.Nullable(Of Integer)
		Get
			Return Me._Term2
		End Get
		Set
			If (Me._Term2.Equals(value) = false) Then
				Me.OnTerm2Changing(value)
				Me.SendPropertyChanging
				Me._Term2 = value
				Me.SendPropertyChanged("Term2")
				Me.OnTerm2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Term3", DbType:="Int")>  _
	Public Property Term3() As System.Nullable(Of Integer)
		Get
			Return Me._Term3
		End Get
		Set
			If (Me._Term3.Equals(value) = false) Then
				Me.OnTerm3Changing(value)
				Me.SendPropertyChanging
				Me._Term3 = value
				Me.SendPropertyChanged("Term3")
				Me.OnTerm3Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Term4", DbType:="Int")>  _
	Public Property Term4() As System.Nullable(Of Integer)
		Get
			Return Me._Term4
		End Get
		Set
			If (Me._Term4.Equals(value) = false) Then
				Me.OnTerm4Changing(value)
				Me.SendPropertyChanging
				Me._Term4 = value
				Me.SendPropertyChanged("Term4")
				Me.OnTerm4Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Term5", DbType:="Int")>  _
	Public Property Term5() As System.Nullable(Of Integer)
		Get
			Return Me._Term5
		End Get
		Set
			If (Me._Term5.Equals(value) = false) Then
				Me.OnTerm5Changing(value)
				Me.SendPropertyChanging
				Me._Term5 = value
				Me.SendPropertyChanged("Term5")
				Me.OnTerm5Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Term6", DbType:="Int")>  _
	Public Property Term6() As System.Nullable(Of Integer)
		Get
			Return Me._Term6
		End Get
		Set
			If (Me._Term6.Equals(value) = false) Then
				Me.OnTerm6Changing(value)
				Me.SendPropertyChanging
				Me._Term6 = value
				Me.SendPropertyChanged("Term6")
				Me.OnTerm6Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Term7", DbType:="Int")>  _
	Public Property Term7() As System.Nullable(Of Integer)
		Get
			Return Me._Term7
		End Get
		Set
			If (Me._Term7.Equals(value) = false) Then
				Me.OnTerm7Changing(value)
				Me.SendPropertyChanging
				Me._Term7 = value
				Me.SendPropertyChanged("Term7")
				Me.OnTerm7Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Term8", DbType:="NVarChar(255)")>  _
	Public Property Term8() As String
		Get
			Return Me._Term8
		End Get
		Set
			If (String.Equals(Me._Term8, value) = false) Then
				Me.OnTerm8Changing(value)
				Me.SendPropertyChanging
				Me._Term8 = value
				Me.SendPropertyChanged("Term8")
				Me.OnTerm8Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Term9", DbType:="NVarChar(255)")>  _
	Public Property Term9() As String
		Get
			Return Me._Term9
		End Get
		Set
			If (String.Equals(Me._Term9, value) = false) Then
				Me.OnTerm9Changing(value)
				Me.SendPropertyChanging
				Me._Term9 = value
				Me.SendPropertyChanged("Term9")
				Me.OnTerm9Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Term10", DbType:="Int")>  _
	Public Property Term10() As System.Nullable(Of Integer)
		Get
			Return Me._Term10
		End Get
		Set
			If (Me._Term10.Equals(value) = false) Then
				Me.OnTerm10Changing(value)
				Me.SendPropertyChanging
				Me._Term10 = value
				Me.SendPropertyChanged("Term10")
				Me.OnTerm10Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NonEFTDevicePeriod", DbType:="Int")>  _
	Public Property NonEFTDevicePeriod() As System.Nullable(Of Integer)
		Get
			Return Me._NonEFTDevicePeriod
		End Get
		Set
			If (Me._NonEFTDevicePeriod.Equals(value) = false) Then
				Me.OnNonEFTDevicePeriodChanging(value)
				Me.SendPropertyChanging
				Me._NonEFTDevicePeriod = value
				Me.SendPropertyChanged("NonEFTDevicePeriod")
				Me.OnNonEFTDevicePeriodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LayByPeriod", DbType:="Int")>  _
	Public Property LayByPeriod() As System.Nullable(Of Integer)
		Get
			Return Me._LayByPeriod
		End Get
		Set
			If (Me._LayByPeriod.Equals(value) = false) Then
				Me.OnLayByPeriodChanging(value)
				Me.SendPropertyChanging
				Me._LayByPeriod = value
				Me.SendPropertyChanged("LayByPeriod")
				Me.OnLayByPeriodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PBLMPeriod", DbType:="Int")>  _
	Public Property PBLMPeriod() As System.Nullable(Of Integer)
		Get
			Return Me._PBLMPeriod
		End Get
		Set
			If (Me._PBLMPeriod.Equals(value) = false) Then
				Me.OnPBLMPeriodChanging(value)
				Me.SendPropertyChanging
				Me._PBLMPeriod = value
				Me.SendPropertyChanged("PBLMPeriod")
				Me.OnPBLMPeriodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantCommission", DbType:="Money")>  _
	Public Property MerchantCommission() As System.Nullable(Of Decimal)
		Get
			Return Me._MerchantCommission
		End Get
		Set
			If (Me._MerchantCommission.Equals(value) = false) Then
				Me.OnMerchantCommissionChanging(value)
				Me.SendPropertyChanging
				Me._MerchantCommission = value
				Me.SendPropertyChanged("MerchantCommission")
				Me.OnMerchantCommissionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantLaybyDeposit", DbType:="Money")>  _
	Public Property MerchantLaybyDeposit() As System.Nullable(Of Decimal)
		Get
			Return Me._MerchantLaybyDeposit
		End Get
		Set
			If (Me._MerchantLaybyDeposit.Equals(value) = false) Then
				Me.OnMerchantLaybyDepositChanging(value)
				Me.SendPropertyChanging
				Me._MerchantLaybyDeposit = value
				Me.SendPropertyChanged("MerchantLaybyDeposit")
				Me.OnMerchantLaybyDepositChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PBLMFee", DbType:="Money")>  _
	Public Property PBLMFee() As System.Nullable(Of Decimal)
		Get
			Return Me._PBLMFee
		End Get
		Set
			If (Me._PBLMFee.Equals(value) = false) Then
				Me.OnPBLMFeeChanging(value)
				Me.SendPropertyChanging
				Me._PBLMFee = value
				Me.SendPropertyChanged("PBLMFee")
				Me.OnPBLMFeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LBMFee", DbType:="Money")>  _
	Public Property LBMFee() As System.Nullable(Of Decimal)
		Get
			Return Me._LBMFee
		End Get
		Set
			If (Me._LBMFee.Equals(value) = false) Then
				Me.OnLBMFeeChanging(value)
				Me.SendPropertyChanging
				Me._LBMFee = value
				Me.SendPropertyChanged("LBMFee")
				Me.OnLBMFeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivationDate", DbType:="DateTime")>  _
	Public Property ActivationDate() As System.Nullable(Of Date)
		Get
			Return Me._ActivationDate
		End Get
		Set
			If (Me._ActivationDate.Equals(value) = false) Then
				Me.OnActivationDateChanging(value)
				Me.SendPropertyChanging
				Me._ActivationDate = value
				Me.SendPropertyChanged("ActivationDate")
				Me.OnActivationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivationAmount", DbType:="Money")>  _
	Public Property ActivationAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._ActivationAmount
		End Get
		Set
			If (Me._ActivationAmount.Equals(value) = false) Then
				Me.OnActivationAmountChanging(value)
				Me.SendPropertyChanging
				Me._ActivationAmount = value
				Me.SendPropertyChanged("ActivationAmount")
				Me.OnActivationAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDate", DbType:="DateTime")>  _
	Public Property ApplicationDate() As System.Nullable(Of Date)
		Get
			Return Me._ApplicationDate
		End Get
		Set
			If (Me._ApplicationDate.Equals(value) = false) Then
				Me.OnApplicationDateChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationDate = value
				Me.SendPropertyChanged("ApplicationDate")
				Me.OnApplicationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LayByDate", DbType:="DateTime")>  _
	Public Property LayByDate() As System.Nullable(Of Date)
		Get
			Return Me._LayByDate
		End Get
		Set
			If (Me._LayByDate.Equals(value) = false) Then
				Me.OnLayByDateChanging(value)
				Me.SendPropertyChanging
				Me._LayByDate = value
				Me.SendPropertyChanged("LayByDate")
				Me.OnLayByDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EFTPOSDate", DbType:="DateTime")>  _
	Public Property EFTPOSDate() As System.Nullable(Of Date)
		Get
			Return Me._EFTPOSDate
		End Get
		Set
			If (Me._EFTPOSDate.Equals(value) = false) Then
				Me.OnEFTPOSDateChanging(value)
				Me.SendPropertyChanging
				Me._EFTPOSDate = value
				Me.SendPropertyChanged("EFTPOSDate")
				Me.OnEFTPOSDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NonEFTDevuceDate", DbType:="DateTime")>  _
	Public Property NonEFTDevuceDate() As System.Nullable(Of Date)
		Get
			Return Me._NonEFTDevuceDate
		End Get
		Set
			If (Me._NonEFTDevuceDate.Equals(value) = false) Then
				Me.OnNonEFTDevuceDateChanging(value)
				Me.SendPropertyChanging
				Me._NonEFTDevuceDate = value
				Me.SendPropertyChanged("NonEFTDevuceDate")
				Me.OnNonEFTDevuceDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PBLMDate", DbType:="DateTime")>  _
	Public Property PBLMDate() As System.Nullable(Of Date)
		Get
			Return Me._PBLMDate
		End Get
		Set
			If (Me._PBLMDate.Equals(value) = false) Then
				Me.OnPBLMDateChanging(value)
				Me.SendPropertyChanging
				Me._PBLMDate = value
				Me.SendPropertyChanged("PBLMDate")
				Me.OnPBLMDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivationFee", DbType:="Bit")>  _
	Public Property ActivationFee() As System.Nullable(Of Boolean)
		Get
			Return Me._ActivationFee
		End Get
		Set
			If (Me._ActivationFee.Equals(value) = false) Then
				Me.OnActivationFeeChanging(value)
				Me.SendPropertyChanging
				Me._ActivationFee = value
				Me.SendPropertyChanged("ActivationFee")
				Me.OnActivationFeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsTrusteeJuristicPerson", DbType:="Bit")>  _
	Public Property IsTrusteeJuristicPerson() As System.Nullable(Of Boolean)
		Get
			Return Me._IsTrusteeJuristicPerson
		End Get
		Set
			If (Me._IsTrusteeJuristicPerson.Equals(value) = false) Then
				Me.OnIsTrusteeJuristicPersonChanging(value)
				Me.SendPropertyChanging
				Me._IsTrusteeJuristicPerson = value
				Me.SendPropertyChanged("IsTrusteeJuristicPerson")
				Me.OnIsTrusteeJuristicPersonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsPostalDifferent", DbType:="Bit")>  _
	Public Property IsPostalDifferent() As System.Nullable(Of Boolean)
		Get
			Return Me._IsPostalDifferent
		End Get
		Set
			If (Me._IsPostalDifferent.Equals(value) = false) Then
				Me.OnIsPostalDifferentChanging(value)
				Me.SendPropertyChanging
				Me._IsPostalDifferent = value
				Me.SendPropertyChanged("IsPostalDifferent")
				Me.OnIsPostalDifferentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentMerchantBankDetails", DbType:="Bit")>  _
	Public Property ParentMerchantBankDetails() As System.Nullable(Of Boolean)
		Get
			Return Me._ParentMerchantBankDetails
		End Get
		Set
			If (Me._ParentMerchantBankDetails.Equals(value) = false) Then
				Me.OnParentMerchantBankDetailsChanging(value)
				Me.SendPropertyChanging
				Me._ParentMerchantBankDetails = value
				Me.SendPropertyChanged("ParentMerchantBankDetails")
				Me.OnParentMerchantBankDetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentMerchantID", DbType:="BigInt")>  _
	Public Property ParentMerchantID() As System.Nullable(Of Long)
		Get
			Return Me._ParentMerchantID
		End Get
		Set
			If (Me._ParentMerchantID.Equals(value) = false) Then
				Me.OnParentMerchantIDChanging(value)
				Me.SendPropertyChanging
				Me._ParentMerchantID = value
				Me.SendPropertyChanged("ParentMerchantID")
				Me.OnParentMerchantIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentMerchant", DbType:="NVarChar(50)")>  _
	Public Property ParentMerchant() As String
		Get
			Return Me._ParentMerchant
		End Get
		Set
			If (String.Equals(Me._ParentMerchant, value) = false) Then
				Me.OnParentMerchantChanging(value)
				Me.SendPropertyChanging
				Me._ParentMerchant = value
				Me.SendPropertyChanged("ParentMerchant")
				Me.OnParentMerchantChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesChannel", DbType:="NVarChar(500)")>  _
	Public Property SalesChannel() As String
		Get
			Return Me._SalesChannel
		End Get
		Set
			If (String.Equals(Me._SalesChannel, value) = false) Then
				Me.OnSalesChannelChanging(value)
				Me.SendPropertyChanging
				Me._SalesChannel = value
				Me.SendPropertyChanged("SalesChannel")
				Me.OnSalesChannelChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Agent", DbType:="NVarChar(500)")>  _
	Public Property Agent() As String
		Get
			Return Me._Agent
		End Get
		Set
			If (String.Equals(Me._Agent, value) = false) Then
				Me.OnAgentChanging(value)
				Me.SendPropertyChanging
				Me._Agent = value
				Me.SendPropertyChanged("Agent")
				Me.OnAgentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantLogo", DbType:="Image", CanBeNull:=true, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property MerchantLogo() As System.Data.Linq.Binary
		Get
			Return Me._MerchantLogo
		End Get
		Set
			If (Object.Equals(Me._MerchantLogo, value) = false) Then
				Me.OnMerchantLogoChanging(value)
				Me.SendPropertyChanging
				Me._MerchantLogo = value
				Me.SendPropertyChanged("MerchantLogo")
				Me.OnMerchantLogoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="NVarChar(250)")>  _
	Public Property CreatedBy() As String
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (String.Equals(Me._CreatedBy, value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="NVarChar(255)")>  _
	Public Property UpdatedBy() As String
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (String.Equals(Me._UpdatedBy, value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(MAX)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Processed", DbType:="Bit")>  _
	Public Property Processed() As System.Nullable(Of Boolean)
		Get
			Return Me._Processed
		End Get
		Set
			If (Me._Processed.Equals(value) = false) Then
				Me.OnProcessedChanging(value)
				Me.SendPropertyChanging
				Me._Processed = value
				Me.SendPropertyChanged("Processed")
				Me.OnProcessedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Transferred", DbType:="Bit")>  _
	Public Property Transferred() As System.Nullable(Of Boolean)
		Get
			Return Me._Transferred
		End Get
		Set
			If (Me._Transferred.Equals(value) = false) Then
				Me.OnTransferredChanging(value)
				Me.SendPropertyChanging
				Me._Transferred = value
				Me.SendPropertyChanged("Transferred")
				Me.OnTransferredChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Industry")>  _
Partial Public Class Industry
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _Merchants As EntitySet(Of Merchant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Merchants = New EntitySet(Of Merchant)(AddressOf Me.attach_Merchants, AddressOf Me.detach_Merchants)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Industry_Merchant", Storage:="_Merchants", ThisKey:="ID", OtherKey:="IndustryID")>  _
	Public Property Merchants() As EntitySet(Of Merchant)
		Get
			Return Me._Merchants
		End Get
		Set
			Me._Merchants.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Merchants(ByVal entity As Merchant)
		Me.SendPropertyChanging
		entity.Industry = Me
	End Sub
	
	Private Sub detach_Merchants(ByVal entity As Merchant)
		Me.SendPropertyChanging
		entity.Industry = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Invoice")>  _
Partial Public Class Invoice
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _DateCreated As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _SubTotal As String
	
	Private _VAT As String
	
	Private _Total As String
	
	Private _DebitOrderFileID As System.Nullable(Of Long)
	
	Private _SubsNo As String
	
	Private _ActNo As String
	
	Private _SubsText As String
	
	Private _ActivationText As String
	
	Private _SubsAmount As String
	
	Private _ActivationAmount As String
	
	Private _POBox As String
	
	Private _City As String
	
	Private _PostCode As String
	
	Private _MerchantName As String
	
	Private _DebitOrderHistoryID As System.Nullable(Of Long)
	
	Private _MerchantID As System.Nullable(Of Long)
	
	Private _ApplicationID As System.Nullable(Of Long)
	
	Private _Generated As System.Nullable(Of Boolean)
	
	Private _VatNo As String
	
	Private _DateGenerated As String
	
	Private _DebitOrderFile As EntityRef(Of DebitOrderFile)
	
	Private _DebitOrderHistory As EntityRef(Of DebitOrderHistory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnDateCreatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateCreatedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnSubTotalChanging(value As String)
    End Sub
    Partial Private Sub OnSubTotalChanged()
    End Sub
    Partial Private Sub OnVATChanging(value As String)
    End Sub
    Partial Private Sub OnVATChanged()
    End Sub
    Partial Private Sub OnTotalChanging(value As String)
    End Sub
    Partial Private Sub OnTotalChanged()
    End Sub
    Partial Private Sub OnDebitOrderFileIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnDebitOrderFileIDChanged()
    End Sub
    Partial Private Sub OnSubsNoChanging(value As String)
    End Sub
    Partial Private Sub OnSubsNoChanged()
    End Sub
    Partial Private Sub OnActNoChanging(value As String)
    End Sub
    Partial Private Sub OnActNoChanged()
    End Sub
    Partial Private Sub OnSubsTextChanging(value As String)
    End Sub
    Partial Private Sub OnSubsTextChanged()
    End Sub
    Partial Private Sub OnActivationTextChanging(value As String)
    End Sub
    Partial Private Sub OnActivationTextChanged()
    End Sub
    Partial Private Sub OnSubsAmountChanging(value As String)
    End Sub
    Partial Private Sub OnSubsAmountChanged()
    End Sub
    Partial Private Sub OnActivationAmountChanging(value As String)
    End Sub
    Partial Private Sub OnActivationAmountChanged()
    End Sub
    Partial Private Sub OnPOBoxChanging(value As String)
    End Sub
    Partial Private Sub OnPOBoxChanged()
    End Sub
    Partial Private Sub OnCityChanging(value As String)
    End Sub
    Partial Private Sub OnCityChanged()
    End Sub
    Partial Private Sub OnPostCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPostCodeChanged()
    End Sub
    Partial Private Sub OnMerchantNameChanging(value As String)
    End Sub
    Partial Private Sub OnMerchantNameChanged()
    End Sub
    Partial Private Sub OnDebitOrderHistoryIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnDebitOrderHistoryIDChanged()
    End Sub
    Partial Private Sub OnMerchantIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMerchantIDChanged()
    End Sub
    Partial Private Sub OnApplicationIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnApplicationIDChanged()
    End Sub
    Partial Private Sub OnGeneratedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnGeneratedChanged()
    End Sub
    Partial Private Sub OnVatNoChanging(value As String)
    End Sub
    Partial Private Sub OnVatNoChanged()
    End Sub
    Partial Private Sub OnDateGeneratedChanging(value As String)
    End Sub
    Partial Private Sub OnDateGeneratedChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DebitOrderFile = CType(Nothing, EntityRef(Of DebitOrderFile))
		Me._DebitOrderHistory = CType(Nothing, EntityRef(Of DebitOrderHistory))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateCreated", DbType:="DateTime")>  _
	Public Property DateCreated() As System.Nullable(Of Date)
		Get
			Return Me._DateCreated
		End Get
		Set
			If (Me._DateCreated.Equals(value) = false) Then
				Me.OnDateCreatedChanging(value)
				Me.SendPropertyChanging
				Me._DateCreated = value
				Me.SendPropertyChanged("DateCreated")
				Me.OnDateCreatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubTotal", DbType:="NVarChar(50)")>  _
	Public Property SubTotal() As String
		Get
			Return Me._SubTotal
		End Get
		Set
			If (String.Equals(Me._SubTotal, value) = false) Then
				Me.OnSubTotalChanging(value)
				Me.SendPropertyChanging
				Me._SubTotal = value
				Me.SendPropertyChanged("SubTotal")
				Me.OnSubTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VAT", DbType:="NVarChar(50)")>  _
	Public Property VAT() As String
		Get
			Return Me._VAT
		End Get
		Set
			If (String.Equals(Me._VAT, value) = false) Then
				Me.OnVATChanging(value)
				Me.SendPropertyChanging
				Me._VAT = value
				Me.SendPropertyChanged("VAT")
				Me.OnVATChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Total", DbType:="NVarChar(50)")>  _
	Public Property Total() As String
		Get
			Return Me._Total
		End Get
		Set
			If (String.Equals(Me._Total, value) = false) Then
				Me.OnTotalChanging(value)
				Me.SendPropertyChanging
				Me._Total = value
				Me.SendPropertyChanged("Total")
				Me.OnTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DebitOrderFileID", DbType:="BigInt")>  _
	Public Property DebitOrderFileID() As System.Nullable(Of Long)
		Get
			Return Me._DebitOrderFileID
		End Get
		Set
			If (Me._DebitOrderFileID.Equals(value) = false) Then
				If Me._DebitOrderFile.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDebitOrderFileIDChanging(value)
				Me.SendPropertyChanging
				Me._DebitOrderFileID = value
				Me.SendPropertyChanged("DebitOrderFileID")
				Me.OnDebitOrderFileIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubsNo", DbType:="NVarChar(50)")>  _
	Public Property SubsNo() As String
		Get
			Return Me._SubsNo
		End Get
		Set
			If (String.Equals(Me._SubsNo, value) = false) Then
				Me.OnSubsNoChanging(value)
				Me.SendPropertyChanging
				Me._SubsNo = value
				Me.SendPropertyChanged("SubsNo")
				Me.OnSubsNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActNo", DbType:="NVarChar(50)")>  _
	Public Property ActNo() As String
		Get
			Return Me._ActNo
		End Get
		Set
			If (String.Equals(Me._ActNo, value) = false) Then
				Me.OnActNoChanging(value)
				Me.SendPropertyChanging
				Me._ActNo = value
				Me.SendPropertyChanged("ActNo")
				Me.OnActNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubsText", DbType:="NVarChar(500)")>  _
	Public Property SubsText() As String
		Get
			Return Me._SubsText
		End Get
		Set
			If (String.Equals(Me._SubsText, value) = false) Then
				Me.OnSubsTextChanging(value)
				Me.SendPropertyChanging
				Me._SubsText = value
				Me.SendPropertyChanged("SubsText")
				Me.OnSubsTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivationText", DbType:="NVarChar(500)")>  _
	Public Property ActivationText() As String
		Get
			Return Me._ActivationText
		End Get
		Set
			If (String.Equals(Me._ActivationText, value) = false) Then
				Me.OnActivationTextChanging(value)
				Me.SendPropertyChanging
				Me._ActivationText = value
				Me.SendPropertyChanged("ActivationText")
				Me.OnActivationTextChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SubsAmount", DbType:="NVarChar(50)")>  _
	Public Property SubsAmount() As String
		Get
			Return Me._SubsAmount
		End Get
		Set
			If (String.Equals(Me._SubsAmount, value) = false) Then
				Me.OnSubsAmountChanging(value)
				Me.SendPropertyChanging
				Me._SubsAmount = value
				Me.SendPropertyChanged("SubsAmount")
				Me.OnSubsAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivationAmount", DbType:="NVarChar(50)")>  _
	Public Property ActivationAmount() As String
		Get
			Return Me._ActivationAmount
		End Get
		Set
			If (String.Equals(Me._ActivationAmount, value) = false) Then
				Me.OnActivationAmountChanging(value)
				Me.SendPropertyChanging
				Me._ActivationAmount = value
				Me.SendPropertyChanged("ActivationAmount")
				Me.OnActivationAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_POBox", DbType:="NVarChar(500)")>  _
	Public Property POBox() As String
		Get
			Return Me._POBox
		End Get
		Set
			If (String.Equals(Me._POBox, value) = false) Then
				Me.OnPOBoxChanging(value)
				Me.SendPropertyChanging
				Me._POBox = value
				Me.SendPropertyChanged("POBox")
				Me.OnPOBoxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_City", DbType:="NVarChar(500)")>  _
	Public Property City() As String
		Get
			Return Me._City
		End Get
		Set
			If (String.Equals(Me._City, value) = false) Then
				Me.OnCityChanging(value)
				Me.SendPropertyChanging
				Me._City = value
				Me.SendPropertyChanged("City")
				Me.OnCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostCode", DbType:="NVarChar(50)")>  _
	Public Property PostCode() As String
		Get
			Return Me._PostCode
		End Get
		Set
			If (String.Equals(Me._PostCode, value) = false) Then
				Me.OnPostCodeChanging(value)
				Me.SendPropertyChanging
				Me._PostCode = value
				Me.SendPropertyChanged("PostCode")
				Me.OnPostCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantName", DbType:="NVarChar(500)")>  _
	Public Property MerchantName() As String
		Get
			Return Me._MerchantName
		End Get
		Set
			If (String.Equals(Me._MerchantName, value) = false) Then
				Me.OnMerchantNameChanging(value)
				Me.SendPropertyChanging
				Me._MerchantName = value
				Me.SendPropertyChanged("MerchantName")
				Me.OnMerchantNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DebitOrderHistoryID", DbType:="BigInt")>  _
	Public Property DebitOrderHistoryID() As System.Nullable(Of Long)
		Get
			Return Me._DebitOrderHistoryID
		End Get
		Set
			If (Me._DebitOrderHistoryID.Equals(value) = false) Then
				If Me._DebitOrderHistory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDebitOrderHistoryIDChanging(value)
				Me.SendPropertyChanging
				Me._DebitOrderHistoryID = value
				Me.SendPropertyChanged("DebitOrderHistoryID")
				Me.OnDebitOrderHistoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantID", DbType:="BigInt")>  _
	Public Property MerchantID() As System.Nullable(Of Long)
		Get
			Return Me._MerchantID
		End Get
		Set
			If (Me._MerchantID.Equals(value) = false) Then
				Me.OnMerchantIDChanging(value)
				Me.SendPropertyChanging
				Me._MerchantID = value
				Me.SendPropertyChanged("MerchantID")
				Me.OnMerchantIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="BigInt")>  _
	Public Property ApplicationID() As System.Nullable(Of Long)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me.OnApplicationIDChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationID = value
				Me.SendPropertyChanged("ApplicationID")
				Me.OnApplicationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Generated", DbType:="Bit")>  _
	Public Property Generated() As System.Nullable(Of Boolean)
		Get
			Return Me._Generated
		End Get
		Set
			If (Me._Generated.Equals(value) = false) Then
				Me.OnGeneratedChanging(value)
				Me.SendPropertyChanging
				Me._Generated = value
				Me.SendPropertyChanged("Generated")
				Me.OnGeneratedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VatNo", DbType:="NVarChar(50)")>  _
	Public Property VatNo() As String
		Get
			Return Me._VatNo
		End Get
		Set
			If (String.Equals(Me._VatNo, value) = false) Then
				Me.OnVatNoChanging(value)
				Me.SendPropertyChanging
				Me._VatNo = value
				Me.SendPropertyChanged("VatNo")
				Me.OnVatNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateGenerated", DbType:="NVarChar(50)")>  _
	Public Property DateGenerated() As String
		Get
			Return Me._DateGenerated
		End Get
		Set
			If (String.Equals(Me._DateGenerated, value) = false) Then
				Me.OnDateGeneratedChanging(value)
				Me.SendPropertyChanging
				Me._DateGenerated = value
				Me.SendPropertyChanged("DateGenerated")
				Me.OnDateGeneratedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DebitOrderFile_Invoice", Storage:="_DebitOrderFile", ThisKey:="DebitOrderFileID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property DebitOrderFile() As DebitOrderFile
		Get
			Return Me._DebitOrderFile.Entity
		End Get
		Set
			Dim previousValue As DebitOrderFile = Me._DebitOrderFile.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DebitOrderFile.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DebitOrderFile.Entity = Nothing
					previousValue.Invoices.Remove(Me)
				End If
				Me._DebitOrderFile.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Invoices.Add(Me)
					Me._DebitOrderFileID = value.ID
				Else
					Me._DebitOrderFileID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("DebitOrderFile")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="DebitOrderHistory_Invoice", Storage:="_DebitOrderHistory", ThisKey:="DebitOrderHistoryID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property DebitOrderHistory() As DebitOrderHistory
		Get
			Return Me._DebitOrderHistory.Entity
		End Get
		Set
			Dim previousValue As DebitOrderHistory = Me._DebitOrderHistory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._DebitOrderHistory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._DebitOrderHistory.Entity = Nothing
					previousValue.Invoices.Remove(Me)
				End If
				Me._DebitOrderHistory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Invoices.Add(Me)
					Me._DebitOrderHistoryID = value.ID
				Else
					Me._DebitOrderHistoryID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("DebitOrderHistory")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Merchant")>  _
Partial Public Class Merchant
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _Reference As String
	
	Private _ShortName As String
	
	Private _EnvironmentRepositoryID As System.Nullable(Of Long)
	
	Private _ParentMerchantID As System.Nullable(Of Long)
	
	Private _ChannelID As System.Nullable(Of Long)
	
	Private _AuthDirectoryID As System.Nullable(Of Long)
	
	Private _RegisteredNumber As String
	
	Private _AgentID As System.Nullable(Of Long)
	
	Private _SalesChannelID As System.Nullable(Of Long)
	
	Private _TypeOfBusinessID As System.Nullable(Of Long)
	
	Private _TypeOfBusinessOther As String
	
	Private _IndustryID As System.Nullable(Of Long)
	
	Private _Location As String
	
	Private _DefaultIDNo As String
	
	Private _DefaultMobile As String
	
	Private _DefaultAmount As System.Nullable(Of Decimal)
	
	Private _DefaultBank As System.Nullable(Of Integer)
	
	Private _DefaultOTP As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _NewMerchants As EntitySet(Of NewMerchant)
	
	Private _NewMerchants1 As EntitySet(Of NewMerchant)
	
	Private _ApplicationRepositories As EntitySet(Of ApplicationRepository)
	
	Private _CreditProviderMerchants As EntitySet(Of CreditProviderMerchant)
	
	Private _DebitOrders As EntitySet(Of DebitOrder)
	
	Private _DebitOrderHistories As EntitySet(Of DebitOrderHistory)
	
	Private _EnvironmentRepositories As EntitySet(Of EnvironmentRepository)
	
	Private _Merchants As EntitySet(Of Merchant)
	
	Private _MerchantBankDetails As EntitySet(Of MerchantBankDetail)
	
	Private _MerchantDetails As EntitySet(Of MerchantDetail)
	
	Private _MerchantHistories As EntitySet(Of MerchantHistory)
	
	Private _MerchantProductProviders As EntitySet(Of MerchantProductProvider)
	
	Private _MerchantProductProviders1 As EntitySet(Of MerchantProductProvider)
	
	Private _MerchantTerminals As EntitySet(Of MerchantTerminal)
	
	Private _Products As EntitySet(Of Product)
	
	Private _Agent As EntityRef(Of Agent)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory1 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory2 As EntityRef(Of AuthDirectory)
	
	Private _EnvironmentRepository As EntityRef(Of EnvironmentRepository)
	
	Private _Industry As EntityRef(Of Industry)
	
	Private _Merchant As EntityRef(Of Merchant)
	
	Private _SalesChannel As EntityRef(Of SalesChannel)
	
	Private _TypeOfBusiness As EntityRef(Of TypeOfBusiness)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnReferenceChanging(value As String)
    End Sub
    Partial Private Sub OnReferenceChanged()
    End Sub
    Partial Private Sub OnShortNameChanging(value As String)
    End Sub
    Partial Private Sub OnShortNameChanged()
    End Sub
    Partial Private Sub OnEnvironmentRepositoryIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnEnvironmentRepositoryIDChanged()
    End Sub
    Partial Private Sub OnParentMerchantIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnParentMerchantIDChanged()
    End Sub
    Partial Private Sub OnChannelIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnChannelIDChanged()
    End Sub
    Partial Private Sub OnAuthDirectoryIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnAuthDirectoryIDChanged()
    End Sub
    Partial Private Sub OnRegisteredNumberChanging(value As String)
    End Sub
    Partial Private Sub OnRegisteredNumberChanged()
    End Sub
    Partial Private Sub OnAgentIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnAgentIDChanged()
    End Sub
    Partial Private Sub OnSalesChannelIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnSalesChannelIDChanged()
    End Sub
    Partial Private Sub OnTypeOfBusinessIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnTypeOfBusinessIDChanged()
    End Sub
    Partial Private Sub OnTypeOfBusinessOtherChanging(value As String)
    End Sub
    Partial Private Sub OnTypeOfBusinessOtherChanged()
    End Sub
    Partial Private Sub OnIndustryIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnIndustryIDChanged()
    End Sub
    Partial Private Sub OnLocationChanging(value As String)
    End Sub
    Partial Private Sub OnLocationChanged()
    End Sub
    Partial Private Sub OnDefaultIDNoChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultIDNoChanged()
    End Sub
    Partial Private Sub OnDefaultMobileChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultMobileChanged()
    End Sub
    Partial Private Sub OnDefaultAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDefaultAmountChanged()
    End Sub
    Partial Private Sub OnDefaultBankChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDefaultBankChanged()
    End Sub
    Partial Private Sub OnDefaultOTPChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultOTPChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._NewMerchants = New EntitySet(Of NewMerchant)(AddressOf Me.attach_NewMerchants, AddressOf Me.detach_NewMerchants)
		Me._NewMerchants1 = New EntitySet(Of NewMerchant)(AddressOf Me.attach_NewMerchants1, AddressOf Me.detach_NewMerchants1)
		Me._ApplicationRepositories = New EntitySet(Of ApplicationRepository)(AddressOf Me.attach_ApplicationRepositories, AddressOf Me.detach_ApplicationRepositories)
		Me._CreditProviderMerchants = New EntitySet(Of CreditProviderMerchant)(AddressOf Me.attach_CreditProviderMerchants, AddressOf Me.detach_CreditProviderMerchants)
		Me._DebitOrders = New EntitySet(Of DebitOrder)(AddressOf Me.attach_DebitOrders, AddressOf Me.detach_DebitOrders)
		Me._DebitOrderHistories = New EntitySet(Of DebitOrderHistory)(AddressOf Me.attach_DebitOrderHistories, AddressOf Me.detach_DebitOrderHistories)
		Me._EnvironmentRepositories = New EntitySet(Of EnvironmentRepository)(AddressOf Me.attach_EnvironmentRepositories, AddressOf Me.detach_EnvironmentRepositories)
		Me._Merchants = New EntitySet(Of Merchant)(AddressOf Me.attach_Merchants, AddressOf Me.detach_Merchants)
		Me._MerchantBankDetails = New EntitySet(Of MerchantBankDetail)(AddressOf Me.attach_MerchantBankDetails, AddressOf Me.detach_MerchantBankDetails)
		Me._MerchantDetails = New EntitySet(Of MerchantDetail)(AddressOf Me.attach_MerchantDetails, AddressOf Me.detach_MerchantDetails)
		Me._MerchantHistories = New EntitySet(Of MerchantHistory)(AddressOf Me.attach_MerchantHistories, AddressOf Me.detach_MerchantHistories)
		Me._MerchantProductProviders = New EntitySet(Of MerchantProductProvider)(AddressOf Me.attach_MerchantProductProviders, AddressOf Me.detach_MerchantProductProviders)
		Me._MerchantProductProviders1 = New EntitySet(Of MerchantProductProvider)(AddressOf Me.attach_MerchantProductProviders1, AddressOf Me.detach_MerchantProductProviders1)
		Me._MerchantTerminals = New EntitySet(Of MerchantTerminal)(AddressOf Me.attach_MerchantTerminals, AddressOf Me.detach_MerchantTerminals)
		Me._Products = New EntitySet(Of Product)(AddressOf Me.attach_Products, AddressOf Me.detach_Products)
		Me._Agent = CType(Nothing, EntityRef(Of Agent))
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory1 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory2 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._EnvironmentRepository = CType(Nothing, EntityRef(Of EnvironmentRepository))
		Me._Industry = CType(Nothing, EntityRef(Of Industry))
		Me._Merchant = CType(Nothing, EntityRef(Of Merchant))
		Me._SalesChannel = CType(Nothing, EntityRef(Of SalesChannel))
		Me._TypeOfBusiness = CType(Nothing, EntityRef(Of TypeOfBusiness))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reference", DbType:="NVarChar(50)")>  _
	Public Property Reference() As String
		Get
			Return Me._Reference
		End Get
		Set
			If (String.Equals(Me._Reference, value) = false) Then
				Me.OnReferenceChanging(value)
				Me.SendPropertyChanging
				Me._Reference = value
				Me.SendPropertyChanged("Reference")
				Me.OnReferenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ShortName", DbType:="NVarChar(50)")>  _
	Public Property ShortName() As String
		Get
			Return Me._ShortName
		End Get
		Set
			If (String.Equals(Me._ShortName, value) = false) Then
				Me.OnShortNameChanging(value)
				Me.SendPropertyChanging
				Me._ShortName = value
				Me.SendPropertyChanged("ShortName")
				Me.OnShortNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnvironmentRepositoryID", DbType:="BigInt")>  _
	Public Property EnvironmentRepositoryID() As System.Nullable(Of Long)
		Get
			Return Me._EnvironmentRepositoryID
		End Get
		Set
			If (Me._EnvironmentRepositoryID.Equals(value) = false) Then
				If Me._EnvironmentRepository.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEnvironmentRepositoryIDChanging(value)
				Me.SendPropertyChanging
				Me._EnvironmentRepositoryID = value
				Me.SendPropertyChanged("EnvironmentRepositoryID")
				Me.OnEnvironmentRepositoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ParentMerchantID", DbType:="BigInt")>  _
	Public Property ParentMerchantID() As System.Nullable(Of Long)
		Get
			Return Me._ParentMerchantID
		End Get
		Set
			If (Me._ParentMerchantID.Equals(value) = false) Then
				If Me._Merchant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnParentMerchantIDChanging(value)
				Me.SendPropertyChanging
				Me._ParentMerchantID = value
				Me.SendPropertyChanged("ParentMerchantID")
				Me.OnParentMerchantIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChannelID", DbType:="BigInt")>  _
	Public Property ChannelID() As System.Nullable(Of Long)
		Get
			Return Me._ChannelID
		End Get
		Set
			If (Me._ChannelID.Equals(value) = false) Then
				Me.OnChannelIDChanging(value)
				Me.SendPropertyChanging
				Me._ChannelID = value
				Me.SendPropertyChanged("ChannelID")
				Me.OnChannelIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AuthDirectoryID", DbType:="BigInt")>  _
	Public Property AuthDirectoryID() As System.Nullable(Of Long)
		Get
			Return Me._AuthDirectoryID
		End Get
		Set
			If (Me._AuthDirectoryID.Equals(value) = false) Then
				If Me._AuthDirectory2.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAuthDirectoryIDChanging(value)
				Me.SendPropertyChanging
				Me._AuthDirectoryID = value
				Me.SendPropertyChanged("AuthDirectoryID")
				Me.OnAuthDirectoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RegisteredNumber", DbType:="NVarChar(50)")>  _
	Public Property RegisteredNumber() As String
		Get
			Return Me._RegisteredNumber
		End Get
		Set
			If (String.Equals(Me._RegisteredNumber, value) = false) Then
				Me.OnRegisteredNumberChanging(value)
				Me.SendPropertyChanging
				Me._RegisteredNumber = value
				Me.SendPropertyChanged("RegisteredNumber")
				Me.OnRegisteredNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AgentID", DbType:="BigInt")>  _
	Public Property AgentID() As System.Nullable(Of Long)
		Get
			Return Me._AgentID
		End Get
		Set
			If (Me._AgentID.Equals(value) = false) Then
				If Me._Agent.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAgentIDChanging(value)
				Me.SendPropertyChanging
				Me._AgentID = value
				Me.SendPropertyChanged("AgentID")
				Me.OnAgentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SalesChannelID", DbType:="BigInt")>  _
	Public Property SalesChannelID() As System.Nullable(Of Long)
		Get
			Return Me._SalesChannelID
		End Get
		Set
			If (Me._SalesChannelID.Equals(value) = false) Then
				If Me._SalesChannel.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSalesChannelIDChanging(value)
				Me.SendPropertyChanging
				Me._SalesChannelID = value
				Me.SendPropertyChanged("SalesChannelID")
				Me.OnSalesChannelIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeOfBusinessID", DbType:="BigInt")>  _
	Public Property TypeOfBusinessID() As System.Nullable(Of Long)
		Get
			Return Me._TypeOfBusinessID
		End Get
		Set
			If (Me._TypeOfBusinessID.Equals(value) = false) Then
				If Me._TypeOfBusiness.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTypeOfBusinessIDChanging(value)
				Me.SendPropertyChanging
				Me._TypeOfBusinessID = value
				Me.SendPropertyChanged("TypeOfBusinessID")
				Me.OnTypeOfBusinessIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeOfBusinessOther", DbType:="NChar(10)")>  _
	Public Property TypeOfBusinessOther() As String
		Get
			Return Me._TypeOfBusinessOther
		End Get
		Set
			If (String.Equals(Me._TypeOfBusinessOther, value) = false) Then
				Me.OnTypeOfBusinessOtherChanging(value)
				Me.SendPropertyChanging
				Me._TypeOfBusinessOther = value
				Me.SendPropertyChanged("TypeOfBusinessOther")
				Me.OnTypeOfBusinessOtherChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IndustryID", DbType:="BigInt")>  _
	Public Property IndustryID() As System.Nullable(Of Long)
		Get
			Return Me._IndustryID
		End Get
		Set
			If (Me._IndustryID.Equals(value) = false) Then
				If Me._Industry.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIndustryIDChanging(value)
				Me.SendPropertyChanging
				Me._IndustryID = value
				Me.SendPropertyChanged("IndustryID")
				Me.OnIndustryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Location", DbType:="NVarChar(250)")>  _
	Public Property Location() As String
		Get
			Return Me._Location
		End Get
		Set
			If (String.Equals(Me._Location, value) = false) Then
				Me.OnLocationChanging(value)
				Me.SendPropertyChanging
				Me._Location = value
				Me.SendPropertyChanged("Location")
				Me.OnLocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultIDNo", DbType:="NVarChar(50)")>  _
	Public Property DefaultIDNo() As String
		Get
			Return Me._DefaultIDNo
		End Get
		Set
			If (String.Equals(Me._DefaultIDNo, value) = false) Then
				Me.OnDefaultIDNoChanging(value)
				Me.SendPropertyChanging
				Me._DefaultIDNo = value
				Me.SendPropertyChanged("DefaultIDNo")
				Me.OnDefaultIDNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultMobile", DbType:="NVarChar(50)")>  _
	Public Property DefaultMobile() As String
		Get
			Return Me._DefaultMobile
		End Get
		Set
			If (String.Equals(Me._DefaultMobile, value) = false) Then
				Me.OnDefaultMobileChanging(value)
				Me.SendPropertyChanging
				Me._DefaultMobile = value
				Me.SendPropertyChanged("DefaultMobile")
				Me.OnDefaultMobileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultAmount", DbType:="Money")>  _
	Public Property DefaultAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._DefaultAmount
		End Get
		Set
			If (Me._DefaultAmount.Equals(value) = false) Then
				Me.OnDefaultAmountChanging(value)
				Me.SendPropertyChanging
				Me._DefaultAmount = value
				Me.SendPropertyChanged("DefaultAmount")
				Me.OnDefaultAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultBank", DbType:="Int")>  _
	Public Property DefaultBank() As System.Nullable(Of Integer)
		Get
			Return Me._DefaultBank
		End Get
		Set
			If (Me._DefaultBank.Equals(value) = false) Then
				Me.OnDefaultBankChanging(value)
				Me.SendPropertyChanging
				Me._DefaultBank = value
				Me.SendPropertyChanged("DefaultBank")
				Me.OnDefaultBankChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultOTP", DbType:="NVarChar(10)")>  _
	Public Property DefaultOTP() As String
		Get
			Return Me._DefaultOTP
		End Get
		Set
			If (String.Equals(Me._DefaultOTP, value) = false) Then
				Me.OnDefaultOTPChanging(value)
				Me.SendPropertyChanging
				Me._DefaultOTP = value
				Me.SendPropertyChanged("DefaultOTP")
				Me.OnDefaultOTPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				If Me._AuthDirectory1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_NewMerchant", Storage:="_NewMerchants", ThisKey:="ID", OtherKey:="MerchantId")>  _
	Public Property NewMerchants() As EntitySet(Of NewMerchant)
		Get
			Return Me._NewMerchants
		End Get
		Set
			Me._NewMerchants.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_NewMerchant1", Storage:="_NewMerchants1", ThisKey:="ID", OtherKey:="MerchantId")>  _
	Public Property NewMerchants1() As EntitySet(Of NewMerchant)
		Get
			Return Me._NewMerchants1
		End Get
		Set
			Me._NewMerchants1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_ApplicationRepository", Storage:="_ApplicationRepositories", ThisKey:="ID", OtherKey:="MerchantID")>  _
	Public Property ApplicationRepositories() As EntitySet(Of ApplicationRepository)
		Get
			Return Me._ApplicationRepositories
		End Get
		Set
			Me._ApplicationRepositories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_CreditProviderMerchant", Storage:="_CreditProviderMerchants", ThisKey:="ID", OtherKey:="MerchantID")>  _
	Public Property CreditProviderMerchants() As EntitySet(Of CreditProviderMerchant)
		Get
			Return Me._CreditProviderMerchants
		End Get
		Set
			Me._CreditProviderMerchants.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_DebitOrder", Storage:="_DebitOrders", ThisKey:="ID", OtherKey:="MerchantID")>  _
	Public Property DebitOrders() As EntitySet(Of DebitOrder)
		Get
			Return Me._DebitOrders
		End Get
		Set
			Me._DebitOrders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_DebitOrderHistory", Storage:="_DebitOrderHistories", ThisKey:="ID", OtherKey:="MerchantID")>  _
	Public Property DebitOrderHistories() As EntitySet(Of DebitOrderHistory)
		Get
			Return Me._DebitOrderHistories
		End Get
		Set
			Me._DebitOrderHistories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_EnvironmentRepository", Storage:="_EnvironmentRepositories", ThisKey:="ID", OtherKey:="MerchantID")>  _
	Public Property EnvironmentRepositories() As EntitySet(Of EnvironmentRepository)
		Get
			Return Me._EnvironmentRepositories
		End Get
		Set
			Me._EnvironmentRepositories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_Merchant", Storage:="_Merchants", ThisKey:="ID", OtherKey:="ParentMerchantID")>  _
	Public Property Merchants() As EntitySet(Of Merchant)
		Get
			Return Me._Merchants
		End Get
		Set
			Me._Merchants.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_MerchantBankDetail", Storage:="_MerchantBankDetails", ThisKey:="ID", OtherKey:="MerchantID")>  _
	Public Property MerchantBankDetails() As EntitySet(Of MerchantBankDetail)
		Get
			Return Me._MerchantBankDetails
		End Get
		Set
			Me._MerchantBankDetails.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_MerchantDetail", Storage:="_MerchantDetails", ThisKey:="ID", OtherKey:="MerchantID")>  _
	Public Property MerchantDetails() As EntitySet(Of MerchantDetail)
		Get
			Return Me._MerchantDetails
		End Get
		Set
			Me._MerchantDetails.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_MerchantHistory", Storage:="_MerchantHistories", ThisKey:="ID", OtherKey:="MerchantID")>  _
	Public Property MerchantHistories() As EntitySet(Of MerchantHistory)
		Get
			Return Me._MerchantHistories
		End Get
		Set
			Me._MerchantHistories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_MerchantProductProvider", Storage:="_MerchantProductProviders", ThisKey:="ID", OtherKey:="MerchantID")>  _
	Public Property MerchantProductProviders() As EntitySet(Of MerchantProductProvider)
		Get
			Return Me._MerchantProductProviders
		End Get
		Set
			Me._MerchantProductProviders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_MerchantProductProvider1", Storage:="_MerchantProductProviders1", ThisKey:="ID", OtherKey:="MerchantID")>  _
	Public Property MerchantProductProviders1() As EntitySet(Of MerchantProductProvider)
		Get
			Return Me._MerchantProductProviders1
		End Get
		Set
			Me._MerchantProductProviders1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_MerchantTerminal", Storage:="_MerchantTerminals", ThisKey:="ID", OtherKey:="MerchantID")>  _
	Public Property MerchantTerminals() As EntitySet(Of MerchantTerminal)
		Get
			Return Me._MerchantTerminals
		End Get
		Set
			Me._MerchantTerminals.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_Product", Storage:="_Products", ThisKey:="ID", OtherKey:="MerchantID")>  _
	Public Property Products() As EntitySet(Of Product)
		Get
			Return Me._Products
		End Get
		Set
			Me._Products.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Agent_Merchant", Storage:="_Agent", ThisKey:="AgentID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Agent() As Agent
		Get
			Return Me._Agent.Entity
		End Get
		Set
			Dim previousValue As Agent = Me._Agent.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Agent.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Agent.Entity = Nothing
					previousValue.Merchants.Remove(Me)
				End If
				Me._Agent.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Merchants.Add(Me)
					Me._AgentID = value.ID
				Else
					Me._AgentID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Agent")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Merchant", Storage:="_AuthDirectory", ThisKey:="CreatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.Merchants.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Merchants.Add(Me)
					Me._CreatedBy = value.ID
				Else
					Me._CreatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Merchant1", Storage:="_AuthDirectory1", ThisKey:="UpdatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory1() As AuthDirectory
		Get
			Return Me._AuthDirectory1.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory1.Entity = Nothing
					previousValue.Merchants1.Remove(Me)
				End If
				Me._AuthDirectory1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Merchants1.Add(Me)
					Me._UpdatedBy = value.ID
				Else
					Me._UpdatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Merchant2", Storage:="_AuthDirectory2", ThisKey:="AuthDirectoryID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory2() As AuthDirectory
		Get
			Return Me._AuthDirectory2.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory2.Entity = Nothing
					previousValue.Merchants2.Remove(Me)
				End If
				Me._AuthDirectory2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Merchants2.Add(Me)
					Me._AuthDirectoryID = value.ID
				Else
					Me._AuthDirectoryID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory2")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EnvironmentRepository_Merchant", Storage:="_EnvironmentRepository", ThisKey:="EnvironmentRepositoryID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property EnvironmentRepository() As EnvironmentRepository
		Get
			Return Me._EnvironmentRepository.Entity
		End Get
		Set
			Dim previousValue As EnvironmentRepository = Me._EnvironmentRepository.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EnvironmentRepository.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EnvironmentRepository.Entity = Nothing
					previousValue.Merchants.Remove(Me)
				End If
				Me._EnvironmentRepository.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Merchants.Add(Me)
					Me._EnvironmentRepositoryID = value.ID
				Else
					Me._EnvironmentRepositoryID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("EnvironmentRepository")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Industry_Merchant", Storage:="_Industry", ThisKey:="IndustryID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Industry() As Industry
		Get
			Return Me._Industry.Entity
		End Get
		Set
			Dim previousValue As Industry = Me._Industry.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Industry.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Industry.Entity = Nothing
					previousValue.Merchants.Remove(Me)
				End If
				Me._Industry.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Merchants.Add(Me)
					Me._IndustryID = value.ID
				Else
					Me._IndustryID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Industry")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_Merchant", Storage:="_Merchant", ThisKey:="ParentMerchantID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Merchant() As Merchant
		Get
			Return Me._Merchant.Entity
		End Get
		Set
			Dim previousValue As Merchant = Me._Merchant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Merchant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Merchant.Entity = Nothing
					previousValue.Merchants.Remove(Me)
				End If
				Me._Merchant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Merchants.Add(Me)
					Me._ParentMerchantID = value.ID
				Else
					Me._ParentMerchantID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Merchant")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SalesChannel_Merchant", Storage:="_SalesChannel", ThisKey:="SalesChannelID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property SalesChannel() As SalesChannel
		Get
			Return Me._SalesChannel.Entity
		End Get
		Set
			Dim previousValue As SalesChannel = Me._SalesChannel.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SalesChannel.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SalesChannel.Entity = Nothing
					previousValue.Merchants.Remove(Me)
				End If
				Me._SalesChannel.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Merchants.Add(Me)
					Me._SalesChannelID = value.ID
				Else
					Me._SalesChannelID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("SalesChannel")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TypeOfBusiness_Merchant", Storage:="_TypeOfBusiness", ThisKey:="TypeOfBusinessID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property TypeOfBusiness() As TypeOfBusiness
		Get
			Return Me._TypeOfBusiness.Entity
		End Get
		Set
			Dim previousValue As TypeOfBusiness = Me._TypeOfBusiness.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TypeOfBusiness.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TypeOfBusiness.Entity = Nothing
					previousValue.Merchants.Remove(Me)
				End If
				Me._TypeOfBusiness.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Merchants.Add(Me)
					Me._TypeOfBusinessID = value.ID
				Else
					Me._TypeOfBusinessID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("TypeOfBusiness")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_NewMerchants(ByVal entity As NewMerchant)
		Me.SendPropertyChanging
		entity.Merchant = Me
	End Sub
	
	Private Sub detach_NewMerchants(ByVal entity As NewMerchant)
		Me.SendPropertyChanging
		entity.Merchant = Nothing
	End Sub
	
	Private Sub attach_NewMerchants1(ByVal entity As NewMerchant)
		Me.SendPropertyChanging
		entity.Merchant1 = Me
	End Sub
	
	Private Sub detach_NewMerchants1(ByVal entity As NewMerchant)
		Me.SendPropertyChanging
		entity.Merchant1 = Nothing
	End Sub
	
	Private Sub attach_ApplicationRepositories(ByVal entity As ApplicationRepository)
		Me.SendPropertyChanging
		entity.Merchant = Me
	End Sub
	
	Private Sub detach_ApplicationRepositories(ByVal entity As ApplicationRepository)
		Me.SendPropertyChanging
		entity.Merchant = Nothing
	End Sub
	
	Private Sub attach_CreditProviderMerchants(ByVal entity As CreditProviderMerchant)
		Me.SendPropertyChanging
		entity.Merchant = Me
	End Sub
	
	Private Sub detach_CreditProviderMerchants(ByVal entity As CreditProviderMerchant)
		Me.SendPropertyChanging
		entity.Merchant = Nothing
	End Sub
	
	Private Sub attach_DebitOrders(ByVal entity As DebitOrder)
		Me.SendPropertyChanging
		entity.Merchant = Me
	End Sub
	
	Private Sub detach_DebitOrders(ByVal entity As DebitOrder)
		Me.SendPropertyChanging
		entity.Merchant = Nothing
	End Sub
	
	Private Sub attach_DebitOrderHistories(ByVal entity As DebitOrderHistory)
		Me.SendPropertyChanging
		entity.Merchant = Me
	End Sub
	
	Private Sub detach_DebitOrderHistories(ByVal entity As DebitOrderHistory)
		Me.SendPropertyChanging
		entity.Merchant = Nothing
	End Sub
	
	Private Sub attach_EnvironmentRepositories(ByVal entity As EnvironmentRepository)
		Me.SendPropertyChanging
		entity.Merchant = Me
	End Sub
	
	Private Sub detach_EnvironmentRepositories(ByVal entity As EnvironmentRepository)
		Me.SendPropertyChanging
		entity.Merchant = Nothing
	End Sub
	
	Private Sub attach_Merchants(ByVal entity As Merchant)
		Me.SendPropertyChanging
		entity.Merchant = Me
	End Sub
	
	Private Sub detach_Merchants(ByVal entity As Merchant)
		Me.SendPropertyChanging
		entity.Merchant = Nothing
	End Sub
	
	Private Sub attach_MerchantBankDetails(ByVal entity As MerchantBankDetail)
		Me.SendPropertyChanging
		entity.Merchant = Me
	End Sub
	
	Private Sub detach_MerchantBankDetails(ByVal entity As MerchantBankDetail)
		Me.SendPropertyChanging
		entity.Merchant = Nothing
	End Sub
	
	Private Sub attach_MerchantDetails(ByVal entity As MerchantDetail)
		Me.SendPropertyChanging
		entity.Merchant = Me
	End Sub
	
	Private Sub detach_MerchantDetails(ByVal entity As MerchantDetail)
		Me.SendPropertyChanging
		entity.Merchant = Nothing
	End Sub
	
	Private Sub attach_MerchantHistories(ByVal entity As MerchantHistory)
		Me.SendPropertyChanging
		entity.Merchant = Me
	End Sub
	
	Private Sub detach_MerchantHistories(ByVal entity As MerchantHistory)
		Me.SendPropertyChanging
		entity.Merchant = Nothing
	End Sub
	
	Private Sub attach_MerchantProductProviders(ByVal entity As MerchantProductProvider)
		Me.SendPropertyChanging
		entity.Merchant = Me
	End Sub
	
	Private Sub detach_MerchantProductProviders(ByVal entity As MerchantProductProvider)
		Me.SendPropertyChanging
		entity.Merchant = Nothing
	End Sub
	
	Private Sub attach_MerchantProductProviders1(ByVal entity As MerchantProductProvider)
		Me.SendPropertyChanging
		entity.Merchant1 = Me
	End Sub
	
	Private Sub detach_MerchantProductProviders1(ByVal entity As MerchantProductProvider)
		Me.SendPropertyChanging
		entity.Merchant1 = Nothing
	End Sub
	
	Private Sub attach_MerchantTerminals(ByVal entity As MerchantTerminal)
		Me.SendPropertyChanging
		entity.Merchant = Me
	End Sub
	
	Private Sub detach_MerchantTerminals(ByVal entity As MerchantTerminal)
		Me.SendPropertyChanging
		entity.Merchant = Nothing
	End Sub
	
	Private Sub attach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.Merchant = Me
	End Sub
	
	Private Sub detach_Products(ByVal entity As Product)
		Me.SendPropertyChanging
		entity.Merchant = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MerchantBankDetails")>  _
Partial Public Class MerchantBankDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _MerchantID As System.Nullable(Of Long)
	
	Private _FinancialInstitutionID As System.Nullable(Of Long)
	
	Private _BankBranch As String
	
	Private _BranchNumber As String
	
	Private _AccountNumber As String
	
	Private _AccountTypeID As System.Nullable(Of Long)
	
	Private _Deposit As System.Nullable(Of Double)
	
	Private _MerchantCommission As System.Nullable(Of Double)
	
	Private _DebitOrderReference As String
	
	Private _UseParent As System.Nullable(Of Boolean)
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _AccountType As EntityRef(Of AccountType)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory1 As EntityRef(Of AuthDirectory)
	
	Private _FinancialInstitution As EntityRef(Of FinancialInstitution)
	
	Private _Merchant As EntityRef(Of Merchant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnMerchantIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMerchantIDChanged()
    End Sub
    Partial Private Sub OnFinancialInstitutionIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFinancialInstitutionIDChanged()
    End Sub
    Partial Private Sub OnBankBranchChanging(value As String)
    End Sub
    Partial Private Sub OnBankBranchChanged()
    End Sub
    Partial Private Sub OnBranchNumberChanging(value As String)
    End Sub
    Partial Private Sub OnBranchNumberChanged()
    End Sub
    Partial Private Sub OnAccountNumberChanging(value As String)
    End Sub
    Partial Private Sub OnAccountNumberChanged()
    End Sub
    Partial Private Sub OnAccountTypeIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnAccountTypeIDChanged()
    End Sub
    Partial Private Sub OnDepositChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDepositChanged()
    End Sub
    Partial Private Sub OnMerchantCommissionChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnMerchantCommissionChanged()
    End Sub
    Partial Private Sub OnDebitOrderReferenceChanging(value As String)
    End Sub
    Partial Private Sub OnDebitOrderReferenceChanged()
    End Sub
    Partial Private Sub OnUseParentChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnUseParentChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AccountType = CType(Nothing, EntityRef(Of AccountType))
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory1 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._FinancialInstitution = CType(Nothing, EntityRef(Of FinancialInstitution))
		Me._Merchant = CType(Nothing, EntityRef(Of Merchant))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantID", DbType:="BigInt")>  _
	Public Property MerchantID() As System.Nullable(Of Long)
		Get
			Return Me._MerchantID
		End Get
		Set
			If (Me._MerchantID.Equals(value) = false) Then
				If Me._Merchant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMerchantIDChanging(value)
				Me.SendPropertyChanging
				Me._MerchantID = value
				Me.SendPropertyChanged("MerchantID")
				Me.OnMerchantIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinancialInstitutionID", DbType:="BigInt")>  _
	Public Property FinancialInstitutionID() As System.Nullable(Of Long)
		Get
			Return Me._FinancialInstitutionID
		End Get
		Set
			If (Me._FinancialInstitutionID.Equals(value) = false) Then
				If Me._FinancialInstitution.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFinancialInstitutionIDChanging(value)
				Me.SendPropertyChanging
				Me._FinancialInstitutionID = value
				Me.SendPropertyChanged("FinancialInstitutionID")
				Me.OnFinancialInstitutionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BankBranch", DbType:="NVarChar(150)")>  _
	Public Property BankBranch() As String
		Get
			Return Me._BankBranch
		End Get
		Set
			If (String.Equals(Me._BankBranch, value) = false) Then
				Me.OnBankBranchChanging(value)
				Me.SendPropertyChanging
				Me._BankBranch = value
				Me.SendPropertyChanged("BankBranch")
				Me.OnBankBranchChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BranchNumber", DbType:="NVarChar(50)")>  _
	Public Property BranchNumber() As String
		Get
			Return Me._BranchNumber
		End Get
		Set
			If (String.Equals(Me._BranchNumber, value) = false) Then
				Me.OnBranchNumberChanging(value)
				Me.SendPropertyChanging
				Me._BranchNumber = value
				Me.SendPropertyChanged("BranchNumber")
				Me.OnBranchNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountNumber", DbType:="NVarChar(50)")>  _
	Public Property AccountNumber() As String
		Get
			Return Me._AccountNumber
		End Get
		Set
			If (String.Equals(Me._AccountNumber, value) = false) Then
				Me.OnAccountNumberChanging(value)
				Me.SendPropertyChanging
				Me._AccountNumber = value
				Me.SendPropertyChanged("AccountNumber")
				Me.OnAccountNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AccountTypeID", DbType:="BigInt")>  _
	Public Property AccountTypeID() As System.Nullable(Of Long)
		Get
			Return Me._AccountTypeID
		End Get
		Set
			If (Me._AccountTypeID.Equals(value) = false) Then
				If Me._AccountType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAccountTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._AccountTypeID = value
				Me.SendPropertyChanged("AccountTypeID")
				Me.OnAccountTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Deposit", DbType:="Float")>  _
	Public Property Deposit() As System.Nullable(Of Double)
		Get
			Return Me._Deposit
		End Get
		Set
			If (Me._Deposit.Equals(value) = false) Then
				Me.OnDepositChanging(value)
				Me.SendPropertyChanging
				Me._Deposit = value
				Me.SendPropertyChanged("Deposit")
				Me.OnDepositChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantCommission", DbType:="Float")>  _
	Public Property MerchantCommission() As System.Nullable(Of Double)
		Get
			Return Me._MerchantCommission
		End Get
		Set
			If (Me._MerchantCommission.Equals(value) = false) Then
				Me.OnMerchantCommissionChanging(value)
				Me.SendPropertyChanging
				Me._MerchantCommission = value
				Me.SendPropertyChanged("MerchantCommission")
				Me.OnMerchantCommissionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DebitOrderReference", DbType:="NVarChar(50)")>  _
	Public Property DebitOrderReference() As String
		Get
			Return Me._DebitOrderReference
		End Get
		Set
			If (String.Equals(Me._DebitOrderReference, value) = false) Then
				Me.OnDebitOrderReferenceChanging(value)
				Me.SendPropertyChanging
				Me._DebitOrderReference = value
				Me.SendPropertyChanged("DebitOrderReference")
				Me.OnDebitOrderReferenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UseParent", DbType:="Bit")>  _
	Public Property UseParent() As System.Nullable(Of Boolean)
		Get
			Return Me._UseParent
		End Get
		Set
			If (Me._UseParent.Equals(value) = false) Then
				Me.OnUseParentChanging(value)
				Me.SendPropertyChanging
				Me._UseParent = value
				Me.SendPropertyChanged("UseParent")
				Me.OnUseParentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				If Me._AuthDirectory1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AccountType_MerchantBankDetail", Storage:="_AccountType", ThisKey:="AccountTypeID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AccountType() As AccountType
		Get
			Return Me._AccountType.Entity
		End Get
		Set
			Dim previousValue As AccountType = Me._AccountType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AccountType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AccountType.Entity = Nothing
					previousValue.MerchantBankDetails.Remove(Me)
				End If
				Me._AccountType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantBankDetails.Add(Me)
					Me._AccountTypeID = value.ID
				Else
					Me._AccountTypeID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AccountType")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_MerchantBankDetail", Storage:="_AuthDirectory", ThisKey:="CreatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.MerchantBankDetails.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantBankDetails.Add(Me)
					Me._CreatedBy = value.ID
				Else
					Me._CreatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_MerchantBankDetail1", Storage:="_AuthDirectory1", ThisKey:="UpdatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory1() As AuthDirectory
		Get
			Return Me._AuthDirectory1.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory1.Entity = Nothing
					previousValue.MerchantBankDetails1.Remove(Me)
				End If
				Me._AuthDirectory1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantBankDetails1.Add(Me)
					Me._UpdatedBy = value.ID
				Else
					Me._UpdatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FinancialInstitution_MerchantBankDetail", Storage:="_FinancialInstitution", ThisKey:="FinancialInstitutionID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property FinancialInstitution() As FinancialInstitution
		Get
			Return Me._FinancialInstitution.Entity
		End Get
		Set
			Dim previousValue As FinancialInstitution = Me._FinancialInstitution.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FinancialInstitution.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FinancialInstitution.Entity = Nothing
					previousValue.MerchantBankDetails.Remove(Me)
				End If
				Me._FinancialInstitution.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantBankDetails.Add(Me)
					Me._FinancialInstitutionID = value.ID
				Else
					Me._FinancialInstitutionID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("FinancialInstitution")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_MerchantBankDetail", Storage:="_Merchant", ThisKey:="MerchantID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Merchant() As Merchant
		Get
			Return Me._Merchant.Entity
		End Get
		Set
			Dim previousValue As Merchant = Me._Merchant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Merchant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Merchant.Entity = Nothing
					previousValue.MerchantBankDetails.Remove(Me)
				End If
				Me._Merchant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantBankDetails.Add(Me)
					Me._MerchantID = value.ID
				Else
					Me._MerchantID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Merchant")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MerchantDetails")>  _
Partial Public Class MerchantDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _MerchantID As Long
	
	Private _Title As String
	
	Private _VATNumber As String
	
	Private _PrimaryName As String
	
	Private _PrimaryPhone As String
	
	Private _PrimaryEmail As String
	
	Private _AllTerminals As System.Nullable(Of Boolean)
	
	Private _AdditionalValueAdded As String
	
	Private _Phone As String
	
	Private _Fax As String
	
	Private _CompanyEmail As String
	
	Private _Website As String
	
	Private _BillingEmail As String
	
	Private _PhysicalAddress As String
	
	Private _PostalAddress As String
	
	Private _PhysicalSuburb As String
	
	Private _PhysicalCity As String
	
	Private _PhysicalProvince As String
	
	Private _PhysicalCode As String
	
	Private _PostalSuburb As String
	
	Private _PostalCity As String
	
	Private _PostalProvince As String
	
	Private _PostalCode As String
	
	Private _TypeOfServiceID As System.Nullable(Of Long)
	
	Private _FootprintID As System.Nullable(Of Long)
	
	Private _BusinessStructureID As System.Nullable(Of Long)
	
	Private _BusinessSizeID As System.Nullable(Of Long)
	
	Private _MerchantSourceID As System.Nullable(Of Long)
	
	Private _MerchantSourceOther As String
	
	Private _DesignationID As System.Nullable(Of Long)
	
	Private _Trustees As System.Nullable(Of Integer)
	
	Private _YearsInBusiness As System.Nullable(Of Integer)
	
	Private _MonthsInBusiness As System.Nullable(Of Integer)
	
	Private _IsJuristicPerson As System.Nullable(Of Boolean)
	
	Private _IsPostalDifferent As System.Nullable(Of Boolean)
	
	Private _ApplicationDate As System.Nullable(Of Date)
	
	Private _ActivationDate As System.Nullable(Of Date)
	
	Private _ActivationFee As System.Nullable(Of Decimal)
	
	Private _BillingFirstName As String
	
	Private _BillingSurname As String
	
	Private _BillingPhone As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _BusinessSize As EntityRef(Of BusinessSize)
	
	Private _BusinessStructure As EntityRef(Of BusinessStructure)
	
	Private _Designation As EntityRef(Of Designation)
	
	Private _Footprint As EntityRef(Of Footprint)
	
	Private _Merchant As EntityRef(Of Merchant)
	
	Private _AuthDirectory1 As EntityRef(Of AuthDirectory)
	
	Private _MerchantSource As EntityRef(Of MerchantSource)
	
	Private _TypeOfService As EntityRef(Of TypeOfService)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnMerchantIDChanging(value As Long)
    End Sub
    Partial Private Sub OnMerchantIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnVATNumberChanging(value As String)
    End Sub
    Partial Private Sub OnVATNumberChanged()
    End Sub
    Partial Private Sub OnPrimaryNameChanging(value As String)
    End Sub
    Partial Private Sub OnPrimaryNameChanged()
    End Sub
    Partial Private Sub OnPrimaryPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPrimaryPhoneChanged()
    End Sub
    Partial Private Sub OnPrimaryEmailChanging(value As String)
    End Sub
    Partial Private Sub OnPrimaryEmailChanged()
    End Sub
    Partial Private Sub OnAllTerminalsChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnAllTerminalsChanged()
    End Sub
    Partial Private Sub OnAdditionalValueAddedChanging(value As String)
    End Sub
    Partial Private Sub OnAdditionalValueAddedChanged()
    End Sub
    Partial Private Sub OnPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneChanged()
    End Sub
    Partial Private Sub OnFaxChanging(value As String)
    End Sub
    Partial Private Sub OnFaxChanged()
    End Sub
    Partial Private Sub OnCompanyEmailChanging(value As String)
    End Sub
    Partial Private Sub OnCompanyEmailChanged()
    End Sub
    Partial Private Sub OnWebsiteChanging(value As String)
    End Sub
    Partial Private Sub OnWebsiteChanged()
    End Sub
    Partial Private Sub OnBillingEmailChanging(value As String)
    End Sub
    Partial Private Sub OnBillingEmailChanged()
    End Sub
    Partial Private Sub OnPhysicalAddressChanging(value As String)
    End Sub
    Partial Private Sub OnPhysicalAddressChanged()
    End Sub
    Partial Private Sub OnPostalAddressChanging(value As String)
    End Sub
    Partial Private Sub OnPostalAddressChanged()
    End Sub
    Partial Private Sub OnPhysicalSuburbChanging(value As String)
    End Sub
    Partial Private Sub OnPhysicalSuburbChanged()
    End Sub
    Partial Private Sub OnPhysicalCityChanging(value As String)
    End Sub
    Partial Private Sub OnPhysicalCityChanged()
    End Sub
    Partial Private Sub OnPhysicalProvinceChanging(value As String)
    End Sub
    Partial Private Sub OnPhysicalProvinceChanged()
    End Sub
    Partial Private Sub OnPhysicalCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPhysicalCodeChanged()
    End Sub
    Partial Private Sub OnPostalSuburbChanging(value As String)
    End Sub
    Partial Private Sub OnPostalSuburbChanged()
    End Sub
    Partial Private Sub OnPostalCityChanging(value As String)
    End Sub
    Partial Private Sub OnPostalCityChanged()
    End Sub
    Partial Private Sub OnPostalProvinceChanging(value As String)
    End Sub
    Partial Private Sub OnPostalProvinceChanged()
    End Sub
    Partial Private Sub OnPostalCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPostalCodeChanged()
    End Sub
    Partial Private Sub OnTypeOfServiceIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnTypeOfServiceIDChanged()
    End Sub
    Partial Private Sub OnFootprintIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFootprintIDChanged()
    End Sub
    Partial Private Sub OnBusinessStructureIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnBusinessStructureIDChanged()
    End Sub
    Partial Private Sub OnBusinessSizeIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnBusinessSizeIDChanged()
    End Sub
    Partial Private Sub OnMerchantSourceIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMerchantSourceIDChanged()
    End Sub
    Partial Private Sub OnMerchantSourceOtherChanging(value As String)
    End Sub
    Partial Private Sub OnMerchantSourceOtherChanged()
    End Sub
    Partial Private Sub OnDesignationIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnDesignationIDChanged()
    End Sub
    Partial Private Sub OnTrusteesChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTrusteesChanged()
    End Sub
    Partial Private Sub OnYearsInBusinessChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnYearsInBusinessChanged()
    End Sub
    Partial Private Sub OnMonthsInBusinessChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMonthsInBusinessChanged()
    End Sub
    Partial Private Sub OnIsJuristicPersonChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsJuristicPersonChanged()
    End Sub
    Partial Private Sub OnIsPostalDifferentChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsPostalDifferentChanged()
    End Sub
    Partial Private Sub OnApplicationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnApplicationDateChanged()
    End Sub
    Partial Private Sub OnActivationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnActivationDateChanged()
    End Sub
    Partial Private Sub OnActivationFeeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnActivationFeeChanged()
    End Sub
    Partial Private Sub OnBillingFirstNameChanging(value As String)
    End Sub
    Partial Private Sub OnBillingFirstNameChanged()
    End Sub
    Partial Private Sub OnBillingSurnameChanging(value As String)
    End Sub
    Partial Private Sub OnBillingSurnameChanged()
    End Sub
    Partial Private Sub OnBillingPhoneChanging(value As String)
    End Sub
    Partial Private Sub OnBillingPhoneChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._BusinessSize = CType(Nothing, EntityRef(Of BusinessSize))
		Me._BusinessStructure = CType(Nothing, EntityRef(Of BusinessStructure))
		Me._Designation = CType(Nothing, EntityRef(Of Designation))
		Me._Footprint = CType(Nothing, EntityRef(Of Footprint))
		Me._Merchant = CType(Nothing, EntityRef(Of Merchant))
		Me._AuthDirectory1 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._MerchantSource = CType(Nothing, EntityRef(Of MerchantSource))
		Me._TypeOfService = CType(Nothing, EntityRef(Of TypeOfService))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantID", DbType:="BigInt NOT NULL")>  _
	Public Property MerchantID() As Long
		Get
			Return Me._MerchantID
		End Get
		Set
			If ((Me._MerchantID = value)  _
						= false) Then
				If Me._Merchant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMerchantIDChanging(value)
				Me.SendPropertyChanging
				Me._MerchantID = value
				Me.SendPropertyChanged("MerchantID")
				Me.OnMerchantIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(1000)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VATNumber", DbType:="NVarChar(100)")>  _
	Public Property VATNumber() As String
		Get
			Return Me._VATNumber
		End Get
		Set
			If (String.Equals(Me._VATNumber, value) = false) Then
				Me.OnVATNumberChanging(value)
				Me.SendPropertyChanging
				Me._VATNumber = value
				Me.SendPropertyChanged("VATNumber")
				Me.OnVATNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryName", DbType:="NVarChar(500)")>  _
	Public Property PrimaryName() As String
		Get
			Return Me._PrimaryName
		End Get
		Set
			If (String.Equals(Me._PrimaryName, value) = false) Then
				Me.OnPrimaryNameChanging(value)
				Me.SendPropertyChanging
				Me._PrimaryName = value
				Me.SendPropertyChanged("PrimaryName")
				Me.OnPrimaryNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryPhone", DbType:="NVarChar(50)")>  _
	Public Property PrimaryPhone() As String
		Get
			Return Me._PrimaryPhone
		End Get
		Set
			If (String.Equals(Me._PrimaryPhone, value) = false) Then
				Me.OnPrimaryPhoneChanging(value)
				Me.SendPropertyChanging
				Me._PrimaryPhone = value
				Me.SendPropertyChanged("PrimaryPhone")
				Me.OnPrimaryPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PrimaryEmail", DbType:="NVarChar(500)")>  _
	Public Property PrimaryEmail() As String
		Get
			Return Me._PrimaryEmail
		End Get
		Set
			If (String.Equals(Me._PrimaryEmail, value) = false) Then
				Me.OnPrimaryEmailChanging(value)
				Me.SendPropertyChanging
				Me._PrimaryEmail = value
				Me.SendPropertyChanged("PrimaryEmail")
				Me.OnPrimaryEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AllTerminals", DbType:="Bit")>  _
	Public Property AllTerminals() As System.Nullable(Of Boolean)
		Get
			Return Me._AllTerminals
		End Get
		Set
			If (Me._AllTerminals.Equals(value) = false) Then
				Me.OnAllTerminalsChanging(value)
				Me.SendPropertyChanging
				Me._AllTerminals = value
				Me.SendPropertyChanged("AllTerminals")
				Me.OnAllTerminalsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AdditionalValueAdded", DbType:="NVarChar(MAX)")>  _
	Public Property AdditionalValueAdded() As String
		Get
			Return Me._AdditionalValueAdded
		End Get
		Set
			If (String.Equals(Me._AdditionalValueAdded, value) = false) Then
				Me.OnAdditionalValueAddedChanging(value)
				Me.SendPropertyChanging
				Me._AdditionalValueAdded = value
				Me.SendPropertyChanged("AdditionalValueAdded")
				Me.OnAdditionalValueAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Phone", DbType:="NVarChar(50)")>  _
	Public Property Phone() As String
		Get
			Return Me._Phone
		End Get
		Set
			If (String.Equals(Me._Phone, value) = false) Then
				Me.OnPhoneChanging(value)
				Me.SendPropertyChanging
				Me._Phone = value
				Me.SendPropertyChanged("Phone")
				Me.OnPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Fax", DbType:="NVarChar(50)")>  _
	Public Property Fax() As String
		Get
			Return Me._Fax
		End Get
		Set
			If (String.Equals(Me._Fax, value) = false) Then
				Me.OnFaxChanging(value)
				Me.SendPropertyChanging
				Me._Fax = value
				Me.SendPropertyChanged("Fax")
				Me.OnFaxChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompanyEmail", DbType:="NVarChar(500)")>  _
	Public Property CompanyEmail() As String
		Get
			Return Me._CompanyEmail
		End Get
		Set
			If (String.Equals(Me._CompanyEmail, value) = false) Then
				Me.OnCompanyEmailChanging(value)
				Me.SendPropertyChanging
				Me._CompanyEmail = value
				Me.SendPropertyChanged("CompanyEmail")
				Me.OnCompanyEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Website", DbType:="NVarChar(500)")>  _
	Public Property Website() As String
		Get
			Return Me._Website
		End Get
		Set
			If (String.Equals(Me._Website, value) = false) Then
				Me.OnWebsiteChanging(value)
				Me.SendPropertyChanging
				Me._Website = value
				Me.SendPropertyChanged("Website")
				Me.OnWebsiteChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillingEmail", DbType:="NVarChar(500)")>  _
	Public Property BillingEmail() As String
		Get
			Return Me._BillingEmail
		End Get
		Set
			If (String.Equals(Me._BillingEmail, value) = false) Then
				Me.OnBillingEmailChanging(value)
				Me.SendPropertyChanging
				Me._BillingEmail = value
				Me.SendPropertyChanged("BillingEmail")
				Me.OnBillingEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhysicalAddress", DbType:="NVarChar(500)")>  _
	Public Property PhysicalAddress() As String
		Get
			Return Me._PhysicalAddress
		End Get
		Set
			If (String.Equals(Me._PhysicalAddress, value) = false) Then
				Me.OnPhysicalAddressChanging(value)
				Me.SendPropertyChanging
				Me._PhysicalAddress = value
				Me.SendPropertyChanged("PhysicalAddress")
				Me.OnPhysicalAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalAddress", DbType:="NVarChar(500)")>  _
	Public Property PostalAddress() As String
		Get
			Return Me._PostalAddress
		End Get
		Set
			If (String.Equals(Me._PostalAddress, value) = false) Then
				Me.OnPostalAddressChanging(value)
				Me.SendPropertyChanging
				Me._PostalAddress = value
				Me.SendPropertyChanged("PostalAddress")
				Me.OnPostalAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhysicalSuburb", DbType:="NVarChar(250)")>  _
	Public Property PhysicalSuburb() As String
		Get
			Return Me._PhysicalSuburb
		End Get
		Set
			If (String.Equals(Me._PhysicalSuburb, value) = false) Then
				Me.OnPhysicalSuburbChanging(value)
				Me.SendPropertyChanging
				Me._PhysicalSuburb = value
				Me.SendPropertyChanged("PhysicalSuburb")
				Me.OnPhysicalSuburbChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhysicalCity", DbType:="NVarChar(150)")>  _
	Public Property PhysicalCity() As String
		Get
			Return Me._PhysicalCity
		End Get
		Set
			If (String.Equals(Me._PhysicalCity, value) = false) Then
				Me.OnPhysicalCityChanging(value)
				Me.SendPropertyChanging
				Me._PhysicalCity = value
				Me.SendPropertyChanged("PhysicalCity")
				Me.OnPhysicalCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhysicalProvince", DbType:="NVarChar(50)")>  _
	Public Property PhysicalProvince() As String
		Get
			Return Me._PhysicalProvince
		End Get
		Set
			If (String.Equals(Me._PhysicalProvince, value) = false) Then
				Me.OnPhysicalProvinceChanging(value)
				Me.SendPropertyChanging
				Me._PhysicalProvince = value
				Me.SendPropertyChanged("PhysicalProvince")
				Me.OnPhysicalProvinceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhysicalCode", DbType:="NVarChar(10)")>  _
	Public Property PhysicalCode() As String
		Get
			Return Me._PhysicalCode
		End Get
		Set
			If (String.Equals(Me._PhysicalCode, value) = false) Then
				Me.OnPhysicalCodeChanging(value)
				Me.SendPropertyChanging
				Me._PhysicalCode = value
				Me.SendPropertyChanged("PhysicalCode")
				Me.OnPhysicalCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalSuburb", DbType:="NVarChar(250)")>  _
	Public Property PostalSuburb() As String
		Get
			Return Me._PostalSuburb
		End Get
		Set
			If (String.Equals(Me._PostalSuburb, value) = false) Then
				Me.OnPostalSuburbChanging(value)
				Me.SendPropertyChanging
				Me._PostalSuburb = value
				Me.SendPropertyChanged("PostalSuburb")
				Me.OnPostalSuburbChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalCity", DbType:="NVarChar(150)")>  _
	Public Property PostalCity() As String
		Get
			Return Me._PostalCity
		End Get
		Set
			If (String.Equals(Me._PostalCity, value) = false) Then
				Me.OnPostalCityChanging(value)
				Me.SendPropertyChanging
				Me._PostalCity = value
				Me.SendPropertyChanged("PostalCity")
				Me.OnPostalCityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalProvince", DbType:="NVarChar(50)")>  _
	Public Property PostalProvince() As String
		Get
			Return Me._PostalProvince
		End Get
		Set
			If (String.Equals(Me._PostalProvince, value) = false) Then
				Me.OnPostalProvinceChanging(value)
				Me.SendPropertyChanging
				Me._PostalProvince = value
				Me.SendPropertyChanged("PostalProvince")
				Me.OnPostalProvinceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalCode", DbType:="NVarChar(10)")>  _
	Public Property PostalCode() As String
		Get
			Return Me._PostalCode
		End Get
		Set
			If (String.Equals(Me._PostalCode, value) = false) Then
				Me.OnPostalCodeChanging(value)
				Me.SendPropertyChanging
				Me._PostalCode = value
				Me.SendPropertyChanged("PostalCode")
				Me.OnPostalCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TypeOfServiceID", DbType:="BigInt")>  _
	Public Property TypeOfServiceID() As System.Nullable(Of Long)
		Get
			Return Me._TypeOfServiceID
		End Get
		Set
			If (Me._TypeOfServiceID.Equals(value) = false) Then
				If Me._TypeOfService.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTypeOfServiceIDChanging(value)
				Me.SendPropertyChanging
				Me._TypeOfServiceID = value
				Me.SendPropertyChanged("TypeOfServiceID")
				Me.OnTypeOfServiceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FootprintID", DbType:="BigInt")>  _
	Public Property FootprintID() As System.Nullable(Of Long)
		Get
			Return Me._FootprintID
		End Get
		Set
			If (Me._FootprintID.Equals(value) = false) Then
				If Me._Footprint.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFootprintIDChanging(value)
				Me.SendPropertyChanging
				Me._FootprintID = value
				Me.SendPropertyChanged("FootprintID")
				Me.OnFootprintIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BusinessStructureID", DbType:="BigInt")>  _
	Public Property BusinessStructureID() As System.Nullable(Of Long)
		Get
			Return Me._BusinessStructureID
		End Get
		Set
			If (Me._BusinessStructureID.Equals(value) = false) Then
				If Me._BusinessStructure.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBusinessStructureIDChanging(value)
				Me.SendPropertyChanging
				Me._BusinessStructureID = value
				Me.SendPropertyChanged("BusinessStructureID")
				Me.OnBusinessStructureIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BusinessSizeID", DbType:="BigInt")>  _
	Public Property BusinessSizeID() As System.Nullable(Of Long)
		Get
			Return Me._BusinessSizeID
		End Get
		Set
			If (Me._BusinessSizeID.Equals(value) = false) Then
				If Me._BusinessSize.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBusinessSizeIDChanging(value)
				Me.SendPropertyChanging
				Me._BusinessSizeID = value
				Me.SendPropertyChanged("BusinessSizeID")
				Me.OnBusinessSizeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantSourceID", DbType:="BigInt")>  _
	Public Property MerchantSourceID() As System.Nullable(Of Long)
		Get
			Return Me._MerchantSourceID
		End Get
		Set
			If (Me._MerchantSourceID.Equals(value) = false) Then
				If Me._MerchantSource.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMerchantSourceIDChanging(value)
				Me.SendPropertyChanging
				Me._MerchantSourceID = value
				Me.SendPropertyChanged("MerchantSourceID")
				Me.OnMerchantSourceIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantSourceOther", DbType:="NVarChar(250)")>  _
	Public Property MerchantSourceOther() As String
		Get
			Return Me._MerchantSourceOther
		End Get
		Set
			If (String.Equals(Me._MerchantSourceOther, value) = false) Then
				Me.OnMerchantSourceOtherChanging(value)
				Me.SendPropertyChanging
				Me._MerchantSourceOther = value
				Me.SendPropertyChanged("MerchantSourceOther")
				Me.OnMerchantSourceOtherChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DesignationID", DbType:="BigInt")>  _
	Public Property DesignationID() As System.Nullable(Of Long)
		Get
			Return Me._DesignationID
		End Get
		Set
			If (Me._DesignationID.Equals(value) = false) Then
				If Me._Designation.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDesignationIDChanging(value)
				Me.SendPropertyChanging
				Me._DesignationID = value
				Me.SendPropertyChanged("DesignationID")
				Me.OnDesignationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Trustees", DbType:="Int")>  _
	Public Property Trustees() As System.Nullable(Of Integer)
		Get
			Return Me._Trustees
		End Get
		Set
			If (Me._Trustees.Equals(value) = false) Then
				Me.OnTrusteesChanging(value)
				Me.SendPropertyChanging
				Me._Trustees = value
				Me.SendPropertyChanged("Trustees")
				Me.OnTrusteesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_YearsInBusiness", DbType:="Int")>  _
	Public Property YearsInBusiness() As System.Nullable(Of Integer)
		Get
			Return Me._YearsInBusiness
		End Get
		Set
			If (Me._YearsInBusiness.Equals(value) = false) Then
				Me.OnYearsInBusinessChanging(value)
				Me.SendPropertyChanging
				Me._YearsInBusiness = value
				Me.SendPropertyChanged("YearsInBusiness")
				Me.OnYearsInBusinessChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MonthsInBusiness", DbType:="Int")>  _
	Public Property MonthsInBusiness() As System.Nullable(Of Integer)
		Get
			Return Me._MonthsInBusiness
		End Get
		Set
			If (Me._MonthsInBusiness.Equals(value) = false) Then
				Me.OnMonthsInBusinessChanging(value)
				Me.SendPropertyChanging
				Me._MonthsInBusiness = value
				Me.SendPropertyChanged("MonthsInBusiness")
				Me.OnMonthsInBusinessChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsJuristicPerson", DbType:="Bit")>  _
	Public Property IsJuristicPerson() As System.Nullable(Of Boolean)
		Get
			Return Me._IsJuristicPerson
		End Get
		Set
			If (Me._IsJuristicPerson.Equals(value) = false) Then
				Me.OnIsJuristicPersonChanging(value)
				Me.SendPropertyChanging
				Me._IsJuristicPerson = value
				Me.SendPropertyChanged("IsJuristicPerson")
				Me.OnIsJuristicPersonChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsPostalDifferent", DbType:="Bit")>  _
	Public Property IsPostalDifferent() As System.Nullable(Of Boolean)
		Get
			Return Me._IsPostalDifferent
		End Get
		Set
			If (Me._IsPostalDifferent.Equals(value) = false) Then
				Me.OnIsPostalDifferentChanging(value)
				Me.SendPropertyChanging
				Me._IsPostalDifferent = value
				Me.SendPropertyChanged("IsPostalDifferent")
				Me.OnIsPostalDifferentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationDate", DbType:="DateTime")>  _
	Public Property ApplicationDate() As System.Nullable(Of Date)
		Get
			Return Me._ApplicationDate
		End Get
		Set
			If (Me._ApplicationDate.Equals(value) = false) Then
				Me.OnApplicationDateChanging(value)
				Me.SendPropertyChanging
				Me._ApplicationDate = value
				Me.SendPropertyChanged("ApplicationDate")
				Me.OnApplicationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivationDate", DbType:="DateTime")>  _
	Public Property ActivationDate() As System.Nullable(Of Date)
		Get
			Return Me._ActivationDate
		End Get
		Set
			If (Me._ActivationDate.Equals(value) = false) Then
				Me.OnActivationDateChanging(value)
				Me.SendPropertyChanging
				Me._ActivationDate = value
				Me.SendPropertyChanged("ActivationDate")
				Me.OnActivationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivationFee", DbType:="Money")>  _
	Public Property ActivationFee() As System.Nullable(Of Decimal)
		Get
			Return Me._ActivationFee
		End Get
		Set
			If (Me._ActivationFee.Equals(value) = false) Then
				Me.OnActivationFeeChanging(value)
				Me.SendPropertyChanging
				Me._ActivationFee = value
				Me.SendPropertyChanged("ActivationFee")
				Me.OnActivationFeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillingFirstName", DbType:="NVarChar(50)")>  _
	Public Property BillingFirstName() As String
		Get
			Return Me._BillingFirstName
		End Get
		Set
			If (String.Equals(Me._BillingFirstName, value) = false) Then
				Me.OnBillingFirstNameChanging(value)
				Me.SendPropertyChanging
				Me._BillingFirstName = value
				Me.SendPropertyChanged("BillingFirstName")
				Me.OnBillingFirstNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillingSurname", DbType:="NVarChar(50)")>  _
	Public Property BillingSurname() As String
		Get
			Return Me._BillingSurname
		End Get
		Set
			If (String.Equals(Me._BillingSurname, value) = false) Then
				Me.OnBillingSurnameChanging(value)
				Me.SendPropertyChanging
				Me._BillingSurname = value
				Me.SendPropertyChanged("BillingSurname")
				Me.OnBillingSurnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BillingPhone", DbType:="NChar(10)")>  _
	Public Property BillingPhone() As String
		Get
			Return Me._BillingPhone
		End Get
		Set
			If (String.Equals(Me._BillingPhone, value) = false) Then
				Me.OnBillingPhoneChanging(value)
				Me.SendPropertyChanging
				Me._BillingPhone = value
				Me.SendPropertyChanged("BillingPhone")
				Me.OnBillingPhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				If Me._AuthDirectory1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_MerchantDetail", Storage:="_AuthDirectory", ThisKey:="CreatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.MerchantDetails.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantDetails.Add(Me)
					Me._CreatedBy = value.ID
				Else
					Me._CreatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BusinessSize_MerchantDetail", Storage:="_BusinessSize", ThisKey:="BusinessSizeID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property BusinessSize() As BusinessSize
		Get
			Return Me._BusinessSize.Entity
		End Get
		Set
			Dim previousValue As BusinessSize = Me._BusinessSize.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BusinessSize.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BusinessSize.Entity = Nothing
					previousValue.MerchantDetails.Remove(Me)
				End If
				Me._BusinessSize.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantDetails.Add(Me)
					Me._BusinessSizeID = value.ID
				Else
					Me._BusinessSizeID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("BusinessSize")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BusinessStructure_MerchantDetail", Storage:="_BusinessStructure", ThisKey:="BusinessStructureID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property BusinessStructure() As BusinessStructure
		Get
			Return Me._BusinessStructure.Entity
		End Get
		Set
			Dim previousValue As BusinessStructure = Me._BusinessStructure.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BusinessStructure.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BusinessStructure.Entity = Nothing
					previousValue.MerchantDetails.Remove(Me)
				End If
				Me._BusinessStructure.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantDetails.Add(Me)
					Me._BusinessStructureID = value.ID
				Else
					Me._BusinessStructureID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("BusinessStructure")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Designation_MerchantDetail", Storage:="_Designation", ThisKey:="DesignationID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Designation() As Designation
		Get
			Return Me._Designation.Entity
		End Get
		Set
			Dim previousValue As Designation = Me._Designation.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Designation.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Designation.Entity = Nothing
					previousValue.MerchantDetails.Remove(Me)
				End If
				Me._Designation.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantDetails.Add(Me)
					Me._DesignationID = value.ID
				Else
					Me._DesignationID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Designation")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Footprint_MerchantDetail", Storage:="_Footprint", ThisKey:="FootprintID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Footprint() As Footprint
		Get
			Return Me._Footprint.Entity
		End Get
		Set
			Dim previousValue As Footprint = Me._Footprint.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Footprint.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Footprint.Entity = Nothing
					previousValue.MerchantDetails.Remove(Me)
				End If
				Me._Footprint.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantDetails.Add(Me)
					Me._FootprintID = value.ID
				Else
					Me._FootprintID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Footprint")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_MerchantDetail", Storage:="_Merchant", ThisKey:="MerchantID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Merchant() As Merchant
		Get
			Return Me._Merchant.Entity
		End Get
		Set
			Dim previousValue As Merchant = Me._Merchant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Merchant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Merchant.Entity = Nothing
					previousValue.MerchantDetails.Remove(Me)
				End If
				Me._Merchant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantDetails.Add(Me)
					Me._MerchantID = value.ID
				Else
					Me._MerchantID = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("Merchant")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_MerchantDetail1", Storage:="_AuthDirectory1", ThisKey:="UpdatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory1() As AuthDirectory
		Get
			Return Me._AuthDirectory1.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory1.Entity = Nothing
					previousValue.MerchantDetails1.Remove(Me)
				End If
				Me._AuthDirectory1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantDetails1.Add(Me)
					Me._UpdatedBy = value.ID
				Else
					Me._UpdatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MerchantSource_MerchantDetail", Storage:="_MerchantSource", ThisKey:="MerchantSourceID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property MerchantSource() As MerchantSource
		Get
			Return Me._MerchantSource.Entity
		End Get
		Set
			Dim previousValue As MerchantSource = Me._MerchantSource.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MerchantSource.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MerchantSource.Entity = Nothing
					previousValue.MerchantDetails.Remove(Me)
				End If
				Me._MerchantSource.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantDetails.Add(Me)
					Me._MerchantSourceID = value.ID
				Else
					Me._MerchantSourceID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("MerchantSource")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TypeOfService_MerchantDetail", Storage:="_TypeOfService", ThisKey:="TypeOfServiceID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property TypeOfService() As TypeOfService
		Get
			Return Me._TypeOfService.Entity
		End Get
		Set
			Dim previousValue As TypeOfService = Me._TypeOfService.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TypeOfService.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TypeOfService.Entity = Nothing
					previousValue.MerchantDetails.Remove(Me)
				End If
				Me._TypeOfService.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantDetails.Add(Me)
					Me._TypeOfServiceID = value.ID
				Else
					Me._TypeOfServiceID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("TypeOfService")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MerchantHistory")>  _
Partial Public Class MerchantHistory
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Actor As System.Nullable(Of Long)
	
	Private _Name As String
	
	Private _Details As String
	
	Private _MerchantHistoryTypeID As System.Nullable(Of Long)
	
	Private _MerchantID As System.Nullable(Of Long)
	
	Private _DateActioned As System.Nullable(Of Date)
	
	Private _MerchantTerminalID As System.Nullable(Of Long)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _Merchant As EntityRef(Of Merchant)
	
	Private _MerchantHistoryType As EntityRef(Of MerchantHistoryType)
	
	Private _MerchantTerminal As EntityRef(Of MerchantTerminal)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnActorChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnActorChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnDetailsChanging(value As String)
    End Sub
    Partial Private Sub OnDetailsChanged()
    End Sub
    Partial Private Sub OnMerchantHistoryTypeIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMerchantHistoryTypeIDChanged()
    End Sub
    Partial Private Sub OnMerchantIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMerchantIDChanged()
    End Sub
    Partial Private Sub OnDateActionedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateActionedChanged()
    End Sub
    Partial Private Sub OnMerchantTerminalIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMerchantTerminalIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._Merchant = CType(Nothing, EntityRef(Of Merchant))
		Me._MerchantHistoryType = CType(Nothing, EntityRef(Of MerchantHistoryType))
		Me._MerchantTerminal = CType(Nothing, EntityRef(Of MerchantTerminal))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Actor", DbType:="BigInt")>  _
	Public Property Actor() As System.Nullable(Of Long)
		Get
			Return Me._Actor
		End Get
		Set
			If (Me._Actor.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnActorChanging(value)
				Me.SendPropertyChanging
				Me._Actor = value
				Me.SendPropertyChanged("Actor")
				Me.OnActorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(150)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Details", DbType:="NVarChar(MAX) NOT NULL", CanBeNull:=false)>  _
	Public Property Details() As String
		Get
			Return Me._Details
		End Get
		Set
			If (String.Equals(Me._Details, value) = false) Then
				Me.OnDetailsChanging(value)
				Me.SendPropertyChanging
				Me._Details = value
				Me.SendPropertyChanged("Details")
				Me.OnDetailsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantHistoryTypeID", DbType:="BigInt")>  _
	Public Property MerchantHistoryTypeID() As System.Nullable(Of Long)
		Get
			Return Me._MerchantHistoryTypeID
		End Get
		Set
			If (Me._MerchantHistoryTypeID.Equals(value) = false) Then
				If Me._MerchantHistoryType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMerchantHistoryTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._MerchantHistoryTypeID = value
				Me.SendPropertyChanged("MerchantHistoryTypeID")
				Me.OnMerchantHistoryTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantID", DbType:="BigInt")>  _
	Public Property MerchantID() As System.Nullable(Of Long)
		Get
			Return Me._MerchantID
		End Get
		Set
			If (Me._MerchantID.Equals(value) = false) Then
				If Me._Merchant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMerchantIDChanging(value)
				Me.SendPropertyChanging
				Me._MerchantID = value
				Me.SendPropertyChanged("MerchantID")
				Me.OnMerchantIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateActioned", DbType:="DateTime")>  _
	Public Property DateActioned() As System.Nullable(Of Date)
		Get
			Return Me._DateActioned
		End Get
		Set
			If (Me._DateActioned.Equals(value) = false) Then
				Me.OnDateActionedChanging(value)
				Me.SendPropertyChanging
				Me._DateActioned = value
				Me.SendPropertyChanged("DateActioned")
				Me.OnDateActionedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantTerminalID", DbType:="BigInt")>  _
	Public Property MerchantTerminalID() As System.Nullable(Of Long)
		Get
			Return Me._MerchantTerminalID
		End Get
		Set
			If (Me._MerchantTerminalID.Equals(value) = false) Then
				If Me._MerchantTerminal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMerchantTerminalIDChanging(value)
				Me.SendPropertyChanging
				Me._MerchantTerminalID = value
				Me.SendPropertyChanged("MerchantTerminalID")
				Me.OnMerchantTerminalIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_MerchantHistory", Storage:="_AuthDirectory", ThisKey:="Actor", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.MerchantHistories.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantHistories.Add(Me)
					Me._Actor = value.ID
				Else
					Me._Actor = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_MerchantHistory", Storage:="_Merchant", ThisKey:="MerchantID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Merchant() As Merchant
		Get
			Return Me._Merchant.Entity
		End Get
		Set
			Dim previousValue As Merchant = Me._Merchant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Merchant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Merchant.Entity = Nothing
					previousValue.MerchantHistories.Remove(Me)
				End If
				Me._Merchant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantHistories.Add(Me)
					Me._MerchantID = value.ID
				Else
					Me._MerchantID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Merchant")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MerchantHistoryType_MerchantHistory", Storage:="_MerchantHistoryType", ThisKey:="MerchantHistoryTypeID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property MerchantHistoryType() As MerchantHistoryType
		Get
			Return Me._MerchantHistoryType.Entity
		End Get
		Set
			Dim previousValue As MerchantHistoryType = Me._MerchantHistoryType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MerchantHistoryType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MerchantHistoryType.Entity = Nothing
					previousValue.MerchantHistories.Remove(Me)
				End If
				Me._MerchantHistoryType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantHistories.Add(Me)
					Me._MerchantHistoryTypeID = value.ID
				Else
					Me._MerchantHistoryTypeID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("MerchantHistoryType")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MerchantTerminal_MerchantHistory", Storage:="_MerchantTerminal", ThisKey:="MerchantTerminalID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property MerchantTerminal() As MerchantTerminal
		Get
			Return Me._MerchantTerminal.Entity
		End Get
		Set
			Dim previousValue As MerchantTerminal = Me._MerchantTerminal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MerchantTerminal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MerchantTerminal.Entity = Nothing
					previousValue.MerchantHistories.Remove(Me)
				End If
				Me._MerchantTerminal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantHistories.Add(Me)
					Me._MerchantTerminalID = value.ID
				Else
					Me._MerchantTerminalID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("MerchantTerminal")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MerchantHistoryType")>  _
Partial Public Class MerchantHistoryType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _MerchantHistories As EntitySet(Of MerchantHistory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MerchantHistories = New EntitySet(Of MerchantHistory)(AddressOf Me.attach_MerchantHistories, AddressOf Me.detach_MerchantHistories)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MerchantHistoryType_MerchantHistory", Storage:="_MerchantHistories", ThisKey:="ID", OtherKey:="MerchantHistoryTypeID")>  _
	Public Property MerchantHistories() As EntitySet(Of MerchantHistory)
		Get
			Return Me._MerchantHistories
		End Get
		Set
			Me._MerchantHistories.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_MerchantHistories(ByVal entity As MerchantHistory)
		Me.SendPropertyChanging
		entity.MerchantHistoryType = Me
	End Sub
	
	Private Sub detach_MerchantHistories(ByVal entity As MerchantHistory)
		Me.SendPropertyChanging
		entity.MerchantHistoryType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MerchantProductProviders")>  _
Partial Public Class MerchantProductProvider
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _MerchantID As Long
	
	Private _ProductID As Long
	
	Private _ProviderID As Long
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsActive As Boolean
	
	Private _Merchant As EntityRef(Of Merchant)
	
	Private _Merchant1 As EntityRef(Of Merchant)
	
	Private _Product As EntityRef(Of Product)
	
	Private _Product1 As EntityRef(Of Product)
	
	Private _Provider As EntityRef(Of Provider)
	
	Private _Provider1 As EntityRef(Of Provider)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnMerchantIDChanging(value As Long)
    End Sub
    Partial Private Sub OnMerchantIDChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As Long)
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnProviderIDChanging(value As Long)
    End Sub
    Partial Private Sub OnProviderIDChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Merchant = CType(Nothing, EntityRef(Of Merchant))
		Me._Merchant1 = CType(Nothing, EntityRef(Of Merchant))
		Me._Product = CType(Nothing, EntityRef(Of Product))
		Me._Product1 = CType(Nothing, EntityRef(Of Product))
		Me._Provider = CType(Nothing, EntityRef(Of Provider))
		Me._Provider1 = CType(Nothing, EntityRef(Of Provider))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantID", DbType:="BigInt NOT NULL")>  _
	Public Property MerchantID() As Long
		Get
			Return Me._MerchantID
		End Get
		Set
			If ((Me._MerchantID = value)  _
						= false) Then
				If (Me._Merchant.HasLoadedOrAssignedValue OrElse Me._Merchant1.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMerchantIDChanging(value)
				Me.SendPropertyChanging
				Me._MerchantID = value
				Me.SendPropertyChanged("MerchantID")
				Me.OnMerchantIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="BigInt NOT NULL")>  _
	Public Property ProductID() As Long
		Get
			Return Me._ProductID
		End Get
		Set
			If ((Me._ProductID = value)  _
						= false) Then
				If (Me._Product.HasLoadedOrAssignedValue OrElse Me._Product1.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProviderID", DbType:="BigInt NOT NULL")>  _
	Public Property ProviderID() As Long
		Get
			Return Me._ProviderID
		End Get
		Set
			If ((Me._ProviderID = value)  _
						= false) Then
				If (Me._Provider.HasLoadedOrAssignedValue OrElse Me._Provider1.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnProviderIDChanging(value)
				Me.SendPropertyChanging
				Me._ProviderID = value
				Me.SendPropertyChanged("ProviderID")
				Me.OnProviderIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_MerchantProductProvider", Storage:="_Merchant", ThisKey:="MerchantID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Merchant() As Merchant
		Get
			Return Me._Merchant.Entity
		End Get
		Set
			Dim previousValue As Merchant = Me._Merchant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Merchant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Merchant.Entity = Nothing
					previousValue.MerchantProductProviders.Remove(Me)
				End If
				Me._Merchant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantProductProviders.Add(Me)
					Me._MerchantID = value.ID
				Else
					Me._MerchantID = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("Merchant")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_MerchantProductProvider1", Storage:="_Merchant1", ThisKey:="MerchantID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Merchant1() As Merchant
		Get
			Return Me._Merchant1.Entity
		End Get
		Set
			Dim previousValue As Merchant = Me._Merchant1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Merchant1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Merchant1.Entity = Nothing
					previousValue.MerchantProductProviders1.Remove(Me)
				End If
				Me._Merchant1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantProductProviders1.Add(Me)
					Me._MerchantID = value.ID
				Else
					Me._MerchantID = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("Merchant1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_MerchantProductProvider", Storage:="_Product", ThisKey:="ProductID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Product() As Product
		Get
			Return Me._Product.Entity
		End Get
		Set
			Dim previousValue As Product = Me._Product.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Product.Entity = Nothing
					previousValue.MerchantProductProviders.Remove(Me)
				End If
				Me._Product.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantProductProviders.Add(Me)
					Me._ProductID = value.ID
				Else
					Me._ProductID = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("Product")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_MerchantProductProvider1", Storage:="_Product1", ThisKey:="ProductID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Product1() As Product
		Get
			Return Me._Product1.Entity
		End Get
		Set
			Dim previousValue As Product = Me._Product1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Product1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Product1.Entity = Nothing
					previousValue.MerchantProductProviders1.Remove(Me)
				End If
				Me._Product1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantProductProviders1.Add(Me)
					Me._ProductID = value.ID
				Else
					Me._ProductID = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("Product1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Provider_MerchantProductProvider", Storage:="_Provider", ThisKey:="ProviderID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Provider() As Provider
		Get
			Return Me._Provider.Entity
		End Get
		Set
			Dim previousValue As Provider = Me._Provider.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Provider.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Provider.Entity = Nothing
					previousValue.MerchantProductProviders.Remove(Me)
				End If
				Me._Provider.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantProductProviders.Add(Me)
					Me._ProviderID = value.ID
				Else
					Me._ProviderID = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("Provider")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Provider_MerchantProductProvider1", Storage:="_Provider1", ThisKey:="ProviderID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Provider1() As Provider
		Get
			Return Me._Provider1.Entity
		End Get
		Set
			Dim previousValue As Provider = Me._Provider1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Provider1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Provider1.Entity = Nothing
					previousValue.MerchantProductProviders1.Remove(Me)
				End If
				Me._Provider1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantProductProviders1.Add(Me)
					Me._ProviderID = value.ID
				Else
					Me._ProviderID = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("Provider1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MerchantSource")>  _
Partial Public Class MerchantSource
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _MerchantDetails As EntitySet(Of MerchantDetail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MerchantDetails = New EntitySet(Of MerchantDetail)(AddressOf Me.attach_MerchantDetails, AddressOf Me.detach_MerchantDetails)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MerchantSource_MerchantDetail", Storage:="_MerchantDetails", ThisKey:="ID", OtherKey:="MerchantSourceID")>  _
	Public Property MerchantDetails() As EntitySet(Of MerchantDetail)
		Get
			Return Me._MerchantDetails
		End Get
		Set
			Me._MerchantDetails.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_MerchantDetails(ByVal entity As MerchantDetail)
		Me.SendPropertyChanging
		entity.MerchantSource = Me
	End Sub
	
	Private Sub detach_MerchantDetails(ByVal entity As MerchantDetail)
		Me.SendPropertyChanging
		entity.MerchantSource = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.MerchantTerminal")>  _
Partial Public Class MerchantTerminal
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _EnvironmentRepositoryID As System.Nullable(Of Long)
	
	Private _Reference As String
	
	Private _MerchantID As System.Nullable(Of Long)
	
	Private _FinancialInstitutionID As System.Nullable(Of Long)
	
	Private _ContractTermID As System.Nullable(Of Long)
	
	Private _ChannelID As System.Nullable(Of Long)
	
	Private _TerminalTypeID As System.Nullable(Of Long)
	
	Private _SupplierID As System.Nullable(Of Long)
	
	Private _PBLSerial As String
	
	Private _EFTVASSerial As String
	
	Private _PBLMPeriod As System.Nullable(Of Integer)
	
	Private _LayByPeriod As System.Nullable(Of Integer)
	
	Private _EMVPOSPeriod As System.Nullable(Of Integer)
	
	Private _NonEFTDevicePeriod As String
	
	Private _PBLMFee As System.Nullable(Of Double)
	
	Private _LBMFee As System.Nullable(Of Double)
	
	Private _PBLMAmount As System.Nullable(Of Decimal)
	
	Private _LBMAMount As System.Nullable(Of Decimal)
	
	Private _EMVPOSAmount As System.Nullable(Of Decimal)
	
	Private _NonEFTDeviceAmount As System.Nullable(Of Decimal)
	
	Private _PBLMDate As System.Nullable(Of Date)
	
	Private _LayByDate As System.Nullable(Of Date)
	
	Private _EMVPOSDate As System.Nullable(Of Date)
	
	Private _NonEFTDeviceDate As System.Nullable(Of Date)
	
	Private _ActivationDate As System.Nullable(Of Date)
	
	Private _TerminalActivationFee As System.Nullable(Of Decimal)
	
	Private _Location As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _IsActivation As System.Nullable(Of Boolean)
	
	Private _IsPBLM As System.Nullable(Of Boolean)
	
	Private _IsLayBy As System.Nullable(Of Boolean)
	
	Private _IsEFTPOS As System.Nullable(Of Boolean)
	
	Private _IsNonEFTDevice As System.Nullable(Of Boolean)
	
	Private _ApplicationRepositories As EntitySet(Of ApplicationRepository)
	
	Private _DebitOrders As EntitySet(Of DebitOrder)
	
	Private _DebitOrderHistories As EntitySet(Of DebitOrderHistory)
	
	Private _MerchantHistories As EntitySet(Of MerchantHistory)
	
	Private _TerminalMetrics As EntitySet(Of TerminalMetric)
	
	Private _TerminalProducts As EntitySet(Of TerminalProduct)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory1 As EntityRef(Of AuthDirectory)
	
	Private _Channel As EntityRef(Of Channel)
	
	Private _ContractTerm As EntityRef(Of ContractTerm)
	
	Private _EnvironmentRepository As EntityRef(Of EnvironmentRepository)
	
	Private _EnvironmentRepository1 As EntityRef(Of EnvironmentRepository)
	
	Private _FinancialInstitution As EntityRef(Of FinancialInstitution)
	
	Private _Merchant As EntityRef(Of Merchant)
	
	Private _Supplier As EntityRef(Of Supplier)
	
	Private _TerminalType As EntityRef(Of TerminalType)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnEnvironmentRepositoryIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnEnvironmentRepositoryIDChanged()
    End Sub
    Partial Private Sub OnReferenceChanging(value As String)
    End Sub
    Partial Private Sub OnReferenceChanged()
    End Sub
    Partial Private Sub OnMerchantIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMerchantIDChanged()
    End Sub
    Partial Private Sub OnFinancialInstitutionIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFinancialInstitutionIDChanged()
    End Sub
    Partial Private Sub OnContractTermIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnContractTermIDChanged()
    End Sub
    Partial Private Sub OnChannelIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnChannelIDChanged()
    End Sub
    Partial Private Sub OnTerminalTypeIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnTerminalTypeIDChanged()
    End Sub
    Partial Private Sub OnSupplierIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnSupplierIDChanged()
    End Sub
    Partial Private Sub OnPBLSerialChanging(value As String)
    End Sub
    Partial Private Sub OnPBLSerialChanged()
    End Sub
    Partial Private Sub OnEFTVASSerialChanging(value As String)
    End Sub
    Partial Private Sub OnEFTVASSerialChanged()
    End Sub
    Partial Private Sub OnPBLMPeriodChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnPBLMPeriodChanged()
    End Sub
    Partial Private Sub OnLayByPeriodChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnLayByPeriodChanged()
    End Sub
    Partial Private Sub OnEMVPOSPeriodChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnEMVPOSPeriodChanged()
    End Sub
    Partial Private Sub OnNonEFTDevicePeriodChanging(value As String)
    End Sub
    Partial Private Sub OnNonEFTDevicePeriodChanged()
    End Sub
    Partial Private Sub OnPBLMFeeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnPBLMFeeChanged()
    End Sub
    Partial Private Sub OnLBMFeeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnLBMFeeChanged()
    End Sub
    Partial Private Sub OnPBLMAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnPBLMAmountChanged()
    End Sub
    Partial Private Sub OnLBMAMountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnLBMAMountChanged()
    End Sub
    Partial Private Sub OnEMVPOSAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnEMVPOSAmountChanged()
    End Sub
    Partial Private Sub OnNonEFTDeviceAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnNonEFTDeviceAmountChanged()
    End Sub
    Partial Private Sub OnPBLMDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnPBLMDateChanged()
    End Sub
    Partial Private Sub OnLayByDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnLayByDateChanged()
    End Sub
    Partial Private Sub OnEMVPOSDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnEMVPOSDateChanged()
    End Sub
    Partial Private Sub OnNonEFTDeviceDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnNonEFTDeviceDateChanged()
    End Sub
    Partial Private Sub OnActivationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnActivationDateChanged()
    End Sub
    Partial Private Sub OnTerminalActivationFeeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnTerminalActivationFeeChanged()
    End Sub
    Partial Private Sub OnLocationChanging(value As String)
    End Sub
    Partial Private Sub OnLocationChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnIsActivationChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActivationChanged()
    End Sub
    Partial Private Sub OnIsPBLMChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsPBLMChanged()
    End Sub
    Partial Private Sub OnIsLayByChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsLayByChanged()
    End Sub
    Partial Private Sub OnIsEFTPOSChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsEFTPOSChanged()
    End Sub
    Partial Private Sub OnIsNonEFTDeviceChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsNonEFTDeviceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationRepositories = New EntitySet(Of ApplicationRepository)(AddressOf Me.attach_ApplicationRepositories, AddressOf Me.detach_ApplicationRepositories)
		Me._DebitOrders = New EntitySet(Of DebitOrder)(AddressOf Me.attach_DebitOrders, AddressOf Me.detach_DebitOrders)
		Me._DebitOrderHistories = New EntitySet(Of DebitOrderHistory)(AddressOf Me.attach_DebitOrderHistories, AddressOf Me.detach_DebitOrderHistories)
		Me._MerchantHistories = New EntitySet(Of MerchantHistory)(AddressOf Me.attach_MerchantHistories, AddressOf Me.detach_MerchantHistories)
		Me._TerminalMetrics = New EntitySet(Of TerminalMetric)(AddressOf Me.attach_TerminalMetrics, AddressOf Me.detach_TerminalMetrics)
		Me._TerminalProducts = New EntitySet(Of TerminalProduct)(AddressOf Me.attach_TerminalProducts, AddressOf Me.detach_TerminalProducts)
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory1 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._Channel = CType(Nothing, EntityRef(Of Channel))
		Me._ContractTerm = CType(Nothing, EntityRef(Of ContractTerm))
		Me._EnvironmentRepository = CType(Nothing, EntityRef(Of EnvironmentRepository))
		Me._EnvironmentRepository1 = CType(Nothing, EntityRef(Of EnvironmentRepository))
		Me._FinancialInstitution = CType(Nothing, EntityRef(Of FinancialInstitution))
		Me._Merchant = CType(Nothing, EntityRef(Of Merchant))
		Me._Supplier = CType(Nothing, EntityRef(Of Supplier))
		Me._TerminalType = CType(Nothing, EntityRef(Of TerminalType))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnvironmentRepositoryID", DbType:="BigInt")>  _
	Public Property EnvironmentRepositoryID() As System.Nullable(Of Long)
		Get
			Return Me._EnvironmentRepositoryID
		End Get
		Set
			If (Me._EnvironmentRepositoryID.Equals(value) = false) Then
				If (Me._EnvironmentRepository.HasLoadedOrAssignedValue OrElse Me._EnvironmentRepository1.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEnvironmentRepositoryIDChanging(value)
				Me.SendPropertyChanging
				Me._EnvironmentRepositoryID = value
				Me.SendPropertyChanged("EnvironmentRepositoryID")
				Me.OnEnvironmentRepositoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reference", DbType:="NVarChar(50)")>  _
	Public Property Reference() As String
		Get
			Return Me._Reference
		End Get
		Set
			If (String.Equals(Me._Reference, value) = false) Then
				Me.OnReferenceChanging(value)
				Me.SendPropertyChanging
				Me._Reference = value
				Me.SendPropertyChanged("Reference")
				Me.OnReferenceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantID", DbType:="BigInt")>  _
	Public Property MerchantID() As System.Nullable(Of Long)
		Get
			Return Me._MerchantID
		End Get
		Set
			If (Me._MerchantID.Equals(value) = false) Then
				If Me._Merchant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMerchantIDChanging(value)
				Me.SendPropertyChanging
				Me._MerchantID = value
				Me.SendPropertyChanged("MerchantID")
				Me.OnMerchantIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinancialInstitutionID", DbType:="BigInt")>  _
	Public Property FinancialInstitutionID() As System.Nullable(Of Long)
		Get
			Return Me._FinancialInstitutionID
		End Get
		Set
			If (Me._FinancialInstitutionID.Equals(value) = false) Then
				If Me._FinancialInstitution.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFinancialInstitutionIDChanging(value)
				Me.SendPropertyChanging
				Me._FinancialInstitutionID = value
				Me.SendPropertyChanged("FinancialInstitutionID")
				Me.OnFinancialInstitutionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContractTermID", DbType:="BigInt")>  _
	Public Property ContractTermID() As System.Nullable(Of Long)
		Get
			Return Me._ContractTermID
		End Get
		Set
			If (Me._ContractTermID.Equals(value) = false) Then
				If Me._ContractTerm.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnContractTermIDChanging(value)
				Me.SendPropertyChanging
				Me._ContractTermID = value
				Me.SendPropertyChanged("ContractTermID")
				Me.OnContractTermIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ChannelID", DbType:="BigInt")>  _
	Public Property ChannelID() As System.Nullable(Of Long)
		Get
			Return Me._ChannelID
		End Get
		Set
			If (Me._ChannelID.Equals(value) = false) Then
				If Me._Channel.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnChannelIDChanging(value)
				Me.SendPropertyChanging
				Me._ChannelID = value
				Me.SendPropertyChanged("ChannelID")
				Me.OnChannelIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TerminalTypeID", DbType:="BigInt")>  _
	Public Property TerminalTypeID() As System.Nullable(Of Long)
		Get
			Return Me._TerminalTypeID
		End Get
		Set
			If (Me._TerminalTypeID.Equals(value) = false) Then
				If Me._TerminalType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTerminalTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._TerminalTypeID = value
				Me.SendPropertyChanged("TerminalTypeID")
				Me.OnTerminalTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SupplierID", DbType:="BigInt")>  _
	Public Property SupplierID() As System.Nullable(Of Long)
		Get
			Return Me._SupplierID
		End Get
		Set
			If (Me._SupplierID.Equals(value) = false) Then
				If Me._Supplier.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSupplierIDChanging(value)
				Me.SendPropertyChanging
				Me._SupplierID = value
				Me.SendPropertyChanged("SupplierID")
				Me.OnSupplierIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PBLSerial", DbType:="NVarChar(255)")>  _
	Public Property PBLSerial() As String
		Get
			Return Me._PBLSerial
		End Get
		Set
			If (String.Equals(Me._PBLSerial, value) = false) Then
				Me.OnPBLSerialChanging(value)
				Me.SendPropertyChanging
				Me._PBLSerial = value
				Me.SendPropertyChanged("PBLSerial")
				Me.OnPBLSerialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EFTVASSerial", DbType:="NVarChar(255)")>  _
	Public Property EFTVASSerial() As String
		Get
			Return Me._EFTVASSerial
		End Get
		Set
			If (String.Equals(Me._EFTVASSerial, value) = false) Then
				Me.OnEFTVASSerialChanging(value)
				Me.SendPropertyChanging
				Me._EFTVASSerial = value
				Me.SendPropertyChanged("EFTVASSerial")
				Me.OnEFTVASSerialChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PBLMPeriod", DbType:="Int")>  _
	Public Property PBLMPeriod() As System.Nullable(Of Integer)
		Get
			Return Me._PBLMPeriod
		End Get
		Set
			If (Me._PBLMPeriod.Equals(value) = false) Then
				Me.OnPBLMPeriodChanging(value)
				Me.SendPropertyChanging
				Me._PBLMPeriod = value
				Me.SendPropertyChanged("PBLMPeriod")
				Me.OnPBLMPeriodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LayByPeriod", DbType:="Int")>  _
	Public Property LayByPeriod() As System.Nullable(Of Integer)
		Get
			Return Me._LayByPeriod
		End Get
		Set
			If (Me._LayByPeriod.Equals(value) = false) Then
				Me.OnLayByPeriodChanging(value)
				Me.SendPropertyChanging
				Me._LayByPeriod = value
				Me.SendPropertyChanged("LayByPeriod")
				Me.OnLayByPeriodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMVPOSPeriod", DbType:="Int")>  _
	Public Property EMVPOSPeriod() As System.Nullable(Of Integer)
		Get
			Return Me._EMVPOSPeriod
		End Get
		Set
			If (Me._EMVPOSPeriod.Equals(value) = false) Then
				Me.OnEMVPOSPeriodChanging(value)
				Me.SendPropertyChanging
				Me._EMVPOSPeriod = value
				Me.SendPropertyChanged("EMVPOSPeriod")
				Me.OnEMVPOSPeriodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NonEFTDevicePeriod", DbType:="NChar(10)")>  _
	Public Property NonEFTDevicePeriod() As String
		Get
			Return Me._NonEFTDevicePeriod
		End Get
		Set
			If (String.Equals(Me._NonEFTDevicePeriod, value) = false) Then
				Me.OnNonEFTDevicePeriodChanging(value)
				Me.SendPropertyChanging
				Me._NonEFTDevicePeriod = value
				Me.SendPropertyChanged("NonEFTDevicePeriod")
				Me.OnNonEFTDevicePeriodChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PBLMFee", DbType:="Float")>  _
	Public Property PBLMFee() As System.Nullable(Of Double)
		Get
			Return Me._PBLMFee
		End Get
		Set
			If (Me._PBLMFee.Equals(value) = false) Then
				Me.OnPBLMFeeChanging(value)
				Me.SendPropertyChanging
				Me._PBLMFee = value
				Me.SendPropertyChanged("PBLMFee")
				Me.OnPBLMFeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LBMFee", DbType:="Float")>  _
	Public Property LBMFee() As System.Nullable(Of Double)
		Get
			Return Me._LBMFee
		End Get
		Set
			If (Me._LBMFee.Equals(value) = false) Then
				Me.OnLBMFeeChanging(value)
				Me.SendPropertyChanging
				Me._LBMFee = value
				Me.SendPropertyChanged("LBMFee")
				Me.OnLBMFeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PBLMAmount", DbType:="Money")>  _
	Public Property PBLMAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._PBLMAmount
		End Get
		Set
			If (Me._PBLMAmount.Equals(value) = false) Then
				Me.OnPBLMAmountChanging(value)
				Me.SendPropertyChanging
				Me._PBLMAmount = value
				Me.SendPropertyChanged("PBLMAmount")
				Me.OnPBLMAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LBMAMount", DbType:="Money")>  _
	Public Property LBMAMount() As System.Nullable(Of Decimal)
		Get
			Return Me._LBMAMount
		End Get
		Set
			If (Me._LBMAMount.Equals(value) = false) Then
				Me.OnLBMAMountChanging(value)
				Me.SendPropertyChanging
				Me._LBMAMount = value
				Me.SendPropertyChanged("LBMAMount")
				Me.OnLBMAMountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMVPOSAmount", DbType:="Money")>  _
	Public Property EMVPOSAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._EMVPOSAmount
		End Get
		Set
			If (Me._EMVPOSAmount.Equals(value) = false) Then
				Me.OnEMVPOSAmountChanging(value)
				Me.SendPropertyChanging
				Me._EMVPOSAmount = value
				Me.SendPropertyChanged("EMVPOSAmount")
				Me.OnEMVPOSAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NonEFTDeviceAmount", DbType:="Money")>  _
	Public Property NonEFTDeviceAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._NonEFTDeviceAmount
		End Get
		Set
			If (Me._NonEFTDeviceAmount.Equals(value) = false) Then
				Me.OnNonEFTDeviceAmountChanging(value)
				Me.SendPropertyChanging
				Me._NonEFTDeviceAmount = value
				Me.SendPropertyChanged("NonEFTDeviceAmount")
				Me.OnNonEFTDeviceAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PBLMDate", DbType:="DateTime")>  _
	Public Property PBLMDate() As System.Nullable(Of Date)
		Get
			Return Me._PBLMDate
		End Get
		Set
			If (Me._PBLMDate.Equals(value) = false) Then
				Me.OnPBLMDateChanging(value)
				Me.SendPropertyChanging
				Me._PBLMDate = value
				Me.SendPropertyChanged("PBLMDate")
				Me.OnPBLMDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LayByDate", DbType:="DateTime")>  _
	Public Property LayByDate() As System.Nullable(Of Date)
		Get
			Return Me._LayByDate
		End Get
		Set
			If (Me._LayByDate.Equals(value) = false) Then
				Me.OnLayByDateChanging(value)
				Me.SendPropertyChanging
				Me._LayByDate = value
				Me.SendPropertyChanged("LayByDate")
				Me.OnLayByDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EMVPOSDate", DbType:="DateTime")>  _
	Public Property EMVPOSDate() As System.Nullable(Of Date)
		Get
			Return Me._EMVPOSDate
		End Get
		Set
			If (Me._EMVPOSDate.Equals(value) = false) Then
				Me.OnEMVPOSDateChanging(value)
				Me.SendPropertyChanging
				Me._EMVPOSDate = value
				Me.SendPropertyChanged("EMVPOSDate")
				Me.OnEMVPOSDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NonEFTDeviceDate", DbType:="DateTime")>  _
	Public Property NonEFTDeviceDate() As System.Nullable(Of Date)
		Get
			Return Me._NonEFTDeviceDate
		End Get
		Set
			If (Me._NonEFTDeviceDate.Equals(value) = false) Then
				Me.OnNonEFTDeviceDateChanging(value)
				Me.SendPropertyChanging
				Me._NonEFTDeviceDate = value
				Me.SendPropertyChanged("NonEFTDeviceDate")
				Me.OnNonEFTDeviceDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivationDate", DbType:="DateTime")>  _
	Public Property ActivationDate() As System.Nullable(Of Date)
		Get
			Return Me._ActivationDate
		End Get
		Set
			If (Me._ActivationDate.Equals(value) = false) Then
				Me.OnActivationDateChanging(value)
				Me.SendPropertyChanging
				Me._ActivationDate = value
				Me.SendPropertyChanged("ActivationDate")
				Me.OnActivationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TerminalActivationFee", DbType:="Money")>  _
	Public Property TerminalActivationFee() As System.Nullable(Of Decimal)
		Get
			Return Me._TerminalActivationFee
		End Get
		Set
			If (Me._TerminalActivationFee.Equals(value) = false) Then
				Me.OnTerminalActivationFeeChanging(value)
				Me.SendPropertyChanging
				Me._TerminalActivationFee = value
				Me.SendPropertyChanged("TerminalActivationFee")
				Me.OnTerminalActivationFeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Location", DbType:="NVarChar(250)")>  _
	Public Property Location() As String
		Get
			Return Me._Location
		End Get
		Set
			If (String.Equals(Me._Location, value) = false) Then
				Me.OnLocationChanging(value)
				Me.SendPropertyChanging
				Me._Location = value
				Me.SendPropertyChanged("Location")
				Me.OnLocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				If Me._AuthDirectory1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActivation", DbType:="Bit")>  _
	Public Property IsActivation() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActivation
		End Get
		Set
			If (Me._IsActivation.Equals(value) = false) Then
				Me.OnIsActivationChanging(value)
				Me.SendPropertyChanging
				Me._IsActivation = value
				Me.SendPropertyChanged("IsActivation")
				Me.OnIsActivationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsPBLM", DbType:="Bit")>  _
	Public Property IsPBLM() As System.Nullable(Of Boolean)
		Get
			Return Me._IsPBLM
		End Get
		Set
			If (Me._IsPBLM.Equals(value) = false) Then
				Me.OnIsPBLMChanging(value)
				Me.SendPropertyChanging
				Me._IsPBLM = value
				Me.SendPropertyChanged("IsPBLM")
				Me.OnIsPBLMChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsLayBy", DbType:="Bit")>  _
	Public Property IsLayBy() As System.Nullable(Of Boolean)
		Get
			Return Me._IsLayBy
		End Get
		Set
			If (Me._IsLayBy.Equals(value) = false) Then
				Me.OnIsLayByChanging(value)
				Me.SendPropertyChanging
				Me._IsLayBy = value
				Me.SendPropertyChanged("IsLayBy")
				Me.OnIsLayByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsEFTPOS", DbType:="Bit")>  _
	Public Property IsEFTPOS() As System.Nullable(Of Boolean)
		Get
			Return Me._IsEFTPOS
		End Get
		Set
			If (Me._IsEFTPOS.Equals(value) = false) Then
				Me.OnIsEFTPOSChanging(value)
				Me.SendPropertyChanging
				Me._IsEFTPOS = value
				Me.SendPropertyChanged("IsEFTPOS")
				Me.OnIsEFTPOSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsNonEFTDevice", DbType:="Bit")>  _
	Public Property IsNonEFTDevice() As System.Nullable(Of Boolean)
		Get
			Return Me._IsNonEFTDevice
		End Get
		Set
			If (Me._IsNonEFTDevice.Equals(value) = false) Then
				Me.OnIsNonEFTDeviceChanging(value)
				Me.SendPropertyChanging
				Me._IsNonEFTDevice = value
				Me.SendPropertyChanged("IsNonEFTDevice")
				Me.OnIsNonEFTDeviceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MerchantTerminal_ApplicationRepository", Storage:="_ApplicationRepositories", ThisKey:="ID", OtherKey:="MerchantTerminalID")>  _
	Public Property ApplicationRepositories() As EntitySet(Of ApplicationRepository)
		Get
			Return Me._ApplicationRepositories
		End Get
		Set
			Me._ApplicationRepositories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MerchantTerminal_DebitOrder", Storage:="_DebitOrders", ThisKey:="ID", OtherKey:="MerchantTerminalID")>  _
	Public Property DebitOrders() As EntitySet(Of DebitOrder)
		Get
			Return Me._DebitOrders
		End Get
		Set
			Me._DebitOrders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MerchantTerminal_DebitOrderHistory", Storage:="_DebitOrderHistories", ThisKey:="ID", OtherKey:="MerchantTerminalID")>  _
	Public Property DebitOrderHistories() As EntitySet(Of DebitOrderHistory)
		Get
			Return Me._DebitOrderHistories
		End Get
		Set
			Me._DebitOrderHistories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MerchantTerminal_MerchantHistory", Storage:="_MerchantHistories", ThisKey:="ID", OtherKey:="MerchantTerminalID")>  _
	Public Property MerchantHistories() As EntitySet(Of MerchantHistory)
		Get
			Return Me._MerchantHistories
		End Get
		Set
			Me._MerchantHistories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MerchantTerminal_TerminalMetric", Storage:="_TerminalMetrics", ThisKey:="ID", OtherKey:="MerchantTerminalID")>  _
	Public Property TerminalMetrics() As EntitySet(Of TerminalMetric)
		Get
			Return Me._TerminalMetrics
		End Get
		Set
			Me._TerminalMetrics.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MerchantTerminal_TerminalProduct", Storage:="_TerminalProducts", ThisKey:="ID", OtherKey:="MerchantTerminalID")>  _
	Public Property TerminalProducts() As EntitySet(Of TerminalProduct)
		Get
			Return Me._TerminalProducts
		End Get
		Set
			Me._TerminalProducts.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_MerchantTerminal", Storage:="_AuthDirectory", ThisKey:="CreatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.MerchantTerminals.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantTerminals.Add(Me)
					Me._CreatedBy = value.ID
				Else
					Me._CreatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_MerchantTerminal1", Storage:="_AuthDirectory1", ThisKey:="UpdatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory1() As AuthDirectory
		Get
			Return Me._AuthDirectory1.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory1.Entity = Nothing
					previousValue.MerchantTerminals1.Remove(Me)
				End If
				Me._AuthDirectory1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantTerminals1.Add(Me)
					Me._UpdatedBy = value.ID
				Else
					Me._UpdatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Channel_MerchantTerminal", Storage:="_Channel", ThisKey:="ChannelID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Channel() As Channel
		Get
			Return Me._Channel.Entity
		End Get
		Set
			Dim previousValue As Channel = Me._Channel.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Channel.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Channel.Entity = Nothing
					previousValue.MerchantTerminals.Remove(Me)
				End If
				Me._Channel.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantTerminals.Add(Me)
					Me._ChannelID = value.ID
				Else
					Me._ChannelID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Channel")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ContractTerm_MerchantTerminal", Storage:="_ContractTerm", ThisKey:="ContractTermID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property ContractTerm() As ContractTerm
		Get
			Return Me._ContractTerm.Entity
		End Get
		Set
			Dim previousValue As ContractTerm = Me._ContractTerm.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ContractTerm.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ContractTerm.Entity = Nothing
					previousValue.MerchantTerminals.Remove(Me)
				End If
				Me._ContractTerm.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantTerminals.Add(Me)
					Me._ContractTermID = value.ID
				Else
					Me._ContractTermID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("ContractTerm")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EnvironmentRepository_MerchantTerminal", Storage:="_EnvironmentRepository", ThisKey:="EnvironmentRepositoryID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property EnvironmentRepository() As EnvironmentRepository
		Get
			Return Me._EnvironmentRepository.Entity
		End Get
		Set
			Dim previousValue As EnvironmentRepository = Me._EnvironmentRepository.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EnvironmentRepository.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EnvironmentRepository.Entity = Nothing
					previousValue.MerchantTerminals.Remove(Me)
				End If
				Me._EnvironmentRepository.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantTerminals.Add(Me)
					Me._EnvironmentRepositoryID = value.ID
				Else
					Me._EnvironmentRepositoryID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("EnvironmentRepository")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EnvironmentRepository_MerchantTerminal1", Storage:="_EnvironmentRepository1", ThisKey:="EnvironmentRepositoryID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property EnvironmentRepository1() As EnvironmentRepository
		Get
			Return Me._EnvironmentRepository1.Entity
		End Get
		Set
			Dim previousValue As EnvironmentRepository = Me._EnvironmentRepository1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EnvironmentRepository1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EnvironmentRepository1.Entity = Nothing
					previousValue.MerchantTerminals1.Remove(Me)
				End If
				Me._EnvironmentRepository1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantTerminals1.Add(Me)
					Me._EnvironmentRepositoryID = value.ID
				Else
					Me._EnvironmentRepositoryID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("EnvironmentRepository1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FinancialInstitution_MerchantTerminal", Storage:="_FinancialInstitution", ThisKey:="FinancialInstitutionID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property FinancialInstitution() As FinancialInstitution
		Get
			Return Me._FinancialInstitution.Entity
		End Get
		Set
			Dim previousValue As FinancialInstitution = Me._FinancialInstitution.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FinancialInstitution.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FinancialInstitution.Entity = Nothing
					previousValue.MerchantTerminals.Remove(Me)
				End If
				Me._FinancialInstitution.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantTerminals.Add(Me)
					Me._FinancialInstitutionID = value.ID
				Else
					Me._FinancialInstitutionID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("FinancialInstitution")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_MerchantTerminal", Storage:="_Merchant", ThisKey:="MerchantID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Merchant() As Merchant
		Get
			Return Me._Merchant.Entity
		End Get
		Set
			Dim previousValue As Merchant = Me._Merchant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Merchant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Merchant.Entity = Nothing
					previousValue.MerchantTerminals.Remove(Me)
				End If
				Me._Merchant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantTerminals.Add(Me)
					Me._MerchantID = value.ID
				Else
					Me._MerchantID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Merchant")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Supplier_MerchantTerminal", Storage:="_Supplier", ThisKey:="SupplierID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Supplier() As Supplier
		Get
			Return Me._Supplier.Entity
		End Get
		Set
			Dim previousValue As Supplier = Me._Supplier.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Supplier.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Supplier.Entity = Nothing
					previousValue.MerchantTerminals.Remove(Me)
				End If
				Me._Supplier.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantTerminals.Add(Me)
					Me._SupplierID = value.ID
				Else
					Me._SupplierID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Supplier")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TerminalType_MerchantTerminal", Storage:="_TerminalType", ThisKey:="TerminalTypeID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property TerminalType() As TerminalType
		Get
			Return Me._TerminalType.Entity
		End Get
		Set
			Dim previousValue As TerminalType = Me._TerminalType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._TerminalType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._TerminalType.Entity = Nothing
					previousValue.MerchantTerminals.Remove(Me)
				End If
				Me._TerminalType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.MerchantTerminals.Add(Me)
					Me._TerminalTypeID = value.ID
				Else
					Me._TerminalTypeID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("TerminalType")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApplicationRepositories(ByVal entity As ApplicationRepository)
		Me.SendPropertyChanging
		entity.MerchantTerminal = Me
	End Sub
	
	Private Sub detach_ApplicationRepositories(ByVal entity As ApplicationRepository)
		Me.SendPropertyChanging
		entity.MerchantTerminal = Nothing
	End Sub
	
	Private Sub attach_DebitOrders(ByVal entity As DebitOrder)
		Me.SendPropertyChanging
		entity.MerchantTerminal = Me
	End Sub
	
	Private Sub detach_DebitOrders(ByVal entity As DebitOrder)
		Me.SendPropertyChanging
		entity.MerchantTerminal = Nothing
	End Sub
	
	Private Sub attach_DebitOrderHistories(ByVal entity As DebitOrderHistory)
		Me.SendPropertyChanging
		entity.MerchantTerminal = Me
	End Sub
	
	Private Sub detach_DebitOrderHistories(ByVal entity As DebitOrderHistory)
		Me.SendPropertyChanging
		entity.MerchantTerminal = Nothing
	End Sub
	
	Private Sub attach_MerchantHistories(ByVal entity As MerchantHistory)
		Me.SendPropertyChanging
		entity.MerchantTerminal = Me
	End Sub
	
	Private Sub detach_MerchantHistories(ByVal entity As MerchantHistory)
		Me.SendPropertyChanging
		entity.MerchantTerminal = Nothing
	End Sub
	
	Private Sub attach_TerminalMetrics(ByVal entity As TerminalMetric)
		Me.SendPropertyChanging
		entity.MerchantTerminal = Me
	End Sub
	
	Private Sub detach_TerminalMetrics(ByVal entity As TerminalMetric)
		Me.SendPropertyChanging
		entity.MerchantTerminal = Nothing
	End Sub
	
	Private Sub attach_TerminalProducts(ByVal entity As TerminalProduct)
		Me.SendPropertyChanging
		entity.MerchantTerminal = Me
	End Sub
	
	Private Sub detach_TerminalProducts(ByVal entity As TerminalProduct)
		Me.SendPropertyChanging
		entity.MerchantTerminal = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Metric")>  _
Partial Public Class Metric
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _RaiseAlert As System.Nullable(Of Boolean)
	
	Private _Minimum As String
	
	Private _Maximum As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _TerminalMetrics As EntitySet(Of TerminalMetric)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory1 As EntityRef(Of AuthDirectory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnRaiseAlertChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnRaiseAlertChanged()
    End Sub
    Partial Private Sub OnMinimumChanging(value As String)
    End Sub
    Partial Private Sub OnMinimumChanged()
    End Sub
    Partial Private Sub OnMaximumChanging(value As String)
    End Sub
    Partial Private Sub OnMaximumChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._TerminalMetrics = New EntitySet(Of TerminalMetric)(AddressOf Me.attach_TerminalMetrics, AddressOf Me.detach_TerminalMetrics)
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory1 = CType(Nothing, EntityRef(Of AuthDirectory))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RaiseAlert", DbType:="Bit")>  _
	Public Property RaiseAlert() As System.Nullable(Of Boolean)
		Get
			Return Me._RaiseAlert
		End Get
		Set
			If (Me._RaiseAlert.Equals(value) = false) Then
				Me.OnRaiseAlertChanging(value)
				Me.SendPropertyChanging
				Me._RaiseAlert = value
				Me.SendPropertyChanged("RaiseAlert")
				Me.OnRaiseAlertChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Minimum", DbType:="NVarChar(50)")>  _
	Public Property Minimum() As String
		Get
			Return Me._Minimum
		End Get
		Set
			If (String.Equals(Me._Minimum, value) = false) Then
				Me.OnMinimumChanging(value)
				Me.SendPropertyChanging
				Me._Minimum = value
				Me.SendPropertyChanged("Minimum")
				Me.OnMinimumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Maximum", DbType:="NVarChar(50)")>  _
	Public Property Maximum() As String
		Get
			Return Me._Maximum
		End Get
		Set
			If (String.Equals(Me._Maximum, value) = false) Then
				Me.OnMaximumChanging(value)
				Me.SendPropertyChanging
				Me._Maximum = value
				Me.SendPropertyChanged("Maximum")
				Me.OnMaximumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				If Me._AuthDirectory1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Metric_TerminalMetric", Storage:="_TerminalMetrics", ThisKey:="ID", OtherKey:="MetricID")>  _
	Public Property TerminalMetrics() As EntitySet(Of TerminalMetric)
		Get
			Return Me._TerminalMetrics
		End Get
		Set
			Me._TerminalMetrics.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Metric", Storage:="_AuthDirectory", ThisKey:="CreatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.Metrics.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Metrics.Add(Me)
					Me._CreatedBy = value.ID
				Else
					Me._CreatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Metric1", Storage:="_AuthDirectory1", ThisKey:="UpdatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory1() As AuthDirectory
		Get
			Return Me._AuthDirectory1.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory1.Entity = Nothing
					previousValue.Metrics1.Remove(Me)
				End If
				Me._AuthDirectory1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Metrics1.Add(Me)
					Me._UpdatedBy = value.ID
				Else
					Me._UpdatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_TerminalMetrics(ByVal entity As TerminalMetric)
		Me.SendPropertyChanging
		entity.Metric = Me
	End Sub
	
	Private Sub detach_TerminalMetrics(ByVal entity As TerminalMetric)
		Me.SendPropertyChanging
		entity.Metric = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OTP")>  _
Partial Public Class OTP
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _KeyID As System.Nullable(Of Long)
	
	Private _OTPTypeID As System.Nullable(Of Long)
	
	Private _Redeemed As System.Nullable(Of Boolean)
	
	Private _Expired As System.Nullable(Of Boolean)
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnKeyIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnKeyIDChanged()
    End Sub
    Partial Private Sub OnOTPTypeIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnOTPTypeIDChanged()
    End Sub
    Partial Private Sub OnRedeemedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnRedeemedChanged()
    End Sub
    Partial Private Sub OnExpiredChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnExpiredChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(10)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_KeyID", DbType:="BigInt")>  _
	Public Property KeyID() As System.Nullable(Of Long)
		Get
			Return Me._KeyID
		End Get
		Set
			If (Me._KeyID.Equals(value) = false) Then
				Me.OnKeyIDChanging(value)
				Me.SendPropertyChanging
				Me._KeyID = value
				Me.SendPropertyChanged("KeyID")
				Me.OnKeyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OTPTypeID", DbType:="BigInt")>  _
	Public Property OTPTypeID() As System.Nullable(Of Long)
		Get
			Return Me._OTPTypeID
		End Get
		Set
			If (Me._OTPTypeID.Equals(value) = false) Then
				Me.OnOTPTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._OTPTypeID = value
				Me.SendPropertyChanged("OTPTypeID")
				Me.OnOTPTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Redeemed", DbType:="Bit")>  _
	Public Property Redeemed() As System.Nullable(Of Boolean)
		Get
			Return Me._Redeemed
		End Get
		Set
			If (Me._Redeemed.Equals(value) = false) Then
				Me.OnRedeemedChanging(value)
				Me.SendPropertyChanging
				Me._Redeemed = value
				Me.SendPropertyChanged("Redeemed")
				Me.OnRedeemedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Expired", DbType:="Bit")>  _
	Public Property Expired() As System.Nullable(Of Boolean)
		Get
			Return Me._Expired
		End Get
		Set
			If (Me._Expired.Equals(value) = false) Then
				Me.OnExpiredChanging(value)
				Me.SendPropertyChanging
				Me._Expired = value
				Me.SendPropertyChanged("Expired")
				Me.OnExpiredChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.OTPType")>  _
Partial Public Class OTPType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory1 As EntityRef(Of AuthDirectory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory1 = CType(Nothing, EntityRef(Of AuthDirectory))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				If Me._AuthDirectory1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_OTPType", Storage:="_AuthDirectory", ThisKey:="CreatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.OTPTypes.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OTPTypes.Add(Me)
					Me._CreatedBy = value.ID
				Else
					Me._CreatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_OTPType1", Storage:="_AuthDirectory1", ThisKey:="UpdatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory1() As AuthDirectory
		Get
			Return Me._AuthDirectory1.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory1.Entity = Nothing
					previousValue.OTPTypes1.Remove(Me)
				End If
				Me._AuthDirectory1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.OTPTypes1.Add(Me)
					Me._UpdatedBy = value.ID
				Else
					Me._UpdatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Outcome")>  _
Partial Public Class Outcome
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Product")>  _
Partial Public Class Product
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _FinancialInstitutionID As System.Nullable(Of Long)
	
	Private _MerchantID As System.Nullable(Of Long)
	
	Private _EnvironmentRepositoryID As System.Nullable(Of Long)
	
	Private _Subscription As System.Nullable(Of Decimal)
	
	Private _Commission As System.Nullable(Of Double)
	
	Private _ActivationFee As System.Nullable(Of Decimal)
	
	Private _Deposit As System.Nullable(Of Double)
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _ApplicationRepositories As EntitySet(Of ApplicationRepository)
	
	Private _MerchantProductProviders As EntitySet(Of MerchantProductProvider)
	
	Private _MerchantProductProviders1 As EntitySet(Of MerchantProductProvider)
	
	Private _ProductBands As EntitySet(Of ProductBand)
	
	Private _TerminalProducts As EntitySet(Of TerminalProduct)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory1 As EntityRef(Of AuthDirectory)
	
	Private _EnvironmentRepository As EntityRef(Of EnvironmentRepository)
	
	Private _EnvironmentRepository1 As EntityRef(Of EnvironmentRepository)
	
	Private _FinancialInstitution As EntityRef(Of FinancialInstitution)
	
	Private _Merchant As EntityRef(Of Merchant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnFinancialInstitutionIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFinancialInstitutionIDChanged()
    End Sub
    Partial Private Sub OnMerchantIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMerchantIDChanged()
    End Sub
    Partial Private Sub OnEnvironmentRepositoryIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnEnvironmentRepositoryIDChanged()
    End Sub
    Partial Private Sub OnSubscriptionChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSubscriptionChanged()
    End Sub
    Partial Private Sub OnCommissionChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCommissionChanged()
    End Sub
    Partial Private Sub OnActivationFeeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnActivationFeeChanged()
    End Sub
    Partial Private Sub OnDepositChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDepositChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationRepositories = New EntitySet(Of ApplicationRepository)(AddressOf Me.attach_ApplicationRepositories, AddressOf Me.detach_ApplicationRepositories)
		Me._MerchantProductProviders = New EntitySet(Of MerchantProductProvider)(AddressOf Me.attach_MerchantProductProviders, AddressOf Me.detach_MerchantProductProviders)
		Me._MerchantProductProviders1 = New EntitySet(Of MerchantProductProvider)(AddressOf Me.attach_MerchantProductProviders1, AddressOf Me.detach_MerchantProductProviders1)
		Me._ProductBands = New EntitySet(Of ProductBand)(AddressOf Me.attach_ProductBands, AddressOf Me.detach_ProductBands)
		Me._TerminalProducts = New EntitySet(Of TerminalProduct)(AddressOf Me.attach_TerminalProducts, AddressOf Me.detach_TerminalProducts)
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory1 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._EnvironmentRepository = CType(Nothing, EntityRef(Of EnvironmentRepository))
		Me._EnvironmentRepository1 = CType(Nothing, EntityRef(Of EnvironmentRepository))
		Me._FinancialInstitution = CType(Nothing, EntityRef(Of FinancialInstitution))
		Me._Merchant = CType(Nothing, EntityRef(Of Merchant))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinancialInstitutionID", DbType:="BigInt")>  _
	Public Property FinancialInstitutionID() As System.Nullable(Of Long)
		Get
			Return Me._FinancialInstitutionID
		End Get
		Set
			If (Me._FinancialInstitutionID.Equals(value) = false) Then
				If Me._FinancialInstitution.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFinancialInstitutionIDChanging(value)
				Me.SendPropertyChanging
				Me._FinancialInstitutionID = value
				Me.SendPropertyChanged("FinancialInstitutionID")
				Me.OnFinancialInstitutionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantID", DbType:="BigInt")>  _
	Public Property MerchantID() As System.Nullable(Of Long)
		Get
			Return Me._MerchantID
		End Get
		Set
			If (Me._MerchantID.Equals(value) = false) Then
				If Me._Merchant.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMerchantIDChanging(value)
				Me.SendPropertyChanging
				Me._MerchantID = value
				Me.SendPropertyChanged("MerchantID")
				Me.OnMerchantIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnvironmentRepositoryID", DbType:="BigInt")>  _
	Public Property EnvironmentRepositoryID() As System.Nullable(Of Long)
		Get
			Return Me._EnvironmentRepositoryID
		End Get
		Set
			If (Me._EnvironmentRepositoryID.Equals(value) = false) Then
				If (Me._EnvironmentRepository.HasLoadedOrAssignedValue OrElse Me._EnvironmentRepository1.HasLoadedOrAssignedValue) Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEnvironmentRepositoryIDChanging(value)
				Me.SendPropertyChanging
				Me._EnvironmentRepositoryID = value
				Me.SendPropertyChanged("EnvironmentRepositoryID")
				Me.OnEnvironmentRepositoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subscription", DbType:="Money")>  _
	Public Property Subscription() As System.Nullable(Of Decimal)
		Get
			Return Me._Subscription
		End Get
		Set
			If (Me._Subscription.Equals(value) = false) Then
				Me.OnSubscriptionChanging(value)
				Me.SendPropertyChanging
				Me._Subscription = value
				Me.SendPropertyChanged("Subscription")
				Me.OnSubscriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Commission", DbType:="Float")>  _
	Public Property Commission() As System.Nullable(Of Double)
		Get
			Return Me._Commission
		End Get
		Set
			If (Me._Commission.Equals(value) = false) Then
				Me.OnCommissionChanging(value)
				Me.SendPropertyChanging
				Me._Commission = value
				Me.SendPropertyChanged("Commission")
				Me.OnCommissionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivationFee", DbType:="Money")>  _
	Public Property ActivationFee() As System.Nullable(Of Decimal)
		Get
			Return Me._ActivationFee
		End Get
		Set
			If (Me._ActivationFee.Equals(value) = false) Then
				Me.OnActivationFeeChanging(value)
				Me.SendPropertyChanging
				Me._ActivationFee = value
				Me.SendPropertyChanged("ActivationFee")
				Me.OnActivationFeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Deposit", DbType:="Float")>  _
	Public Property Deposit() As System.Nullable(Of Double)
		Get
			Return Me._Deposit
		End Get
		Set
			If (Me._Deposit.Equals(value) = false) Then
				Me.OnDepositChanging(value)
				Me.SendPropertyChanging
				Me._Deposit = value
				Me.SendPropertyChanged("Deposit")
				Me.OnDepositChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				If Me._AuthDirectory1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ApplicationRepository", Storage:="_ApplicationRepositories", ThisKey:="ID", OtherKey:="ProductID")>  _
	Public Property ApplicationRepositories() As EntitySet(Of ApplicationRepository)
		Get
			Return Me._ApplicationRepositories
		End Get
		Set
			Me._ApplicationRepositories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_MerchantProductProvider", Storage:="_MerchantProductProviders", ThisKey:="ID", OtherKey:="ProductID")>  _
	Public Property MerchantProductProviders() As EntitySet(Of MerchantProductProvider)
		Get
			Return Me._MerchantProductProviders
		End Get
		Set
			Me._MerchantProductProviders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_MerchantProductProvider1", Storage:="_MerchantProductProviders1", ThisKey:="ID", OtherKey:="ProductID")>  _
	Public Property MerchantProductProviders1() As EntitySet(Of MerchantProductProvider)
		Get
			Return Me._MerchantProductProviders1
		End Get
		Set
			Me._MerchantProductProviders1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductBand", Storage:="_ProductBands", ThisKey:="ID", OtherKey:="ProductID")>  _
	Public Property ProductBands() As EntitySet(Of ProductBand)
		Get
			Return Me._ProductBands
		End Get
		Set
			Me._ProductBands.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_TerminalProduct", Storage:="_TerminalProducts", ThisKey:="ID", OtherKey:="ProductID")>  _
	Public Property TerminalProducts() As EntitySet(Of TerminalProduct)
		Get
			Return Me._TerminalProducts
		End Get
		Set
			Me._TerminalProducts.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Product", Storage:="_AuthDirectory", ThisKey:="CreatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.Products.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Products.Add(Me)
					Me._CreatedBy = value.ID
				Else
					Me._CreatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Product1", Storage:="_AuthDirectory1", ThisKey:="UpdatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory1() As AuthDirectory
		Get
			Return Me._AuthDirectory1.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory1.Entity = Nothing
					previousValue.Products1.Remove(Me)
				End If
				Me._AuthDirectory1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Products1.Add(Me)
					Me._UpdatedBy = value.ID
				Else
					Me._UpdatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EnvironmentRepository_Product", Storage:="_EnvironmentRepository", ThisKey:="EnvironmentRepositoryID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property EnvironmentRepository() As EnvironmentRepository
		Get
			Return Me._EnvironmentRepository.Entity
		End Get
		Set
			Dim previousValue As EnvironmentRepository = Me._EnvironmentRepository.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EnvironmentRepository.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EnvironmentRepository.Entity = Nothing
					previousValue.Products.Remove(Me)
				End If
				Me._EnvironmentRepository.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Products.Add(Me)
					Me._EnvironmentRepositoryID = value.ID
				Else
					Me._EnvironmentRepositoryID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("EnvironmentRepository")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EnvironmentRepository_Product1", Storage:="_EnvironmentRepository1", ThisKey:="EnvironmentRepositoryID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property EnvironmentRepository1() As EnvironmentRepository
		Get
			Return Me._EnvironmentRepository1.Entity
		End Get
		Set
			Dim previousValue As EnvironmentRepository = Me._EnvironmentRepository1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EnvironmentRepository1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EnvironmentRepository1.Entity = Nothing
					previousValue.Products1.Remove(Me)
				End If
				Me._EnvironmentRepository1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Products1.Add(Me)
					Me._EnvironmentRepositoryID = value.ID
				Else
					Me._EnvironmentRepositoryID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("EnvironmentRepository1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FinancialInstitution_Product", Storage:="_FinancialInstitution", ThisKey:="FinancialInstitutionID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property FinancialInstitution() As FinancialInstitution
		Get
			Return Me._FinancialInstitution.Entity
		End Get
		Set
			Dim previousValue As FinancialInstitution = Me._FinancialInstitution.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FinancialInstitution.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FinancialInstitution.Entity = Nothing
					previousValue.Products.Remove(Me)
				End If
				Me._FinancialInstitution.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Products.Add(Me)
					Me._FinancialInstitutionID = value.ID
				Else
					Me._FinancialInstitutionID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("FinancialInstitution")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Merchant_Product", Storage:="_Merchant", ThisKey:="MerchantID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Merchant() As Merchant
		Get
			Return Me._Merchant.Entity
		End Get
		Set
			Dim previousValue As Merchant = Me._Merchant.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Merchant.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Merchant.Entity = Nothing
					previousValue.Products.Remove(Me)
				End If
				Me._Merchant.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Products.Add(Me)
					Me._MerchantID = value.ID
				Else
					Me._MerchantID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Merchant")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApplicationRepositories(ByVal entity As ApplicationRepository)
		Me.SendPropertyChanging
		entity.Product = Me
	End Sub
	
	Private Sub detach_ApplicationRepositories(ByVal entity As ApplicationRepository)
		Me.SendPropertyChanging
		entity.Product = Nothing
	End Sub
	
	Private Sub attach_MerchantProductProviders(ByVal entity As MerchantProductProvider)
		Me.SendPropertyChanging
		entity.Product = Me
	End Sub
	
	Private Sub detach_MerchantProductProviders(ByVal entity As MerchantProductProvider)
		Me.SendPropertyChanging
		entity.Product = Nothing
	End Sub
	
	Private Sub attach_MerchantProductProviders1(ByVal entity As MerchantProductProvider)
		Me.SendPropertyChanging
		entity.Product1 = Me
	End Sub
	
	Private Sub detach_MerchantProductProviders1(ByVal entity As MerchantProductProvider)
		Me.SendPropertyChanging
		entity.Product1 = Nothing
	End Sub
	
	Private Sub attach_ProductBands(ByVal entity As ProductBand)
		Me.SendPropertyChanging
		entity.Product = Me
	End Sub
	
	Private Sub detach_ProductBands(ByVal entity As ProductBand)
		Me.SendPropertyChanging
		entity.Product = Nothing
	End Sub
	
	Private Sub attach_TerminalProducts(ByVal entity As TerminalProduct)
		Me.SendPropertyChanging
		entity.Product = Me
	End Sub
	
	Private Sub detach_TerminalProducts(ByVal entity As TerminalProduct)
		Me.SendPropertyChanging
		entity.Product = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProductBand")>  _
Partial Public Class ProductBand
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _FinancialInstitutionID As System.Nullable(Of Long)
	
	Private _ProductID As System.Nullable(Of Long)
	
	Private _BandTypeID As System.Nullable(Of Long)
	
	Private _MerchantID As System.Nullable(Of Long)
	
	Private _Minimum As System.Nullable(Of Integer)
	
	Private _Maximum As System.Nullable(Of Integer)
	
	Private _Floor As String
	
	Private _Ceiling As System.Nullable(Of Decimal)
	
	Private _EnvironmentRepositoryID As System.Nullable(Of Long)
	
	Private _Subscription As System.Nullable(Of Decimal)
	
	Private _Commission As System.Nullable(Of Double)
	
	Private _ActivationFee As System.Nullable(Of Decimal)
	
	Private _Deposit As System.Nullable(Of Double)
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _ProductBandTerms As EntitySet(Of ProductBandTerm)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory1 As EntityRef(Of AuthDirectory)
	
	Private _BandType As EntityRef(Of BandType)
	
	Private _EnvironmentRepository As EntityRef(Of EnvironmentRepository)
	
	Private _FinancialInstitution As EntityRef(Of FinancialInstitution)
	
	Private _Product As EntityRef(Of Product)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnFinancialInstitutionIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFinancialInstitutionIDChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnBandTypeIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnBandTypeIDChanged()
    End Sub
    Partial Private Sub OnMerchantIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMerchantIDChanged()
    End Sub
    Partial Private Sub OnMinimumChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMinimumChanged()
    End Sub
    Partial Private Sub OnMaximumChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMaximumChanged()
    End Sub
    Partial Private Sub OnFloorChanging(value As String)
    End Sub
    Partial Private Sub OnFloorChanged()
    End Sub
    Partial Private Sub OnCeilingChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnCeilingChanged()
    End Sub
    Partial Private Sub OnEnvironmentRepositoryIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnEnvironmentRepositoryIDChanged()
    End Sub
    Partial Private Sub OnSubscriptionChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSubscriptionChanged()
    End Sub
    Partial Private Sub OnCommissionChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCommissionChanged()
    End Sub
    Partial Private Sub OnActivationFeeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnActivationFeeChanged()
    End Sub
    Partial Private Sub OnDepositChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDepositChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ProductBandTerms = New EntitySet(Of ProductBandTerm)(AddressOf Me.attach_ProductBandTerms, AddressOf Me.detach_ProductBandTerms)
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory1 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._BandType = CType(Nothing, EntityRef(Of BandType))
		Me._EnvironmentRepository = CType(Nothing, EntityRef(Of EnvironmentRepository))
		Me._FinancialInstitution = CType(Nothing, EntityRef(Of FinancialInstitution))
		Me._Product = CType(Nothing, EntityRef(Of Product))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinancialInstitutionID", DbType:="BigInt")>  _
	Public Property FinancialInstitutionID() As System.Nullable(Of Long)
		Get
			Return Me._FinancialInstitutionID
		End Get
		Set
			If (Me._FinancialInstitutionID.Equals(value) = false) Then
				If Me._FinancialInstitution.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFinancialInstitutionIDChanging(value)
				Me.SendPropertyChanging
				Me._FinancialInstitutionID = value
				Me.SendPropertyChanged("FinancialInstitutionID")
				Me.OnFinancialInstitutionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="BigInt")>  _
	Public Property ProductID() As System.Nullable(Of Long)
		Get
			Return Me._ProductID
		End Get
		Set
			If (Me._ProductID.Equals(value) = false) Then
				If Me._Product.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BandTypeID", DbType:="BigInt")>  _
	Public Property BandTypeID() As System.Nullable(Of Long)
		Get
			Return Me._BandTypeID
		End Get
		Set
			If (Me._BandTypeID.Equals(value) = false) Then
				If Me._BandType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBandTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._BandTypeID = value
				Me.SendPropertyChanged("BandTypeID")
				Me.OnBandTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantID", DbType:="BigInt")>  _
	Public Property MerchantID() As System.Nullable(Of Long)
		Get
			Return Me._MerchantID
		End Get
		Set
			If (Me._MerchantID.Equals(value) = false) Then
				Me.OnMerchantIDChanging(value)
				Me.SendPropertyChanging
				Me._MerchantID = value
				Me.SendPropertyChanged("MerchantID")
				Me.OnMerchantIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Minimum", DbType:="Int")>  _
	Public Property Minimum() As System.Nullable(Of Integer)
		Get
			Return Me._Minimum
		End Get
		Set
			If (Me._Minimum.Equals(value) = false) Then
				Me.OnMinimumChanging(value)
				Me.SendPropertyChanging
				Me._Minimum = value
				Me.SendPropertyChanged("Minimum")
				Me.OnMinimumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Maximum", DbType:="Int")>  _
	Public Property Maximum() As System.Nullable(Of Integer)
		Get
			Return Me._Maximum
		End Get
		Set
			If (Me._Maximum.Equals(value) = false) Then
				Me.OnMaximumChanging(value)
				Me.SendPropertyChanging
				Me._Maximum = value
				Me.SendPropertyChanged("Maximum")
				Me.OnMaximumChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Floor", DbType:="NChar(10)")>  _
	Public Property Floor() As String
		Get
			Return Me._Floor
		End Get
		Set
			If (String.Equals(Me._Floor, value) = false) Then
				Me.OnFloorChanging(value)
				Me.SendPropertyChanging
				Me._Floor = value
				Me.SendPropertyChanged("Floor")
				Me.OnFloorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Ceiling", DbType:="Money")>  _
	Public Property Ceiling() As System.Nullable(Of Decimal)
		Get
			Return Me._Ceiling
		End Get
		Set
			If (Me._Ceiling.Equals(value) = false) Then
				Me.OnCeilingChanging(value)
				Me.SendPropertyChanging
				Me._Ceiling = value
				Me.SendPropertyChanged("Ceiling")
				Me.OnCeilingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnvironmentRepositoryID", DbType:="BigInt")>  _
	Public Property EnvironmentRepositoryID() As System.Nullable(Of Long)
		Get
			Return Me._EnvironmentRepositoryID
		End Get
		Set
			If (Me._EnvironmentRepositoryID.Equals(value) = false) Then
				If Me._EnvironmentRepository.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEnvironmentRepositoryIDChanging(value)
				Me.SendPropertyChanging
				Me._EnvironmentRepositoryID = value
				Me.SendPropertyChanged("EnvironmentRepositoryID")
				Me.OnEnvironmentRepositoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subscription", DbType:="Money")>  _
	Public Property Subscription() As System.Nullable(Of Decimal)
		Get
			Return Me._Subscription
		End Get
		Set
			If (Me._Subscription.Equals(value) = false) Then
				Me.OnSubscriptionChanging(value)
				Me.SendPropertyChanging
				Me._Subscription = value
				Me.SendPropertyChanged("Subscription")
				Me.OnSubscriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Commission", DbType:="Float")>  _
	Public Property Commission() As System.Nullable(Of Double)
		Get
			Return Me._Commission
		End Get
		Set
			If (Me._Commission.Equals(value) = false) Then
				Me.OnCommissionChanging(value)
				Me.SendPropertyChanging
				Me._Commission = value
				Me.SendPropertyChanged("Commission")
				Me.OnCommissionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivationFee", DbType:="Money")>  _
	Public Property ActivationFee() As System.Nullable(Of Decimal)
		Get
			Return Me._ActivationFee
		End Get
		Set
			If (Me._ActivationFee.Equals(value) = false) Then
				Me.OnActivationFeeChanging(value)
				Me.SendPropertyChanging
				Me._ActivationFee = value
				Me.SendPropertyChanged("ActivationFee")
				Me.OnActivationFeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Deposit", DbType:="Float")>  _
	Public Property Deposit() As System.Nullable(Of Double)
		Get
			Return Me._Deposit
		End Get
		Set
			If (Me._Deposit.Equals(value) = false) Then
				Me.OnDepositChanging(value)
				Me.SendPropertyChanging
				Me._Deposit = value
				Me.SendPropertyChanged("Deposit")
				Me.OnDepositChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				If Me._AuthDirectory1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProductBand_ProductBandTerm", Storage:="_ProductBandTerms", ThisKey:="ID", OtherKey:="ProductBandID")>  _
	Public Property ProductBandTerms() As EntitySet(Of ProductBandTerm)
		Get
			Return Me._ProductBandTerms
		End Get
		Set
			Me._ProductBandTerms.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_ProductBand", Storage:="_AuthDirectory", ThisKey:="CreatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.ProductBands.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProductBands.Add(Me)
					Me._CreatedBy = value.ID
				Else
					Me._CreatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_ProductBand1", Storage:="_AuthDirectory1", ThisKey:="UpdatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory1() As AuthDirectory
		Get
			Return Me._AuthDirectory1.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory1.Entity = Nothing
					previousValue.ProductBands1.Remove(Me)
				End If
				Me._AuthDirectory1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProductBands1.Add(Me)
					Me._UpdatedBy = value.ID
				Else
					Me._UpdatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="BandType_ProductBand", Storage:="_BandType", ThisKey:="BandTypeID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property BandType() As BandType
		Get
			Return Me._BandType.Entity
		End Get
		Set
			Dim previousValue As BandType = Me._BandType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._BandType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._BandType.Entity = Nothing
					previousValue.ProductBands.Remove(Me)
				End If
				Me._BandType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProductBands.Add(Me)
					Me._BandTypeID = value.ID
				Else
					Me._BandTypeID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("BandType")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EnvironmentRepository_ProductBand", Storage:="_EnvironmentRepository", ThisKey:="EnvironmentRepositoryID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property EnvironmentRepository() As EnvironmentRepository
		Get
			Return Me._EnvironmentRepository.Entity
		End Get
		Set
			Dim previousValue As EnvironmentRepository = Me._EnvironmentRepository.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EnvironmentRepository.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EnvironmentRepository.Entity = Nothing
					previousValue.ProductBands.Remove(Me)
				End If
				Me._EnvironmentRepository.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProductBands.Add(Me)
					Me._EnvironmentRepositoryID = value.ID
				Else
					Me._EnvironmentRepositoryID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("EnvironmentRepository")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FinancialInstitution_ProductBand", Storage:="_FinancialInstitution", ThisKey:="FinancialInstitutionID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property FinancialInstitution() As FinancialInstitution
		Get
			Return Me._FinancialInstitution.Entity
		End Get
		Set
			Dim previousValue As FinancialInstitution = Me._FinancialInstitution.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FinancialInstitution.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FinancialInstitution.Entity = Nothing
					previousValue.ProductBands.Remove(Me)
				End If
				Me._FinancialInstitution.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProductBands.Add(Me)
					Me._FinancialInstitutionID = value.ID
				Else
					Me._FinancialInstitutionID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("FinancialInstitution")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_ProductBand", Storage:="_Product", ThisKey:="ProductID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Product() As Product
		Get
			Return Me._Product.Entity
		End Get
		Set
			Dim previousValue As Product = Me._Product.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Product.Entity = Nothing
					previousValue.ProductBands.Remove(Me)
				End If
				Me._Product.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProductBands.Add(Me)
					Me._ProductID = value.ID
				Else
					Me._ProductID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Product")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ProductBandTerms(ByVal entity As ProductBandTerm)
		Me.SendPropertyChanging
		entity.ProductBand = Me
	End Sub
	
	Private Sub detach_ProductBandTerms(ByVal entity As ProductBandTerm)
		Me.SendPropertyChanging
		entity.ProductBand = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProductBandTerms")>  _
Partial Public Class ProductBandTerm
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _ProductBandID As System.Nullable(Of Long)
	
	Private _Subscription As System.Nullable(Of Decimal)
	
	Private _Commission As System.Nullable(Of Double)
	
	Private _ActivationFee As System.Nullable(Of Decimal)
	
	Private _Deposit As System.Nullable(Of Double)
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _ProductBand As EntityRef(Of ProductBand)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnProductBandIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnProductBandIDChanged()
    End Sub
    Partial Private Sub OnSubscriptionChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSubscriptionChanged()
    End Sub
    Partial Private Sub OnCommissionChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnCommissionChanged()
    End Sub
    Partial Private Sub OnActivationFeeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnActivationFeeChanged()
    End Sub
    Partial Private Sub OnDepositChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDepositChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ProductBand = CType(Nothing, EntityRef(Of ProductBand))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductBandID", DbType:="BigInt")>  _
	Public Property ProductBandID() As System.Nullable(Of Long)
		Get
			Return Me._ProductBandID
		End Get
		Set
			If (Me._ProductBandID.Equals(value) = false) Then
				If Me._ProductBand.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnProductBandIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductBandID = value
				Me.SendPropertyChanged("ProductBandID")
				Me.OnProductBandIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subscription", DbType:="Money")>  _
	Public Property Subscription() As System.Nullable(Of Decimal)
		Get
			Return Me._Subscription
		End Get
		Set
			If (Me._Subscription.Equals(value) = false) Then
				Me.OnSubscriptionChanging(value)
				Me.SendPropertyChanging
				Me._Subscription = value
				Me.SendPropertyChanged("Subscription")
				Me.OnSubscriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Commission", DbType:="Float")>  _
	Public Property Commission() As System.Nullable(Of Double)
		Get
			Return Me._Commission
		End Get
		Set
			If (Me._Commission.Equals(value) = false) Then
				Me.OnCommissionChanging(value)
				Me.SendPropertyChanging
				Me._Commission = value
				Me.SendPropertyChanged("Commission")
				Me.OnCommissionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivationFee", DbType:="Money")>  _
	Public Property ActivationFee() As System.Nullable(Of Decimal)
		Get
			Return Me._ActivationFee
		End Get
		Set
			If (Me._ActivationFee.Equals(value) = false) Then
				Me.OnActivationFeeChanging(value)
				Me.SendPropertyChanging
				Me._ActivationFee = value
				Me.SendPropertyChanged("ActivationFee")
				Me.OnActivationFeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Deposit", DbType:="Float")>  _
	Public Property Deposit() As System.Nullable(Of Double)
		Get
			Return Me._Deposit
		End Get
		Set
			If (Me._Deposit.Equals(value) = false) Then
				Me.OnDepositChanging(value)
				Me.SendPropertyChanging
				Me._Deposit = value
				Me.SendPropertyChanged("Deposit")
				Me.OnDepositChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProductBand_ProductBandTerm", Storage:="_ProductBand", ThisKey:="ProductBandID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property ProductBand() As ProductBand
		Get
			Return Me._ProductBand.Entity
		End Get
		Set
			Dim previousValue As ProductBand = Me._ProductBand.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProductBand.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProductBand.Entity = Nothing
					previousValue.ProductBandTerms.Remove(Me)
				End If
				Me._ProductBand.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProductBandTerms.Add(Me)
					Me._ProductBandID = value.ID
				Else
					Me._ProductBandID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("ProductBand")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Provider")>  _
Partial Public Class Provider
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsActive As Boolean
	
	Private _MerchantProductProviders As EntitySet(Of MerchantProductProvider)
	
	Private _MerchantProductProviders1 As EntitySet(Of MerchantProductProvider)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MerchantProductProviders = New EntitySet(Of MerchantProductProvider)(AddressOf Me.attach_MerchantProductProviders, AddressOf Me.detach_MerchantProductProviders)
		Me._MerchantProductProviders1 = New EntitySet(Of MerchantProductProvider)(AddressOf Me.attach_MerchantProductProviders1, AddressOf Me.detach_MerchantProductProviders1)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Provider_MerchantProductProvider", Storage:="_MerchantProductProviders", ThisKey:="ID", OtherKey:="ProviderID")>  _
	Public Property MerchantProductProviders() As EntitySet(Of MerchantProductProvider)
		Get
			Return Me._MerchantProductProviders
		End Get
		Set
			Me._MerchantProductProviders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Provider_MerchantProductProvider1", Storage:="_MerchantProductProviders1", ThisKey:="ID", OtherKey:="ProviderID")>  _
	Public Property MerchantProductProviders1() As EntitySet(Of MerchantProductProvider)
		Get
			Return Me._MerchantProductProviders1
		End Get
		Set
			Me._MerchantProductProviders1.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_MerchantProductProviders(ByVal entity As MerchantProductProvider)
		Me.SendPropertyChanging
		entity.Provider = Me
	End Sub
	
	Private Sub detach_MerchantProductProviders(ByVal entity As MerchantProductProvider)
		Me.SendPropertyChanging
		entity.Provider = Nothing
	End Sub
	
	Private Sub attach_MerchantProductProviders1(ByVal entity As MerchantProductProvider)
		Me.SendPropertyChanging
		entity.Provider1 = Me
	End Sub
	
	Private Sub detach_MerchantProductProviders1(ByVal entity As MerchantProductProvider)
		Me.SendPropertyChanging
		entity.Provider1 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Province")>  _
Partial Public Class Province
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Title As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBY As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _CountryID As System.Nullable(Of Integer)
	
	Private _Cities As EntitySet(Of City)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedBYChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedBYChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnCountryIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCountryIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Cities = New EntitySet(Of City)(AddressOf Me.attach_Cities, AddressOf Me.detach_Cities)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBY", DbType:="BigInt")>  _
	Public Property CreatedBY() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBY
		End Get
		Set
			If (Me._CreatedBY.Equals(value) = false) Then
				Me.OnCreatedBYChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBY = value
				Me.SendPropertyChanged("CreatedBY")
				Me.OnCreatedBYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CountryID", DbType:="Int")>  _
	Public Property CountryID() As System.Nullable(Of Integer)
		Get
			Return Me._CountryID
		End Get
		Set
			If (Me._CountryID.Equals(value) = false) Then
				Me.OnCountryIDChanging(value)
				Me.SendPropertyChanging
				Me._CountryID = value
				Me.SendPropertyChanged("CountryID")
				Me.OnCountryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Province_City", Storage:="_Cities", ThisKey:="ID", OtherKey:="ProvinceID")>  _
	Public Property Cities() As EntitySet(Of City)
		Get
			Return Me._Cities
		End Get
		Set
			Me._Cities.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Cities(ByVal entity As City)
		Me.SendPropertyChanging
		entity.Province = Me
	End Sub
	
	Private Sub detach_Cities(ByVal entity As City)
		Me.SendPropertyChanging
		entity.Province = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Queue")>  _
Partial Public Class Queue
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _RemoteID As System.Nullable(Of System.Guid)
	
	Private _RepositoryID As System.Nullable(Of Long)
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _Repositories As EntitySet(Of Repository)
	
	Private _Repositories1 As EntitySet(Of Repository)
	
	Private _Repositories2 As EntitySet(Of Repository)
	
	Private _Repositories3 As EntitySet(Of Repository)
	
	Private _Repositories4 As EntitySet(Of Repository)
	
	Private _Repositories5 As EntitySet(Of Repository)
	
	Private _Repositories6 As EntitySet(Of Repository)
	
	Private _Repositories7 As EntitySet(Of Repository)
	
	Private _Repositories8 As EntitySet(Of Repository)
	
	Private _Repositories9 As EntitySet(Of Repository)
	
	Private _Repositories10 As EntitySet(Of Repository)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnRemoteIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnRemoteIDChanged()
    End Sub
    Partial Private Sub OnRepositoryIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnRepositoryIDChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Repositories = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories, AddressOf Me.detach_Repositories)
		Me._Repositories1 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories1, AddressOf Me.detach_Repositories1)
		Me._Repositories2 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories2, AddressOf Me.detach_Repositories2)
		Me._Repositories3 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories3, AddressOf Me.detach_Repositories3)
		Me._Repositories4 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories4, AddressOf Me.detach_Repositories4)
		Me._Repositories5 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories5, AddressOf Me.detach_Repositories5)
		Me._Repositories6 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories6, AddressOf Me.detach_Repositories6)
		Me._Repositories7 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories7, AddressOf Me.detach_Repositories7)
		Me._Repositories8 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories8, AddressOf Me.detach_Repositories8)
		Me._Repositories9 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories9, AddressOf Me.detach_Repositories9)
		Me._Repositories10 = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories10, AddressOf Me.detach_Repositories10)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RemoteID", DbType:="UniqueIdentifier")>  _
	Public Property RemoteID() As System.Nullable(Of System.Guid)
		Get
			Return Me._RemoteID
		End Get
		Set
			If (Me._RemoteID.Equals(value) = false) Then
				Me.OnRemoteIDChanging(value)
				Me.SendPropertyChanging
				Me._RemoteID = value
				Me.SendPropertyChanged("RemoteID")
				Me.OnRemoteIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RepositoryID", DbType:="BigInt")>  _
	Public Property RepositoryID() As System.Nullable(Of Long)
		Get
			Return Me._RepositoryID
		End Get
		Set
			If (Me._RepositoryID.Equals(value) = false) Then
				Me.OnRepositoryIDChanging(value)
				Me.SendPropertyChanging
				Me._RepositoryID = value
				Me.SendPropertyChanged("RepositoryID")
				Me.OnRepositoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Queue_Repository", Storage:="_Repositories", ThisKey:="ID", OtherKey:="DealsQueueID")>  _
	Public Property Repositories() As EntitySet(Of Repository)
		Get
			Return Me._Repositories
		End Get
		Set
			Me._Repositories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Queue_Repository1", Storage:="_Repositories1", ThisKey:="ID", OtherKey:="FinanceQueueID")>  _
	Public Property Repositories1() As EntitySet(Of Repository)
		Get
			Return Me._Repositories1
		End Get
		Set
			Me._Repositories1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Queue_Repository2", Storage:="_Repositories2", ThisKey:="ID", OtherKey:="CommunicationQueueID")>  _
	Public Property Repositories2() As EntitySet(Of Repository)
		Get
			Return Me._Repositories2
		End Get
		Set
			Me._Repositories2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Queue_Repository3", Storage:="_Repositories3", ThisKey:="ID", OtherKey:="PaymentsQueueID")>  _
	Public Property Repositories3() As EntitySet(Of Repository)
		Get
			Return Me._Repositories3
		End Get
		Set
			Me._Repositories3.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Queue_Repository4", Storage:="_Repositories4", ThisKey:="ID", OtherKey:="SwitchPayQueueID")>  _
	Public Property Repositories4() As EntitySet(Of Repository)
		Get
			Return Me._Repositories4
		End Get
		Set
			Me._Repositories4.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Queue_Repository5", Storage:="_Repositories5", ThisKey:="ID", OtherKey:="SystemQueueID")>  _
	Public Property Repositories5() As EntitySet(Of Repository)
		Get
			Return Me._Repositories5
		End Get
		Set
			Me._Repositories5.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Queue_Repository6", Storage:="_Repositories6", ThisKey:="ID", OtherKey:="ApprovePaymentQueueID")>  _
	Public Property Repositories6() As EntitySet(Of Repository)
		Get
			Return Me._Repositories6
		End Get
		Set
			Me._Repositories6.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Queue_Repository7", Storage:="_Repositories7", ThisKey:="ID", OtherKey:="VerifyPOPQueueID")>  _
	Public Property Repositories7() As EntitySet(Of Repository)
		Get
			Return Me._Repositories7
		End Get
		Set
			Me._Repositories7.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Queue_Repository8", Storage:="_Repositories8", ThisKey:="ID", OtherKey:="PaymentReceivedQueueID")>  _
	Public Property Repositories8() As EntitySet(Of Repository)
		Get
			Return Me._Repositories8
		End Get
		Set
			Me._Repositories8.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Queue_Repository9", Storage:="_Repositories9", ThisKey:="ID", OtherKey:="CollectionQueueID")>  _
	Public Property Repositories9() As EntitySet(Of Repository)
		Get
			Return Me._Repositories9
		End Get
		Set
			Me._Repositories9.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Queue_Repository10", Storage:="_Repositories10", ThisKey:="ID", OtherKey:="WorkflowQueueID")>  _
	Public Property Repositories10() As EntitySet(Of Repository)
		Get
			Return Me._Repositories10
		End Get
		Set
			Me._Repositories10.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Repositories(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Queue = Me
	End Sub
	
	Private Sub detach_Repositories(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Queue = Nothing
	End Sub
	
	Private Sub attach_Repositories1(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Queue1 = Me
	End Sub
	
	Private Sub detach_Repositories1(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Queue1 = Nothing
	End Sub
	
	Private Sub attach_Repositories2(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Queue2 = Me
	End Sub
	
	Private Sub detach_Repositories2(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Queue2 = Nothing
	End Sub
	
	Private Sub attach_Repositories3(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Queue3 = Me
	End Sub
	
	Private Sub detach_Repositories3(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Queue3 = Nothing
	End Sub
	
	Private Sub attach_Repositories4(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Queue4 = Me
	End Sub
	
	Private Sub detach_Repositories4(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Queue4 = Nothing
	End Sub
	
	Private Sub attach_Repositories5(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Queue5 = Me
	End Sub
	
	Private Sub detach_Repositories5(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Queue5 = Nothing
	End Sub
	
	Private Sub attach_Repositories6(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Queue6 = Me
	End Sub
	
	Private Sub detach_Repositories6(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Queue6 = Nothing
	End Sub
	
	Private Sub attach_Repositories7(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Queue7 = Me
	End Sub
	
	Private Sub detach_Repositories7(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Queue7 = Nothing
	End Sub
	
	Private Sub attach_Repositories8(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Queue8 = Me
	End Sub
	
	Private Sub detach_Repositories8(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Queue8 = Nothing
	End Sub
	
	Private Sub attach_Repositories9(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Queue9 = Me
	End Sub
	
	Private Sub detach_Repositories9(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Queue9 = Nothing
	End Sub
	
	Private Sub attach_Repositories10(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Queue10 = Me
	End Sub
	
	Private Sub detach_Repositories10(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Queue10 = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RepositoryType")>  _
Partial Public Class RepositoryType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _Repositories As EntitySet(Of Repository)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Repositories = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories, AddressOf Me.detach_Repositories)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RepositoryType_Repository", Storage:="_Repositories", ThisKey:="ID", OtherKey:="RepositoryTypeID")>  _
	Public Property Repositories() As EntitySet(Of Repository)
		Get
			Return Me._Repositories
		End Get
		Set
			Me._Repositories.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Repositories(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.RepositoryType = Me
	End Sub
	
	Private Sub detach_Repositories(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.RepositoryType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SalesChannel")>  _
Partial Public Class SalesChannel
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _GUID As System.Nullable(Of System.Guid)
	
	Private _Merchants As EntitySet(Of Merchant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnGUIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnGUIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Merchants = New EntitySet(Of Merchant)(AddressOf Me.attach_Merchants, AddressOf Me.detach_Merchants)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GUID", DbType:="UniqueIdentifier")>  _
	Public Property GUID() As System.Nullable(Of System.Guid)
		Get
			Return Me._GUID
		End Get
		Set
			If (Me._GUID.Equals(value) = false) Then
				Me.OnGUIDChanging(value)
				Me.SendPropertyChanging
				Me._GUID = value
				Me.SendPropertyChanged("GUID")
				Me.OnGUIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SalesChannel_Merchant", Storage:="_Merchants", ThisKey:="ID", OtherKey:="SalesChannelID")>  _
	Public Property Merchants() As EntitySet(Of Merchant)
		Get
			Return Me._Merchants
		End Get
		Set
			Me._Merchants.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Merchants(ByVal entity As Merchant)
		Me.SendPropertyChanging
		entity.SalesChannel = Me
	End Sub
	
	Private Sub detach_Merchants(ByVal entity As Merchant)
		Me.SendPropertyChanging
		entity.SalesChannel = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Suburb")>  _
Partial Public Class Suburb
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Title As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBY As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _CityID As System.Nullable(Of Integer)
	
	Private _PostalCode As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedBYChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedBYChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnCityIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCityIDChanged()
    End Sub
    Partial Private Sub OnPostalCodeChanging(value As String)
    End Sub
    Partial Private Sub OnPostalCodeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBY", DbType:="BigInt")>  _
	Public Property CreatedBY() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBY
		End Get
		Set
			If (Me._CreatedBY.Equals(value) = false) Then
				Me.OnCreatedBYChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBY = value
				Me.SendPropertyChanged("CreatedBY")
				Me.OnCreatedBYChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CityID", DbType:="Int")>  _
	Public Property CityID() As System.Nullable(Of Integer)
		Get
			Return Me._CityID
		End Get
		Set
			If (Me._CityID.Equals(value) = false) Then
				Me.OnCityIDChanging(value)
				Me.SendPropertyChanging
				Me._CityID = value
				Me.SendPropertyChanged("CityID")
				Me.OnCityIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostalCode", DbType:="NVarChar(10)")>  _
	Public Property PostalCode() As String
		Get
			Return Me._PostalCode
		End Get
		Set
			If (String.Equals(Me._PostalCode, value) = false) Then
				Me.OnPostalCodeChanging(value)
				Me.SendPropertyChanging
				Me._PostalCode = value
				Me.SendPropertyChanged("PostalCode")
				Me.OnPostalCodeChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Supplier")>  _
Partial Public Class Supplier
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _FinancialInstitutionID As System.Nullable(Of Long)
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _MerchantTerminals As EntitySet(Of MerchantTerminal)
	
	Private _FinancialInstitution As EntityRef(Of FinancialInstitution)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnFinancialInstitutionIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFinancialInstitutionIDChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MerchantTerminals = New EntitySet(Of MerchantTerminal)(AddressOf Me.attach_MerchantTerminals, AddressOf Me.detach_MerchantTerminals)
		Me._FinancialInstitution = CType(Nothing, EntityRef(Of FinancialInstitution))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinancialInstitutionID", DbType:="BigInt")>  _
	Public Property FinancialInstitutionID() As System.Nullable(Of Long)
		Get
			Return Me._FinancialInstitutionID
		End Get
		Set
			If (Me._FinancialInstitutionID.Equals(value) = false) Then
				If Me._FinancialInstitution.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFinancialInstitutionIDChanging(value)
				Me.SendPropertyChanging
				Me._FinancialInstitutionID = value
				Me.SendPropertyChanged("FinancialInstitutionID")
				Me.OnFinancialInstitutionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Supplier_MerchantTerminal", Storage:="_MerchantTerminals", ThisKey:="ID", OtherKey:="SupplierID")>  _
	Public Property MerchantTerminals() As EntitySet(Of MerchantTerminal)
		Get
			Return Me._MerchantTerminals
		End Get
		Set
			Me._MerchantTerminals.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FinancialInstitution_Supplier", Storage:="_FinancialInstitution", ThisKey:="FinancialInstitutionID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property FinancialInstitution() As FinancialInstitution
		Get
			Return Me._FinancialInstitution.Entity
		End Get
		Set
			Dim previousValue As FinancialInstitution = Me._FinancialInstitution.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FinancialInstitution.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FinancialInstitution.Entity = Nothing
					previousValue.Suppliers.Remove(Me)
				End If
				Me._FinancialInstitution.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Suppliers.Add(Me)
					Me._FinancialInstitutionID = value.ID
				Else
					Me._FinancialInstitutionID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("FinancialInstitution")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_MerchantTerminals(ByVal entity As MerchantTerminal)
		Me.SendPropertyChanging
		entity.Supplier = Me
	End Sub
	
	Private Sub detach_MerchantTerminals(ByVal entity As MerchantTerminal)
		Me.SendPropertyChanging
		entity.Supplier = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TerminalMetric")>  _
Partial Public Class TerminalMetric
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _MerchantTerminalID As System.Nullable(Of Long)
	
	Private _MetricID As System.Nullable(Of Long)
	
	Private _Location As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory1 As EntityRef(Of AuthDirectory)
	
	Private _MerchantTerminal As EntityRef(Of MerchantTerminal)
	
	Private _Metric As EntityRef(Of Metric)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnMerchantTerminalIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMerchantTerminalIDChanged()
    End Sub
    Partial Private Sub OnMetricIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMetricIDChanged()
    End Sub
    Partial Private Sub OnLocationChanging(value As String)
    End Sub
    Partial Private Sub OnLocationChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory1 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._MerchantTerminal = CType(Nothing, EntityRef(Of MerchantTerminal))
		Me._Metric = CType(Nothing, EntityRef(Of Metric))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(1000) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantTerminalID", DbType:="BigInt")>  _
	Public Property MerchantTerminalID() As System.Nullable(Of Long)
		Get
			Return Me._MerchantTerminalID
		End Get
		Set
			If (Me._MerchantTerminalID.Equals(value) = false) Then
				If Me._MerchantTerminal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMerchantTerminalIDChanging(value)
				Me.SendPropertyChanging
				Me._MerchantTerminalID = value
				Me.SendPropertyChanged("MerchantTerminalID")
				Me.OnMerchantTerminalIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MetricID", DbType:="BigInt")>  _
	Public Property MetricID() As System.Nullable(Of Long)
		Get
			Return Me._MetricID
		End Get
		Set
			If (Me._MetricID.Equals(value) = false) Then
				If Me._Metric.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMetricIDChanging(value)
				Me.SendPropertyChanging
				Me._MetricID = value
				Me.SendPropertyChanged("MetricID")
				Me.OnMetricIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Location", DbType:="NVarChar(250)")>  _
	Public Property Location() As String
		Get
			Return Me._Location
		End Get
		Set
			If (String.Equals(Me._Location, value) = false) Then
				Me.OnLocationChanging(value)
				Me.SendPropertyChanging
				Me._Location = value
				Me.SendPropertyChanged("Location")
				Me.OnLocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				If Me._AuthDirectory1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_TerminalMetric", Storage:="_AuthDirectory", ThisKey:="CreatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.TerminalMetrics.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TerminalMetrics.Add(Me)
					Me._CreatedBy = value.ID
				Else
					Me._CreatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_TerminalMetric1", Storage:="_AuthDirectory1", ThisKey:="UpdatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory1() As AuthDirectory
		Get
			Return Me._AuthDirectory1.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory1.Entity = Nothing
					previousValue.TerminalMetrics1.Remove(Me)
				End If
				Me._AuthDirectory1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TerminalMetrics1.Add(Me)
					Me._UpdatedBy = value.ID
				Else
					Me._UpdatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MerchantTerminal_TerminalMetric", Storage:="_MerchantTerminal", ThisKey:="MerchantTerminalID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property MerchantTerminal() As MerchantTerminal
		Get
			Return Me._MerchantTerminal.Entity
		End Get
		Set
			Dim previousValue As MerchantTerminal = Me._MerchantTerminal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MerchantTerminal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MerchantTerminal.Entity = Nothing
					previousValue.TerminalMetrics.Remove(Me)
				End If
				Me._MerchantTerminal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TerminalMetrics.Add(Me)
					Me._MerchantTerminalID = value.ID
				Else
					Me._MerchantTerminalID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("MerchantTerminal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Metric_TerminalMetric", Storage:="_Metric", ThisKey:="MetricID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Metric() As Metric
		Get
			Return Me._Metric.Entity
		End Get
		Set
			Dim previousValue As Metric = Me._Metric.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Metric.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Metric.Entity = Nothing
					previousValue.TerminalMetrics.Remove(Me)
				End If
				Me._Metric.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TerminalMetrics.Add(Me)
					Me._MetricID = value.ID
				Else
					Me._MetricID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Metric")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TerminalProduct")>  _
Partial Public Class TerminalProduct
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _MerchantTerminalID As Long
	
	Private _EnvironmentRepositoryID As System.Nullable(Of Long)
	
	Private _ProductID As System.Nullable(Of Long)
	
	Private _FinancialInstitutionID As System.Nullable(Of Long)
	
	Private _ContractTermID As System.Nullable(Of Long)
	
	Private _Subscription As System.Nullable(Of Decimal)
	
	Private _MerchantFee As System.Nullable(Of Double)
	
	Private _Term As System.Nullable(Of Integer)
	
	Private _ActivationDate As System.Nullable(Of Date)
	
	Private _ActivationFee As System.Nullable(Of Decimal)
	
	Private _Deposit As System.Nullable(Of Double)
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory1 As EntityRef(Of AuthDirectory)
	
	Private _ContractTerm As EntityRef(Of ContractTerm)
	
	Private _EnvironmentRepository As EntityRef(Of EnvironmentRepository)
	
	Private _FinancialInstitution As EntityRef(Of FinancialInstitution)
	
	Private _MerchantTerminal As EntityRef(Of MerchantTerminal)
	
	Private _Product As EntityRef(Of Product)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnMerchantTerminalIDChanging(value As Long)
    End Sub
    Partial Private Sub OnMerchantTerminalIDChanged()
    End Sub
    Partial Private Sub OnEnvironmentRepositoryIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnEnvironmentRepositoryIDChanged()
    End Sub
    Partial Private Sub OnProductIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnProductIDChanged()
    End Sub
    Partial Private Sub OnFinancialInstitutionIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFinancialInstitutionIDChanged()
    End Sub
    Partial Private Sub OnContractTermIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnContractTermIDChanged()
    End Sub
    Partial Private Sub OnSubscriptionChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnSubscriptionChanged()
    End Sub
    Partial Private Sub OnMerchantFeeChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnMerchantFeeChanged()
    End Sub
    Partial Private Sub OnTermChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTermChanged()
    End Sub
    Partial Private Sub OnActivationDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnActivationDateChanged()
    End Sub
    Partial Private Sub OnActivationFeeChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnActivationFeeChanged()
    End Sub
    Partial Private Sub OnDepositChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnDepositChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory1 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._ContractTerm = CType(Nothing, EntityRef(Of ContractTerm))
		Me._EnvironmentRepository = CType(Nothing, EntityRef(Of EnvironmentRepository))
		Me._FinancialInstitution = CType(Nothing, EntityRef(Of FinancialInstitution))
		Me._MerchantTerminal = CType(Nothing, EntityRef(Of MerchantTerminal))
		Me._Product = CType(Nothing, EntityRef(Of Product))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantTerminalID", DbType:="BigInt NOT NULL")>  _
	Public Property MerchantTerminalID() As Long
		Get
			Return Me._MerchantTerminalID
		End Get
		Set
			If ((Me._MerchantTerminalID = value)  _
						= false) Then
				If Me._MerchantTerminal.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMerchantTerminalIDChanging(value)
				Me.SendPropertyChanging
				Me._MerchantTerminalID = value
				Me.SendPropertyChanged("MerchantTerminalID")
				Me.OnMerchantTerminalIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnvironmentRepositoryID", DbType:="BigInt")>  _
	Public Property EnvironmentRepositoryID() As System.Nullable(Of Long)
		Get
			Return Me._EnvironmentRepositoryID
		End Get
		Set
			If (Me._EnvironmentRepositoryID.Equals(value) = false) Then
				If Me._EnvironmentRepository.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEnvironmentRepositoryIDChanging(value)
				Me.SendPropertyChanging
				Me._EnvironmentRepositoryID = value
				Me.SendPropertyChanged("EnvironmentRepositoryID")
				Me.OnEnvironmentRepositoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", DbType:="BigInt")>  _
	Public Property ProductID() As System.Nullable(Of Long)
		Get
			Return Me._ProductID
		End Get
		Set
			If (Me._ProductID.Equals(value) = false) Then
				If Me._Product.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnProductIDChanging(value)
				Me.SendPropertyChanging
				Me._ProductID = value
				Me.SendPropertyChanged("ProductID")
				Me.OnProductIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinancialInstitutionID", DbType:="BigInt")>  _
	Public Property FinancialInstitutionID() As System.Nullable(Of Long)
		Get
			Return Me._FinancialInstitutionID
		End Get
		Set
			If (Me._FinancialInstitutionID.Equals(value) = false) Then
				If Me._FinancialInstitution.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFinancialInstitutionIDChanging(value)
				Me.SendPropertyChanging
				Me._FinancialInstitutionID = value
				Me.SendPropertyChanged("FinancialInstitutionID")
				Me.OnFinancialInstitutionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContractTermID", DbType:="BigInt")>  _
	Public Property ContractTermID() As System.Nullable(Of Long)
		Get
			Return Me._ContractTermID
		End Get
		Set
			If (Me._ContractTermID.Equals(value) = false) Then
				If Me._ContractTerm.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnContractTermIDChanging(value)
				Me.SendPropertyChanging
				Me._ContractTermID = value
				Me.SendPropertyChanged("ContractTermID")
				Me.OnContractTermIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subscription", DbType:="Money")>  _
	Public Property Subscription() As System.Nullable(Of Decimal)
		Get
			Return Me._Subscription
		End Get
		Set
			If (Me._Subscription.Equals(value) = false) Then
				Me.OnSubscriptionChanging(value)
				Me.SendPropertyChanging
				Me._Subscription = value
				Me.SendPropertyChanged("Subscription")
				Me.OnSubscriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantFee", DbType:="Float")>  _
	Public Property MerchantFee() As System.Nullable(Of Double)
		Get
			Return Me._MerchantFee
		End Get
		Set
			If (Me._MerchantFee.Equals(value) = false) Then
				Me.OnMerchantFeeChanging(value)
				Me.SendPropertyChanging
				Me._MerchantFee = value
				Me.SendPropertyChanged("MerchantFee")
				Me.OnMerchantFeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Term", DbType:="Int")>  _
	Public Property Term() As System.Nullable(Of Integer)
		Get
			Return Me._Term
		End Get
		Set
			If (Me._Term.Equals(value) = false) Then
				Me.OnTermChanging(value)
				Me.SendPropertyChanging
				Me._Term = value
				Me.SendPropertyChanged("Term")
				Me.OnTermChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivationDate", DbType:="DateTime")>  _
	Public Property ActivationDate() As System.Nullable(Of Date)
		Get
			Return Me._ActivationDate
		End Get
		Set
			If (Me._ActivationDate.Equals(value) = false) Then
				Me.OnActivationDateChanging(value)
				Me.SendPropertyChanging
				Me._ActivationDate = value
				Me.SendPropertyChanged("ActivationDate")
				Me.OnActivationDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivationFee", DbType:="Money")>  _
	Public Property ActivationFee() As System.Nullable(Of Decimal)
		Get
			Return Me._ActivationFee
		End Get
		Set
			If (Me._ActivationFee.Equals(value) = false) Then
				Me.OnActivationFeeChanging(value)
				Me.SendPropertyChanging
				Me._ActivationFee = value
				Me.SendPropertyChanged("ActivationFee")
				Me.OnActivationFeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Deposit", DbType:="Float")>  _
	Public Property Deposit() As System.Nullable(Of Double)
		Get
			Return Me._Deposit
		End Get
		Set
			If (Me._Deposit.Equals(value) = false) Then
				Me.OnDepositChanging(value)
				Me.SendPropertyChanging
				Me._Deposit = value
				Me.SendPropertyChanged("Deposit")
				Me.OnDepositChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				If Me._AuthDirectory1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_TerminalProduct", Storage:="_AuthDirectory", ThisKey:="CreatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.TerminalProducts.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TerminalProducts.Add(Me)
					Me._CreatedBy = value.ID
				Else
					Me._CreatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_TerminalProduct1", Storage:="_AuthDirectory1", ThisKey:="UpdatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory1() As AuthDirectory
		Get
			Return Me._AuthDirectory1.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory1.Entity = Nothing
					previousValue.TerminalProducts1.Remove(Me)
				End If
				Me._AuthDirectory1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TerminalProducts1.Add(Me)
					Me._UpdatedBy = value.ID
				Else
					Me._UpdatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ContractTerm_TerminalProduct", Storage:="_ContractTerm", ThisKey:="ContractTermID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property ContractTerm() As ContractTerm
		Get
			Return Me._ContractTerm.Entity
		End Get
		Set
			Dim previousValue As ContractTerm = Me._ContractTerm.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ContractTerm.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ContractTerm.Entity = Nothing
					previousValue.TerminalProducts.Remove(Me)
				End If
				Me._ContractTerm.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TerminalProducts.Add(Me)
					Me._ContractTermID = value.ID
				Else
					Me._ContractTermID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("ContractTerm")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="EnvironmentRepository_TerminalProduct", Storage:="_EnvironmentRepository", ThisKey:="EnvironmentRepositoryID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property EnvironmentRepository() As EnvironmentRepository
		Get
			Return Me._EnvironmentRepository.Entity
		End Get
		Set
			Dim previousValue As EnvironmentRepository = Me._EnvironmentRepository.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._EnvironmentRepository.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._EnvironmentRepository.Entity = Nothing
					previousValue.TerminalProducts.Remove(Me)
				End If
				Me._EnvironmentRepository.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TerminalProducts.Add(Me)
					Me._EnvironmentRepositoryID = value.ID
				Else
					Me._EnvironmentRepositoryID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("EnvironmentRepository")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="FinancialInstitution_TerminalProduct", Storage:="_FinancialInstitution", ThisKey:="FinancialInstitutionID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property FinancialInstitution() As FinancialInstitution
		Get
			Return Me._FinancialInstitution.Entity
		End Get
		Set
			Dim previousValue As FinancialInstitution = Me._FinancialInstitution.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._FinancialInstitution.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._FinancialInstitution.Entity = Nothing
					previousValue.TerminalProducts.Remove(Me)
				End If
				Me._FinancialInstitution.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TerminalProducts.Add(Me)
					Me._FinancialInstitutionID = value.ID
				Else
					Me._FinancialInstitutionID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("FinancialInstitution")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="MerchantTerminal_TerminalProduct", Storage:="_MerchantTerminal", ThisKey:="MerchantTerminalID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property MerchantTerminal() As MerchantTerminal
		Get
			Return Me._MerchantTerminal.Entity
		End Get
		Set
			Dim previousValue As MerchantTerminal = Me._MerchantTerminal.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._MerchantTerminal.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._MerchantTerminal.Entity = Nothing
					previousValue.TerminalProducts.Remove(Me)
				End If
				Me._MerchantTerminal.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TerminalProducts.Add(Me)
					Me._MerchantTerminalID = value.ID
				Else
					Me._MerchantTerminalID = CType(Nothing, Long)
				End If
				Me.SendPropertyChanged("MerchantTerminal")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Product_TerminalProduct", Storage:="_Product", ThisKey:="ProductID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Product() As Product
		Get
			Return Me._Product.Entity
		End Get
		Set
			Dim previousValue As Product = Me._Product.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Product.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Product.Entity = Nothing
					previousValue.TerminalProducts.Remove(Me)
				End If
				Me._Product.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TerminalProducts.Add(Me)
					Me._ProductID = value.ID
				Else
					Me._ProductID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Product")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TerminalType")>  _
Partial Public Class TerminalType
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _ApplicationRepositories As EntitySet(Of ApplicationRepository)
	
	Private _MerchantTerminals As EntitySet(Of MerchantTerminal)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory1 As EntityRef(Of AuthDirectory)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ApplicationRepositories = New EntitySet(Of ApplicationRepository)(AddressOf Me.attach_ApplicationRepositories, AddressOf Me.detach_ApplicationRepositories)
		Me._MerchantTerminals = New EntitySet(Of MerchantTerminal)(AddressOf Me.attach_MerchantTerminals, AddressOf Me.detach_MerchantTerminals)
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory1 = CType(Nothing, EntityRef(Of AuthDirectory))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				If Me._AuthDirectory1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TerminalType_ApplicationRepository", Storage:="_ApplicationRepositories", ThisKey:="ID", OtherKey:="TerminalTypeID")>  _
	Public Property ApplicationRepositories() As EntitySet(Of ApplicationRepository)
		Get
			Return Me._ApplicationRepositories
		End Get
		Set
			Me._ApplicationRepositories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TerminalType_MerchantTerminal", Storage:="_MerchantTerminals", ThisKey:="ID", OtherKey:="TerminalTypeID")>  _
	Public Property MerchantTerminals() As EntitySet(Of MerchantTerminal)
		Get
			Return Me._MerchantTerminals
		End Get
		Set
			Me._MerchantTerminals.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_TerminalType", Storage:="_AuthDirectory", ThisKey:="UpdatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.TerminalTypes.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TerminalTypes.Add(Me)
					Me._UpdatedBy = value.ID
				Else
					Me._UpdatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_TerminalType1", Storage:="_AuthDirectory1", ThisKey:="CreatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory1() As AuthDirectory
		Get
			Return Me._AuthDirectory1.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory1.Entity = Nothing
					previousValue.TerminalTypes1.Remove(Me)
				End If
				Me._AuthDirectory1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.TerminalTypes1.Add(Me)
					Me._CreatedBy = value.ID
				Else
					Me._CreatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory1")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ApplicationRepositories(ByVal entity As ApplicationRepository)
		Me.SendPropertyChanging
		entity.TerminalType = Me
	End Sub
	
	Private Sub detach_ApplicationRepositories(ByVal entity As ApplicationRepository)
		Me.SendPropertyChanging
		entity.TerminalType = Nothing
	End Sub
	
	Private Sub attach_MerchantTerminals(ByVal entity As MerchantTerminal)
		Me.SendPropertyChanging
		entity.TerminalType = Me
	End Sub
	
	Private Sub detach_MerchantTerminals(ByVal entity As MerchantTerminal)
		Me.SendPropertyChanging
		entity.TerminalType = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TypeOfBusiness")>  _
Partial Public Class TypeOfBusiness
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _Merchants As EntitySet(Of Merchant)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Merchants = New EntitySet(Of Merchant)(AddressOf Me.attach_Merchants, AddressOf Me.detach_Merchants)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TypeOfBusiness_Merchant", Storage:="_Merchants", ThisKey:="ID", OtherKey:="TypeOfBusinessID")>  _
	Public Property Merchants() As EntitySet(Of Merchant)
		Get
			Return Me._Merchants
		End Get
		Set
			Me._Merchants.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Merchants(ByVal entity As Merchant)
		Me.SendPropertyChanging
		entity.TypeOfBusiness = Me
	End Sub
	
	Private Sub detach_Merchants(ByVal entity As Merchant)
		Me.SendPropertyChanging
		entity.TypeOfBusiness = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.TypeOfService")>  _
Partial Public Class TypeOfService
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _MerchantDetails As EntitySet(Of MerchantDetail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._MerchantDetails = New EntitySet(Of MerchantDetail)(AddressOf Me.attach_MerchantDetails, AddressOf Me.detach_MerchantDetails)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="TypeOfService_MerchantDetail", Storage:="_MerchantDetails", ThisKey:="ID", OtherKey:="TypeOfServiceID")>  _
	Public Property MerchantDetails() As EntitySet(Of MerchantDetail)
		Get
			Return Me._MerchantDetails
		End Get
		Set
			Me._MerchantDetails.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_MerchantDetails(ByVal entity As MerchantDetail)
		Me.SendPropertyChanging
		entity.TypeOfService = Me
	End Sub
	
	Private Sub detach_MerchantDetails(ByVal entity As MerchantDetail)
		Me.SendPropertyChanging
		entity.TypeOfService = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.UniversalBankCodes")>  _
Partial Public Class UniversalBankCode
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Integer
	
	Private _Code As String
	
	Private _Description As String
	
	Private _FinancialInstitutionID As Long
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsActive As Boolean
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnCodeChanging(value As String)
    End Sub
    Partial Private Sub OnCodeChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnFinancialInstitutionIDChanging(value As Long)
    End Sub
    Partial Private Sub OnFinancialInstitutionIDChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Integer
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Code", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Code() As String
		Get
			Return Me._Code
		End Get
		Set
			If (String.Equals(Me._Code, value) = false) Then
				Me.OnCodeChanging(value)
				Me.SendPropertyChanging
				Me._Code = value
				Me.SendPropertyChanged("Code")
				Me.OnCodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(250) NOT NULL", CanBeNull:=false)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinancialInstitutionID", DbType:="BigInt NOT NULL")>  _
	Public Property FinancialInstitutionID() As Long
		Get
			Return Me._FinancialInstitutionID
		End Get
		Set
			If ((Me._FinancialInstitutionID = value)  _
						= false) Then
				Me.OnFinancialInstitutionIDChanging(value)
				Me.SendPropertyChanging
				Me._FinancialInstitutionID = value
				Me.SendPropertyChanged("FinancialInstitutionID")
				Me.OnFinancialInstitutionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.URL")>  _
Partial Public Class URL
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DNS As String
	
	Private _PostFix As String
	
	Private _Port As String
	
	Private _AuthUserID As System.Nullable(Of Long)
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _FailOver1 As String
	
	Private _FailOver2 As String
	
	Private _Environments As EntitySet(Of Environment)
	
	Private _Environments1 As EntitySet(Of Environment)
	
	Private _Environments2 As EntitySet(Of Environment)
	
	Private _Environments3 As EntitySet(Of Environment)
	
	Private _Environments4 As EntitySet(Of Environment)
	
	Private _Environments5 As EntitySet(Of Environment)
	
	Private _Environments6 As EntitySet(Of Environment)
	
	Private _Environments7 As EntitySet(Of Environment)
	
	Private _Environments8 As EntitySet(Of Environment)
	
	Private _Environments9 As EntitySet(Of Environment)
	
	Private _Environments10 As EntitySet(Of Environment)
	
	Private _Environments11 As EntitySet(Of Environment)
	
	Private _Environments12 As EntitySet(Of Environment)
	
	Private _Environments13 As EntitySet(Of Environment)
	
	Private _Environments14 As EntitySet(Of Environment)
	
	Private _Repositories As EntitySet(Of Repository)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDNSChanging(value As String)
    End Sub
    Partial Private Sub OnDNSChanged()
    End Sub
    Partial Private Sub OnPostFixChanging(value As String)
    End Sub
    Partial Private Sub OnPostFixChanged()
    End Sub
    Partial Private Sub OnPortChanging(value As String)
    End Sub
    Partial Private Sub OnPortChanged()
    End Sub
    Partial Private Sub OnAuthUserIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnAuthUserIDChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnFailOver1Changing(value As String)
    End Sub
    Partial Private Sub OnFailOver1Changed()
    End Sub
    Partial Private Sub OnFailOver2Changing(value As String)
    End Sub
    Partial Private Sub OnFailOver2Changed()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Environments = New EntitySet(Of Environment)(AddressOf Me.attach_Environments, AddressOf Me.detach_Environments)
		Me._Environments1 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments1, AddressOf Me.detach_Environments1)
		Me._Environments2 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments2, AddressOf Me.detach_Environments2)
		Me._Environments3 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments3, AddressOf Me.detach_Environments3)
		Me._Environments4 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments4, AddressOf Me.detach_Environments4)
		Me._Environments5 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments5, AddressOf Me.detach_Environments5)
		Me._Environments6 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments6, AddressOf Me.detach_Environments6)
		Me._Environments7 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments7, AddressOf Me.detach_Environments7)
		Me._Environments8 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments8, AddressOf Me.detach_Environments8)
		Me._Environments9 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments9, AddressOf Me.detach_Environments9)
		Me._Environments10 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments10, AddressOf Me.detach_Environments10)
		Me._Environments11 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments11, AddressOf Me.detach_Environments11)
		Me._Environments12 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments12, AddressOf Me.detach_Environments12)
		Me._Environments13 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments13, AddressOf Me.detach_Environments13)
		Me._Environments14 = New EntitySet(Of Environment)(AddressOf Me.attach_Environments14, AddressOf Me.detach_Environments14)
		Me._Repositories = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories, AddressOf Me.detach_Repositories)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DNS", DbType:="NVarChar(500)")>  _
	Public Property DNS() As String
		Get
			Return Me._DNS
		End Get
		Set
			If (String.Equals(Me._DNS, value) = false) Then
				Me.OnDNSChanging(value)
				Me.SendPropertyChanging
				Me._DNS = value
				Me.SendPropertyChanged("DNS")
				Me.OnDNSChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PostFix", DbType:="NVarChar(500)")>  _
	Public Property PostFix() As String
		Get
			Return Me._PostFix
		End Get
		Set
			If (String.Equals(Me._PostFix, value) = false) Then
				Me.OnPostFixChanging(value)
				Me.SendPropertyChanging
				Me._PostFix = value
				Me.SendPropertyChanged("PostFix")
				Me.OnPostFixChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Port", DbType:="NVarChar(10)")>  _
	Public Property Port() As String
		Get
			Return Me._Port
		End Get
		Set
			If (String.Equals(Me._Port, value) = false) Then
				Me.OnPortChanging(value)
				Me.SendPropertyChanging
				Me._Port = value
				Me.SendPropertyChanged("Port")
				Me.OnPortChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AuthUserID", DbType:="BigInt")>  _
	Public Property AuthUserID() As System.Nullable(Of Long)
		Get
			Return Me._AuthUserID
		End Get
		Set
			If (Me._AuthUserID.Equals(value) = false) Then
				Me.OnAuthUserIDChanging(value)
				Me.SendPropertyChanging
				Me._AuthUserID = value
				Me.SendPropertyChanged("AuthUserID")
				Me.OnAuthUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailOver1", DbType:="NVarChar(500)")>  _
	Public Property FailOver1() As String
		Get
			Return Me._FailOver1
		End Get
		Set
			If (String.Equals(Me._FailOver1, value) = false) Then
				Me.OnFailOver1Changing(value)
				Me.SendPropertyChanging
				Me._FailOver1 = value
				Me.SendPropertyChanged("FailOver1")
				Me.OnFailOver1Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FailOver2", DbType:="NVarChar(500)")>  _
	Public Property FailOver2() As String
		Get
			Return Me._FailOver2
		End Get
		Set
			If (String.Equals(Me._FailOver2, value) = false) Then
				Me.OnFailOver2Changing(value)
				Me.SendPropertyChanging
				Me._FailOver2 = value
				Me.SendPropertyChanged("FailOver2")
				Me.OnFailOver2Changed
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment", Storage:="_Environments", ThisKey:="ID", OtherKey:="APIURLID")>  _
	Public Property Environments() As EntitySet(Of Environment)
		Get
			Return Me._Environments
		End Get
		Set
			Me._Environments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment1", Storage:="_Environments1", ThisKey:="ID", OtherKey:="ExternalWebAPIURLID")>  _
	Public Property Environments1() As EntitySet(Of Environment)
		Get
			Return Me._Environments1
		End Get
		Set
			Me._Environments1.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment2", Storage:="_Environments2", ThisKey:="ID", OtherKey:="VodacomHTTPURLID")>  _
	Public Property Environments2() As EntitySet(Of Environment)
		Get
			Return Me._Environments2
		End Get
		Set
			Me._Environments2.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment3", Storage:="_Environments3", ThisKey:="ID", OtherKey:="VodacomRESTURLID")>  _
	Public Property Environments3() As EntitySet(Of Environment)
		Get
			Return Me._Environments3
		End Get
		Set
			Me._Environments3.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment4", Storage:="_Environments4", ThisKey:="ID", OtherKey:="VodacomSOAPURLID")>  _
	Public Property Environments4() As EntitySet(Of Environment)
		Get
			Return Me._Environments4
		End Get
		Set
			Me._Environments4.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment5", Storage:="_Environments5", ThisKey:="ID", OtherKey:="ConnectMobileNIUSSDURLID")>  _
	Public Property Environments5() As EntitySet(Of Environment)
		Get
			Return Me._Environments5
		End Get
		Set
			Me._Environments5.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment6", Storage:="_Environments6", ThisKey:="ID", OtherKey:="ConnectMobileSMSURLID")>  _
	Public Property Environments6() As EntitySet(Of Environment)
		Get
			Return Me._Environments6
		End Get
		Set
			Me._Environments6.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment7", Storage:="_Environments7", ThisKey:="ID", OtherKey:="ImagesURLID")>  _
	Public Property Environments7() As EntitySet(Of Environment)
		Get
			Return Me._Environments7
		End Get
		Set
			Me._Environments7.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment8", Storage:="_Environments8", ThisKey:="ID", OtherKey:="InternalWebAPIURLID")>  _
	Public Property Environments8() As EntitySet(Of Environment)
		Get
			Return Me._Environments8
		End Get
		Set
			Me._Environments8.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment9", Storage:="_Environments9", ThisKey:="ID", OtherKey:="PortalURLID")>  _
	Public Property Environments9() As EntitySet(Of Environment)
		Get
			Return Me._Environments9
		End Get
		Set
			Me._Environments9.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment10", Storage:="_Environments10", ThisKey:="ID", OtherKey:="SecondaryProcessURLID")>  _
	Public Property Environments10() As EntitySet(Of Environment)
		Get
			Return Me._Environments10
		End Get
		Set
			Me._Environments10.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment11", Storage:="_Environments11", ThisKey:="ID", OtherKey:="USSDURLID")>  _
	Public Property Environments11() As EntitySet(Of Environment)
		Get
			Return Me._Environments11
		End Get
		Set
			Me._Environments11.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment12", Storage:="_Environments12", ThisKey:="ID", OtherKey:="WebLinkURLID")>  _
	Public Property Environments12() As EntitySet(Of Environment)
		Get
			Return Me._Environments12
		End Get
		Set
			Me._Environments12.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment13", Storage:="_Environments13", ThisKey:="ID", OtherKey:="ACPASURLID")>  _
	Public Property Environments13() As EntitySet(Of Environment)
		Get
			Return Me._Environments13
		End Get
		Set
			Me._Environments13.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Environment14", Storage:="_Environments14", ThisKey:="ID", OtherKey:="CompuScanURLID")>  _
	Public Property Environments14() As EntitySet(Of Environment)
		Get
			Return Me._Environments14
		End Get
		Set
			Me._Environments14.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Repository", Storage:="_Repositories", ThisKey:="ID", OtherKey:="URLID")>  _
	Public Property Repositories() As EntitySet(Of Repository)
		Get
			Return Me._Repositories
		End Get
		Set
			Me._Repositories.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Environments(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL = Me
	End Sub
	
	Private Sub detach_Environments(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL = Nothing
	End Sub
	
	Private Sub attach_Environments1(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL1 = Me
	End Sub
	
	Private Sub detach_Environments1(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL1 = Nothing
	End Sub
	
	Private Sub attach_Environments2(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL2 = Me
	End Sub
	
	Private Sub detach_Environments2(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL2 = Nothing
	End Sub
	
	Private Sub attach_Environments3(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL3 = Me
	End Sub
	
	Private Sub detach_Environments3(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL3 = Nothing
	End Sub
	
	Private Sub attach_Environments4(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL4 = Me
	End Sub
	
	Private Sub detach_Environments4(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL4 = Nothing
	End Sub
	
	Private Sub attach_Environments5(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL5 = Me
	End Sub
	
	Private Sub detach_Environments5(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL5 = Nothing
	End Sub
	
	Private Sub attach_Environments6(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL6 = Me
	End Sub
	
	Private Sub detach_Environments6(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL6 = Nothing
	End Sub
	
	Private Sub attach_Environments7(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL7 = Me
	End Sub
	
	Private Sub detach_Environments7(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL7 = Nothing
	End Sub
	
	Private Sub attach_Environments8(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL8 = Me
	End Sub
	
	Private Sub detach_Environments8(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL8 = Nothing
	End Sub
	
	Private Sub attach_Environments9(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL9 = Me
	End Sub
	
	Private Sub detach_Environments9(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL9 = Nothing
	End Sub
	
	Private Sub attach_Environments10(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL10 = Me
	End Sub
	
	Private Sub detach_Environments10(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL10 = Nothing
	End Sub
	
	Private Sub attach_Environments11(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL11 = Me
	End Sub
	
	Private Sub detach_Environments11(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL11 = Nothing
	End Sub
	
	Private Sub attach_Environments12(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL12 = Me
	End Sub
	
	Private Sub detach_Environments12(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL12 = Nothing
	End Sub
	
	Private Sub attach_Environments13(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL13 = Me
	End Sub
	
	Private Sub detach_Environments13(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL13 = Nothing
	End Sub
	
	Private Sub attach_Environments14(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL14 = Me
	End Sub
	
	Private Sub detach_Environments14(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.URL14 = Nothing
	End Sub
	
	Private Sub attach_Repositories(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.URL = Me
	End Sub
	
	Private Sub detach_Repositories(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.URL = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vPaymentRequestStage")>  _
Partial Public Class vPaymentRequestStage
	
	Private _ID As Long
	
	Private _MerchantName As String
	
	Private _CustomerName As String
	
	Private _IDNumber As String
	
	Private _MerchantID As System.Nullable(Of Long)
	
	Private _CurrDate As String
	
	Private _OfferAmount As String
	
	Private _Industry As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="BigInt NOT NULL")>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantName", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property MerchantName() As String
		Get
			Return Me._MerchantName
		End Get
		Set
			If (String.Equals(Me._MerchantName, value) = false) Then
				Me._MerchantName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(1001)")>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me._CustomerName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDNumber", DbType:="NVarChar(50)")>  _
	Public Property IDNumber() As String
		Get
			Return Me._IDNumber
		End Get
		Set
			If (String.Equals(Me._IDNumber, value) = false) Then
				Me._IDNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantID", DbType:="BigInt")>  _
	Public Property MerchantID() As System.Nullable(Of Long)
		Get
			Return Me._MerchantID
		End Get
		Set
			If (Me._MerchantID.Equals(value) = false) Then
				Me._MerchantID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrDate", DbType:="NVarChar(4000)")>  _
	Public Property CurrDate() As String
		Get
			Return Me._CurrDate
		End Get
		Set
			If (String.Equals(Me._CurrDate, value) = false) Then
				Me._CurrDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OfferAmount", DbType:="VarChar(14)")>  _
	Public Property OfferAmount() As String
		Get
			Return Me._OfferAmount
		End Get
		Set
			If (String.Equals(Me._OfferAmount, value) = false) Then
				Me._OfferAmount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Industry", DbType:="NVarChar(500)")>  _
	Public Property Industry() As String
		Get
			Return Me._Industry
		End Get
		Set
			If (String.Equals(Me._Industry, value) = false) Then
				Me._Industry = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vWFUAT")>  _
Partial Public Class vWFUAT
	
	Private _ApplicationID As String
	
	Private _VirtualActorId As System.Nullable(Of System.Guid)
	
	Private _Id As System.Nullable(Of System.Guid)
	
	Private _UserID As System.Nullable(Of Integer)
	
	Private _Name As String
	
	Private _Email As String
	
	Private _IsActiveUser As System.Nullable(Of Boolean)
	
	Private _ActivityDisplayName As String
	
	Private _Priority As System.Nullable(Of Integer)
	
	Private _InternalStatus As String
	
	Private _CurrentStatus As String
	
	Private _OwnershipDateTime As System.Nullable(Of Date)
	
	Private _exName As String
	
	Private _EIStatus As String
	
	Private _Status As String
	
	Private _StartedOn As System.Nullable(Of Date)
	
	Private _Output As String
	
	Private _InlinkActionExecutionDetailsID As System.Nullable(Of Integer)
	
	Private _InlinkActionOutput As String
	
	Private _ActionType As String
	
	Private _LocalVariablesId As System.Nullable(Of Integer)
	
	Private _ExecutionEndedAt As System.Nullable(Of Date)
	
	Private _QueueID As System.Nullable(Of System.Guid)
	
	Private _Queue As String
	
	Private _NewItemCount As System.Nullable(Of Integer)
	
	Private _InProgressItemCount As System.Nullable(Of Integer)
	
	Private _CompletedItemCount As System.Nullable(Of Integer)
	
	Private _WorkItemID As System.Guid
	
	Private _ActivityID As System.Guid
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="NVarChar(MAX)")>  _
	Public Property ApplicationID() As String
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (String.Equals(Me._ApplicationID, value) = false) Then
				Me._ApplicationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VirtualActorId", DbType:="UniqueIdentifier")>  _
	Public Property VirtualActorId() As System.Nullable(Of System.Guid)
		Get
			Return Me._VirtualActorId
		End Get
		Set
			If (Me._VirtualActorId.Equals(value) = false) Then
				Me._VirtualActorId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="UniqueIdentifier")>  _
	Public Property Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Id
		End Get
		Set
			If (Me._Id.Equals(value) = false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int")>  _
	Public Property UserID() As System.Nullable(Of Integer)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(250)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(200)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me._Email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActiveUser", DbType:="Bit")>  _
	Public Property IsActiveUser() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActiveUser
		End Get
		Set
			If (Me._IsActiveUser.Equals(value) = false) Then
				Me._IsActiveUser = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivityDisplayName", DbType:="NVarChar(100)")>  _
	Public Property ActivityDisplayName() As String
		Get
			Return Me._ActivityDisplayName
		End Get
		Set
			If (String.Equals(Me._ActivityDisplayName, value) = false) Then
				Me._ActivityDisplayName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Priority", DbType:="Int")>  _
	Public Property Priority() As System.Nullable(Of Integer)
		Get
			Return Me._Priority
		End Get
		Set
			If (Me._Priority.Equals(value) = false) Then
				Me._Priority = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InternalStatus", DbType:="Char(2)")>  _
	Public Property InternalStatus() As String
		Get
			Return Me._InternalStatus
		End Get
		Set
			If (String.Equals(Me._InternalStatus, value) = false) Then
				Me._InternalStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentStatus", DbType:="NVarChar(50)")>  _
	Public Property CurrentStatus() As String
		Get
			Return Me._CurrentStatus
		End Get
		Set
			If (String.Equals(Me._CurrentStatus, value) = false) Then
				Me._CurrentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OwnershipDateTime", DbType:="DateTime")>  _
	Public Property OwnershipDateTime() As System.Nullable(Of Date)
		Get
			Return Me._OwnershipDateTime
		End Get
		Set
			If (Me._OwnershipDateTime.Equals(value) = false) Then
				Me._OwnershipDateTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exName", DbType:="NVarChar(250)")>  _
	Public Property exName() As String
		Get
			Return Me._exName
		End Get
		Set
			If (String.Equals(Me._exName, value) = false) Then
				Me._exName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EIStatus", DbType:="NChar(2)")>  _
	Public Property EIStatus() As String
		Get
			Return Me._EIStatus
		End Get
		Set
			If (String.Equals(Me._EIStatus, value) = false) Then
				Me._EIStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="NVarChar(50)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me._Status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartedOn", DbType:="DateTime")>  _
	Public Property StartedOn() As System.Nullable(Of Date)
		Get
			Return Me._StartedOn
		End Get
		Set
			If (Me._StartedOn.Equals(value) = false) Then
				Me._StartedOn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Output", DbType:="NVarChar(100)")>  _
	Public Property Output() As String
		Get
			Return Me._Output
		End Get
		Set
			If (String.Equals(Me._Output, value) = false) Then
				Me._Output = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InlinkActionExecutionDetailsID", DbType:="Int")>  _
	Public Property InlinkActionExecutionDetailsID() As System.Nullable(Of Integer)
		Get
			Return Me._InlinkActionExecutionDetailsID
		End Get
		Set
			If (Me._InlinkActionExecutionDetailsID.Equals(value) = false) Then
				Me._InlinkActionExecutionDetailsID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InlinkActionOutput", DbType:="NVarChar(100)")>  _
	Public Property InlinkActionOutput() As String
		Get
			Return Me._InlinkActionOutput
		End Get
		Set
			If (String.Equals(Me._InlinkActionOutput, value) = false) Then
				Me._InlinkActionOutput = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActionType", DbType:="NVarChar(100)")>  _
	Public Property ActionType() As String
		Get
			Return Me._ActionType
		End Get
		Set
			If (String.Equals(Me._ActionType, value) = false) Then
				Me._ActionType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocalVariablesId", DbType:="Int")>  _
	Public Property LocalVariablesId() As System.Nullable(Of Integer)
		Get
			Return Me._LocalVariablesId
		End Get
		Set
			If (Me._LocalVariablesId.Equals(value) = false) Then
				Me._LocalVariablesId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExecutionEndedAt", DbType:="DateTime")>  _
	Public Property ExecutionEndedAt() As System.Nullable(Of Date)
		Get
			Return Me._ExecutionEndedAt
		End Get
		Set
			If (Me._ExecutionEndedAt.Equals(value) = false) Then
				Me._ExecutionEndedAt = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QueueID", DbType:="UniqueIdentifier")>  _
	Public Property QueueID() As System.Nullable(Of System.Guid)
		Get
			Return Me._QueueID
		End Get
		Set
			If (Me._QueueID.Equals(value) = false) Then
				Me._QueueID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Queue", DbType:="NVarChar(250)")>  _
	Public Property Queue() As String
		Get
			Return Me._Queue
		End Get
		Set
			If (String.Equals(Me._Queue, value) = false) Then
				Me._Queue = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewItemCount", DbType:="Int")>  _
	Public Property NewItemCount() As System.Nullable(Of Integer)
		Get
			Return Me._NewItemCount
		End Get
		Set
			If (Me._NewItemCount.Equals(value) = false) Then
				Me._NewItemCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InProgressItemCount", DbType:="Int")>  _
	Public Property InProgressItemCount() As System.Nullable(Of Integer)
		Get
			Return Me._InProgressItemCount
		End Get
		Set
			If (Me._InProgressItemCount.Equals(value) = false) Then
				Me._InProgressItemCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompletedItemCount", DbType:="Int")>  _
	Public Property CompletedItemCount() As System.Nullable(Of Integer)
		Get
			Return Me._CompletedItemCount
		End Get
		Set
			If (Me._CompletedItemCount.Equals(value) = false) Then
				Me._CompletedItemCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WorkItemID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property WorkItemID() As System.Guid
		Get
			Return Me._WorkItemID
		End Get
		Set
			If ((Me._WorkItemID = value)  _
						= false) Then
				Me._WorkItemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivityID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ActivityID() As System.Guid
		Get
			Return Me._ActivityID
		End Get
		Set
			If ((Me._ActivityID = value)  _
						= false) Then
				Me._ActivityID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vPaymentRequestUAT")>  _
Partial Public Class vPaymentRequestUAT
	
	Private _ID As Long
	
	Private _MerchantName As String
	
	Private _CustomerName As String
	
	Private _IDNumber As String
	
	Private _MerchantID As System.Nullable(Of Long)
	
	Private _CurrDate As String
	
	Private _OfferAmount As String
	
	Private _Industry As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="BigInt NOT NULL")>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantName", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property MerchantName() As String
		Get
			Return Me._MerchantName
		End Get
		Set
			If (String.Equals(Me._MerchantName, value) = false) Then
				Me._MerchantName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CustomerName", DbType:="NVarChar(1001)")>  _
	Public Property CustomerName() As String
		Get
			Return Me._CustomerName
		End Get
		Set
			If (String.Equals(Me._CustomerName, value) = false) Then
				Me._CustomerName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDNumber", DbType:="NVarChar(50)")>  _
	Public Property IDNumber() As String
		Get
			Return Me._IDNumber
		End Get
		Set
			If (String.Equals(Me._IDNumber, value) = false) Then
				Me._IDNumber = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantID", DbType:="BigInt")>  _
	Public Property MerchantID() As System.Nullable(Of Long)
		Get
			Return Me._MerchantID
		End Get
		Set
			If (Me._MerchantID.Equals(value) = false) Then
				Me._MerchantID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrDate", DbType:="NVarChar(4000)")>  _
	Public Property CurrDate() As String
		Get
			Return Me._CurrDate
		End Get
		Set
			If (String.Equals(Me._CurrDate, value) = false) Then
				Me._CurrDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OfferAmount", DbType:="VarChar(14)")>  _
	Public Property OfferAmount() As String
		Get
			Return Me._OfferAmount
		End Get
		Set
			If (String.Equals(Me._OfferAmount, value) = false) Then
				Me._OfferAmount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Industry", DbType:="NVarChar(500)")>  _
	Public Property Industry() As String
		Get
			Return Me._Industry
		End Get
		Set
			If (String.Equals(Me._Industry, value) = false) Then
				Me._Industry = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vWFProduction")>  _
Partial Public Class vWFProduction
	
	Private _ApplicationID As String
	
	Private _VirtualActorId As System.Nullable(Of System.Guid)
	
	Private _Id As System.Nullable(Of System.Guid)
	
	Private _UserID As System.Nullable(Of Integer)
	
	Private _Name As String
	
	Private _Email As String
	
	Private _IsActiveUser As System.Nullable(Of Boolean)
	
	Private _ActivityDisplayName As String
	
	Private _Priority As System.Nullable(Of Integer)
	
	Private _InternalStatus As String
	
	Private _CurrentStatus As String
	
	Private _OwnershipDateTime As System.Nullable(Of Date)
	
	Private _exName As String
	
	Private _EIStatus As String
	
	Private _Status As String
	
	Private _StartedOn As System.Nullable(Of Date)
	
	Private _Output As String
	
	Private _InlinkActionExecutionDetailsID As System.Nullable(Of Integer)
	
	Private _InlinkActionOutput As String
	
	Private _ActionType As String
	
	Private _LocalVariablesId As System.Nullable(Of Integer)
	
	Private _ExecutionEndedAt As System.Nullable(Of Date)
	
	Private _QueueID As System.Nullable(Of System.Guid)
	
	Private _Queue As String
	
	Private _NewItemCount As System.Nullable(Of Integer)
	
	Private _InProgressItemCount As System.Nullable(Of Integer)
	
	Private _CompletedItemCount As System.Nullable(Of Integer)
	
	Private _WorkItemID As System.Guid
	
	Private _ActivityID As System.Guid
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="NVarChar(MAX)")>  _
	Public Property ApplicationID() As String
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (String.Equals(Me._ApplicationID, value) = false) Then
				Me._ApplicationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VirtualActorId", DbType:="UniqueIdentifier")>  _
	Public Property VirtualActorId() As System.Nullable(Of System.Guid)
		Get
			Return Me._VirtualActorId
		End Get
		Set
			If (Me._VirtualActorId.Equals(value) = false) Then
				Me._VirtualActorId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="UniqueIdentifier")>  _
	Public Property Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Id
		End Get
		Set
			If (Me._Id.Equals(value) = false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int")>  _
	Public Property UserID() As System.Nullable(Of Integer)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(250)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(200)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me._Email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActiveUser", DbType:="Bit")>  _
	Public Property IsActiveUser() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActiveUser
		End Get
		Set
			If (Me._IsActiveUser.Equals(value) = false) Then
				Me._IsActiveUser = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivityDisplayName", DbType:="NVarChar(100)")>  _
	Public Property ActivityDisplayName() As String
		Get
			Return Me._ActivityDisplayName
		End Get
		Set
			If (String.Equals(Me._ActivityDisplayName, value) = false) Then
				Me._ActivityDisplayName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Priority", DbType:="Int")>  _
	Public Property Priority() As System.Nullable(Of Integer)
		Get
			Return Me._Priority
		End Get
		Set
			If (Me._Priority.Equals(value) = false) Then
				Me._Priority = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InternalStatus", DbType:="Char(2)")>  _
	Public Property InternalStatus() As String
		Get
			Return Me._InternalStatus
		End Get
		Set
			If (String.Equals(Me._InternalStatus, value) = false) Then
				Me._InternalStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentStatus", DbType:="NVarChar(50)")>  _
	Public Property CurrentStatus() As String
		Get
			Return Me._CurrentStatus
		End Get
		Set
			If (String.Equals(Me._CurrentStatus, value) = false) Then
				Me._CurrentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OwnershipDateTime", DbType:="DateTime")>  _
	Public Property OwnershipDateTime() As System.Nullable(Of Date)
		Get
			Return Me._OwnershipDateTime
		End Get
		Set
			If (Me._OwnershipDateTime.Equals(value) = false) Then
				Me._OwnershipDateTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exName", DbType:="NVarChar(250)")>  _
	Public Property exName() As String
		Get
			Return Me._exName
		End Get
		Set
			If (String.Equals(Me._exName, value) = false) Then
				Me._exName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EIStatus", DbType:="NChar(2)")>  _
	Public Property EIStatus() As String
		Get
			Return Me._EIStatus
		End Get
		Set
			If (String.Equals(Me._EIStatus, value) = false) Then
				Me._EIStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="NVarChar(50)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me._Status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartedOn", DbType:="DateTime")>  _
	Public Property StartedOn() As System.Nullable(Of Date)
		Get
			Return Me._StartedOn
		End Get
		Set
			If (Me._StartedOn.Equals(value) = false) Then
				Me._StartedOn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Output", DbType:="NVarChar(100)")>  _
	Public Property Output() As String
		Get
			Return Me._Output
		End Get
		Set
			If (String.Equals(Me._Output, value) = false) Then
				Me._Output = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InlinkActionExecutionDetailsID", DbType:="Int")>  _
	Public Property InlinkActionExecutionDetailsID() As System.Nullable(Of Integer)
		Get
			Return Me._InlinkActionExecutionDetailsID
		End Get
		Set
			If (Me._InlinkActionExecutionDetailsID.Equals(value) = false) Then
				Me._InlinkActionExecutionDetailsID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InlinkActionOutput", DbType:="NVarChar(100)")>  _
	Public Property InlinkActionOutput() As String
		Get
			Return Me._InlinkActionOutput
		End Get
		Set
			If (String.Equals(Me._InlinkActionOutput, value) = false) Then
				Me._InlinkActionOutput = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActionType", DbType:="NVarChar(100)")>  _
	Public Property ActionType() As String
		Get
			Return Me._ActionType
		End Get
		Set
			If (String.Equals(Me._ActionType, value) = false) Then
				Me._ActionType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocalVariablesId", DbType:="Int")>  _
	Public Property LocalVariablesId() As System.Nullable(Of Integer)
		Get
			Return Me._LocalVariablesId
		End Get
		Set
			If (Me._LocalVariablesId.Equals(value) = false) Then
				Me._LocalVariablesId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExecutionEndedAt", DbType:="DateTime")>  _
	Public Property ExecutionEndedAt() As System.Nullable(Of Date)
		Get
			Return Me._ExecutionEndedAt
		End Get
		Set
			If (Me._ExecutionEndedAt.Equals(value) = false) Then
				Me._ExecutionEndedAt = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QueueID", DbType:="UniqueIdentifier")>  _
	Public Property QueueID() As System.Nullable(Of System.Guid)
		Get
			Return Me._QueueID
		End Get
		Set
			If (Me._QueueID.Equals(value) = false) Then
				Me._QueueID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Queue", DbType:="NVarChar(250)")>  _
	Public Property Queue() As String
		Get
			Return Me._Queue
		End Get
		Set
			If (String.Equals(Me._Queue, value) = false) Then
				Me._Queue = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewItemCount", DbType:="Int")>  _
	Public Property NewItemCount() As System.Nullable(Of Integer)
		Get
			Return Me._NewItemCount
		End Get
		Set
			If (Me._NewItemCount.Equals(value) = false) Then
				Me._NewItemCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InProgressItemCount", DbType:="Int")>  _
	Public Property InProgressItemCount() As System.Nullable(Of Integer)
		Get
			Return Me._InProgressItemCount
		End Get
		Set
			If (Me._InProgressItemCount.Equals(value) = false) Then
				Me._InProgressItemCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompletedItemCount", DbType:="Int")>  _
	Public Property CompletedItemCount() As System.Nullable(Of Integer)
		Get
			Return Me._CompletedItemCount
		End Get
		Set
			If (Me._CompletedItemCount.Equals(value) = false) Then
				Me._CompletedItemCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WorkItemID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property WorkItemID() As System.Guid
		Get
			Return Me._WorkItemID
		End Get
		Set
			If ((Me._WorkItemID = value)  _
						= false) Then
				Me._WorkItemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivityID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ActivityID() As System.Guid
		Get
			Return Me._ActivityID
		End Get
		Set
			If ((Me._ActivityID = value)  _
						= false) Then
				Me._ActivityID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vWFStage")>  _
Partial Public Class vWFStage
	
	Private _ApplicationID As String
	
	Private _VirtualActorId As System.Nullable(Of System.Guid)
	
	Private _Id As System.Nullable(Of System.Guid)
	
	Private _UserID As System.Nullable(Of Integer)
	
	Private _Name As String
	
	Private _Email As String
	
	Private _IsActiveUser As System.Nullable(Of Boolean)
	
	Private _ActivityDisplayName As String
	
	Private _Priority As System.Nullable(Of Integer)
	
	Private _InternalStatus As String
	
	Private _CurrentStatus As String
	
	Private _OwnershipDateTime As System.Nullable(Of Date)
	
	Private _exName As String
	
	Private _EIStatus As String
	
	Private _Status As String
	
	Private _StartedOn As System.Nullable(Of Date)
	
	Private _Output As String
	
	Private _InlinkActionExecutionDetailsID As System.Nullable(Of Integer)
	
	Private _InlinkActionOutput As String
	
	Private _ActionType As String
	
	Private _LocalVariablesId As System.Nullable(Of Integer)
	
	Private _ExecutionEndedAt As System.Nullable(Of Date)
	
	Private _QueueID As System.Nullable(Of System.Guid)
	
	Private _Queue As String
	
	Private _NewItemCount As System.Nullable(Of Integer)
	
	Private _InProgressItemCount As System.Nullable(Of Integer)
	
	Private _CompletedItemCount As System.Nullable(Of Integer)
	
	Private _WorkItemID As System.Guid
	
	Private _ActivityID As System.Guid
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="NVarChar(MAX)")>  _
	Public Property ApplicationID() As String
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (String.Equals(Me._ApplicationID, value) = false) Then
				Me._ApplicationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VirtualActorId", DbType:="UniqueIdentifier")>  _
	Public Property VirtualActorId() As System.Nullable(Of System.Guid)
		Get
			Return Me._VirtualActorId
		End Get
		Set
			If (Me._VirtualActorId.Equals(value) = false) Then
				Me._VirtualActorId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", DbType:="UniqueIdentifier")>  _
	Public Property Id() As System.Nullable(Of System.Guid)
		Get
			Return Me._Id
		End Get
		Set
			If (Me._Id.Equals(value) = false) Then
				Me._Id = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UserID", DbType:="Int")>  _
	Public Property UserID() As System.Nullable(Of Integer)
		Get
			Return Me._UserID
		End Get
		Set
			If (Me._UserID.Equals(value) = false) Then
				Me._UserID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(250)")>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me._Name = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="NVarChar(200)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me._Email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActiveUser", DbType:="Bit")>  _
	Public Property IsActiveUser() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActiveUser
		End Get
		Set
			If (Me._IsActiveUser.Equals(value) = false) Then
				Me._IsActiveUser = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivityDisplayName", DbType:="NVarChar(100)")>  _
	Public Property ActivityDisplayName() As String
		Get
			Return Me._ActivityDisplayName
		End Get
		Set
			If (String.Equals(Me._ActivityDisplayName, value) = false) Then
				Me._ActivityDisplayName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Priority", DbType:="Int")>  _
	Public Property Priority() As System.Nullable(Of Integer)
		Get
			Return Me._Priority
		End Get
		Set
			If (Me._Priority.Equals(value) = false) Then
				Me._Priority = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InternalStatus", DbType:="Char(2)")>  _
	Public Property InternalStatus() As String
		Get
			Return Me._InternalStatus
		End Get
		Set
			If (String.Equals(Me._InternalStatus, value) = false) Then
				Me._InternalStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CurrentStatus", DbType:="NVarChar(50)")>  _
	Public Property CurrentStatus() As String
		Get
			Return Me._CurrentStatus
		End Get
		Set
			If (String.Equals(Me._CurrentStatus, value) = false) Then
				Me._CurrentStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OwnershipDateTime", DbType:="DateTime")>  _
	Public Property OwnershipDateTime() As System.Nullable(Of Date)
		Get
			Return Me._OwnershipDateTime
		End Get
		Set
			If (Me._OwnershipDateTime.Equals(value) = false) Then
				Me._OwnershipDateTime = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_exName", DbType:="NVarChar(250)")>  _
	Public Property exName() As String
		Get
			Return Me._exName
		End Get
		Set
			If (String.Equals(Me._exName, value) = false) Then
				Me._exName = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EIStatus", DbType:="NChar(2)")>  _
	Public Property EIStatus() As String
		Get
			Return Me._EIStatus
		End Get
		Set
			If (String.Equals(Me._EIStatus, value) = false) Then
				Me._EIStatus = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="NVarChar(50)")>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me._Status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartedOn", DbType:="DateTime")>  _
	Public Property StartedOn() As System.Nullable(Of Date)
		Get
			Return Me._StartedOn
		End Get
		Set
			If (Me._StartedOn.Equals(value) = false) Then
				Me._StartedOn = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Output", DbType:="NVarChar(100)")>  _
	Public Property Output() As String
		Get
			Return Me._Output
		End Get
		Set
			If (String.Equals(Me._Output, value) = false) Then
				Me._Output = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InlinkActionExecutionDetailsID", DbType:="Int")>  _
	Public Property InlinkActionExecutionDetailsID() As System.Nullable(Of Integer)
		Get
			Return Me._InlinkActionExecutionDetailsID
		End Get
		Set
			If (Me._InlinkActionExecutionDetailsID.Equals(value) = false) Then
				Me._InlinkActionExecutionDetailsID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InlinkActionOutput", DbType:="NVarChar(100)")>  _
	Public Property InlinkActionOutput() As String
		Get
			Return Me._InlinkActionOutput
		End Get
		Set
			If (String.Equals(Me._InlinkActionOutput, value) = false) Then
				Me._InlinkActionOutput = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActionType", DbType:="NVarChar(100)")>  _
	Public Property ActionType() As String
		Get
			Return Me._ActionType
		End Get
		Set
			If (String.Equals(Me._ActionType, value) = false) Then
				Me._ActionType = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocalVariablesId", DbType:="Int")>  _
	Public Property LocalVariablesId() As System.Nullable(Of Integer)
		Get
			Return Me._LocalVariablesId
		End Get
		Set
			If (Me._LocalVariablesId.Equals(value) = false) Then
				Me._LocalVariablesId = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExecutionEndedAt", DbType:="DateTime")>  _
	Public Property ExecutionEndedAt() As System.Nullable(Of Date)
		Get
			Return Me._ExecutionEndedAt
		End Get
		Set
			If (Me._ExecutionEndedAt.Equals(value) = false) Then
				Me._ExecutionEndedAt = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QueueID", DbType:="UniqueIdentifier")>  _
	Public Property QueueID() As System.Nullable(Of System.Guid)
		Get
			Return Me._QueueID
		End Get
		Set
			If (Me._QueueID.Equals(value) = false) Then
				Me._QueueID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Queue", DbType:="NVarChar(250)")>  _
	Public Property Queue() As String
		Get
			Return Me._Queue
		End Get
		Set
			If (String.Equals(Me._Queue, value) = false) Then
				Me._Queue = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NewItemCount", DbType:="Int")>  _
	Public Property NewItemCount() As System.Nullable(Of Integer)
		Get
			Return Me._NewItemCount
		End Get
		Set
			If (Me._NewItemCount.Equals(value) = false) Then
				Me._NewItemCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InProgressItemCount", DbType:="Int")>  _
	Public Property InProgressItemCount() As System.Nullable(Of Integer)
		Get
			Return Me._InProgressItemCount
		End Get
		Set
			If (Me._InProgressItemCount.Equals(value) = false) Then
				Me._InProgressItemCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompletedItemCount", DbType:="Int")>  _
	Public Property CompletedItemCount() As System.Nullable(Of Integer)
		Get
			Return Me._CompletedItemCount
		End Get
		Set
			If (Me._CompletedItemCount.Equals(value) = false) Then
				Me._CompletedItemCount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WorkItemID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property WorkItemID() As System.Guid
		Get
			Return Me._WorkItemID
		End Get
		Set
			If ((Me._WorkItemID = value)  _
						= false) Then
				Me._WorkItemID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ActivityID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property ActivityID() As System.Guid
		Get
			Return Me._ActivityID
		End Get
		Set
			If ((Me._ActivityID = value)  _
						= false) Then
				Me._ActivityID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vDisbursement")>  _
Partial Public Class vDisbursement
	
	Private _ID As Long
	
	Private _Amount As String
	
	Private _ApplicationID As System.Nullable(Of Long)
	
	Private _DebitOrderTypeID As System.Nullable(Of Long)
	
	Private _MerchantID As System.Nullable(Of Long)
	
	Private _Date As String
	
	Private _Merchant As String
	
	Private _AwaitingRelease As System.Nullable(Of Boolean)
	
	Private _Released As System.Nullable(Of Boolean)
	
	Private _Paid As System.Nullable(Of Boolean)
	
	Private _DateReleased As System.Nullable(Of Date)
	
	Private _DatePaid As System.Nullable(Of Date)
	
	Private _Commission As System.Nullable(Of Double)
	
	Private _Description As String
	
	Private _FileID As System.Nullable(Of Long)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="BigInt NOT NULL")>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="NVarChar(4000)")>  _
	Public Property Amount() As String
		Get
			Return Me._Amount
		End Get
		Set
			If (String.Equals(Me._Amount, value) = false) Then
				Me._Amount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApplicationID", DbType:="BigInt")>  _
	Public Property ApplicationID() As System.Nullable(Of Long)
		Get
			Return Me._ApplicationID
		End Get
		Set
			If (Me._ApplicationID.Equals(value) = false) Then
				Me._ApplicationID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DebitOrderTypeID", DbType:="BigInt")>  _
	Public Property DebitOrderTypeID() As System.Nullable(Of Long)
		Get
			Return Me._DebitOrderTypeID
		End Get
		Set
			If (Me._DebitOrderTypeID.Equals(value) = false) Then
				Me._DebitOrderTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantID", DbType:="BigInt")>  _
	Public Property MerchantID() As System.Nullable(Of Long)
		Get
			Return Me._MerchantID
		End Get
		Set
			If (Me._MerchantID.Equals(value) = false) Then
				Me._MerchantID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="Date", Storage:="_Date", DbType:="NVarChar(4000)")>  _
	Public Property [Date]() As String
		Get
			Return Me._Date
		End Get
		Set
			If (String.Equals(Me._Date, value) = false) Then
				Me._Date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Merchant", DbType:="NVarChar(500)")>  _
	Public Property Merchant() As String
		Get
			Return Me._Merchant
		End Get
		Set
			If (String.Equals(Me._Merchant, value) = false) Then
				Me._Merchant = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AwaitingRelease", DbType:="Bit")>  _
	Public Property AwaitingRelease() As System.Nullable(Of Boolean)
		Get
			Return Me._AwaitingRelease
		End Get
		Set
			If (Me._AwaitingRelease.Equals(value) = false) Then
				Me._AwaitingRelease = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Released", DbType:="Bit")>  _
	Public Property Released() As System.Nullable(Of Boolean)
		Get
			Return Me._Released
		End Get
		Set
			If (Me._Released.Equals(value) = false) Then
				Me._Released = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Paid", DbType:="Bit")>  _
	Public Property Paid() As System.Nullable(Of Boolean)
		Get
			Return Me._Paid
		End Get
		Set
			If (Me._Paid.Equals(value) = false) Then
				Me._Paid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateReleased", DbType:="DateTime")>  _
	Public Property DateReleased() As System.Nullable(Of Date)
		Get
			Return Me._DateReleased
		End Get
		Set
			If (Me._DateReleased.Equals(value) = false) Then
				Me._DateReleased = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DatePaid", DbType:="DateTime")>  _
	Public Property DatePaid() As System.Nullable(Of Date)
		Get
			Return Me._DatePaid
		End Get
		Set
			If (Me._DatePaid.Equals(value) = false) Then
				Me._DatePaid = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Commission", DbType:="Float")>  _
	Public Property Commission() As System.Nullable(Of Double)
		Get
			Return Me._Commission
		End Get
		Set
			If (Me._Commission.Equals(value) = false) Then
				Me._Commission = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="NVarChar(500)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me._Description = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FileID", DbType:="BigInt")>  _
	Public Property FileID() As System.Nullable(Of Long)
		Get
			Return Me._FileID
		End Get
		Set
			If (Me._FileID.Equals(value) = false) Then
				Me._FileID = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.vDebitOrder")>  _
Partial Public Class vDebitOrder
	
	Private _ID As Long
	
	Private _Amount As String
	
	Private _Title As String
	
	Private _DebitOrderTypeID As System.Nullable(Of Long)
	
	Private _MerchantID As System.Nullable(Of Long)
	
	Private _StartDate As String
	
	Private _Merchant As String
	
	Private _Reference As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", DbType:="BigInt NOT NULL")>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me._ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Amount", DbType:="NVarChar(4000)")>  _
	Public Property Amount() As String
		Get
			Return Me._Amount
		End Get
		Set
			If (String.Equals(Me._Amount, value) = false) Then
				Me._Amount = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me._Title = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DebitOrderTypeID", DbType:="BigInt")>  _
	Public Property DebitOrderTypeID() As System.Nullable(Of Long)
		Get
			Return Me._DebitOrderTypeID
		End Get
		Set
			If (Me._DebitOrderTypeID.Equals(value) = false) Then
				Me._DebitOrderTypeID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MerchantID", DbType:="BigInt")>  _
	Public Property MerchantID() As System.Nullable(Of Long)
		Get
			Return Me._MerchantID
		End Get
		Set
			If (Me._MerchantID.Equals(value) = false) Then
				Me._MerchantID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDate", DbType:="NVarChar(4000)")>  _
	Public Property StartDate() As String
		Get
			Return Me._StartDate
		End Get
		Set
			If (String.Equals(Me._StartDate, value) = false) Then
				Me._StartDate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Merchant", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Merchant() As String
		Get
			Return Me._Merchant
		End Get
		Set
			If (String.Equals(Me._Merchant, value) = false) Then
				Me._Merchant = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Reference", DbType:="NVarChar(50)")>  _
	Public Property Reference() As String
		Get
			Return Me._Reference
		End Get
		Set
			If (String.Equals(Me._Reference, value) = false) Then
				Me._Reference = value
			End If
		End Set
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Repository")>  _
Partial Public Class Repository
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ID As Long
	
	Private _Title As String
	
	Private _DefaultIDNo As String
	
	Private _DefaultMobile As String
	
	Private _DefaultAmount As System.Nullable(Of Decimal)
	
	Private _DefaultBank As System.Nullable(Of Integer)
	
	Private _DefaultOTP As String
	
	Private _SystemQueueID As System.Nullable(Of Long)
	
	Private _SwitchPayQueueID As System.Nullable(Of Long)
	
	Private _FinanceQueueID As System.Nullable(Of Long)
	
	Private _DealsQueueID As System.Nullable(Of Long)
	
	Private _PaymentsQueueID As System.Nullable(Of Long)
	
	Private _VerifyPOPQueueID As System.Nullable(Of Long)
	
	Private _ApprovePaymentQueueID As System.Nullable(Of Long)
	
	Private _URLID As System.Nullable(Of Long)
	
	Private _EntryWorkflow As String
	
	Private _DealAdminWorkflow As String
	
	Private _DashboardWorkflow As String
	
	Private _MainDatabaseID As System.Nullable(Of Long)
	
	Private _DatabaseID As System.Nullable(Of Long)
	
	Private _RulesEngineDBID As System.Nullable(Of Long)
	
	Private _MainRepositoryID As System.Nullable(Of Long)
	
	Private _RepositoryTypeID As System.Nullable(Of Long)
	
	Private _ServiceUserID As System.Nullable(Of Long)
	
	Private _SwitchPayUserID As System.Nullable(Of Long)
	
	Private _AdminUserID As System.Nullable(Of Long)
	
	Private _IntegrationUserID As System.Nullable(Of Long)
	
	Private _FirstEscalationUserID As System.Nullable(Of Long)
	
	Private _SecondEscalationUserID As System.Nullable(Of Long)
	
	Private _ACPASUserID As System.Nullable(Of Long)
	
	Private _CompuscanUserID As System.Nullable(Of Long)
	
	Private _VodacomUserID As System.Nullable(Of Long)
	
	Private _ConnectMobileSMSUserID As System.Nullable(Of Long)
	
	Private _ConnectMobileNIUSSDUserID As System.Nullable(Of Long)
	
	Private _DateAdded As System.Nullable(Of Date)
	
	Private _DateUpdated As System.Nullable(Of Date)
	
	Private _CreatedBy As System.Nullable(Of Long)
	
	Private _UpdatedBy As System.Nullable(Of Long)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _IsActive As System.Nullable(Of Boolean)
	
	Private _PaymentReceivedQueueID As System.Nullable(Of Long)
	
	Private _CollectionQueueID As System.Nullable(Of Long)
	
	Private _WorkflowQueueID As System.Nullable(Of Long)
	
	Private _CommunicationQueueID As System.Nullable(Of Long)
	
	Private _RepositoryDatabaseID As System.Nullable(Of Long)
	
	Private _AuthDirectories As EntitySet(Of AuthDirectory)
	
	Private _AuthDirectoryRepositories As EntitySet(Of AuthDirectoryRepository)
	
	Private _Environments As EntitySet(Of Environment)
	
	Private _EnvironmentRepositories As EntitySet(Of EnvironmentRepository)
	
	Private _Repositories As EntitySet(Of Repository)
	
	Private _AuthDirectory As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory1 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory2 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory3 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory4 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory5 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory6 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory7 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory8 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory9 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory10 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory11 As EntityRef(Of AuthDirectory)
	
	Private _AuthDirectory12 As EntityRef(Of AuthDirectory)
	
	Private _Database As EntityRef(Of Database)
	
	Private _Database1 As EntityRef(Of Database)
	
	Private _Database2 As EntityRef(Of Database)
	
	Private _Database3 As EntityRef(Of Database)
	
	Private _Queue As EntityRef(Of Queue)
	
	Private _Queue1 As EntityRef(Of Queue)
	
	Private _Queue2 As EntityRef(Of Queue)
	
	Private _Queue3 As EntityRef(Of Queue)
	
	Private _Queue4 As EntityRef(Of Queue)
	
	Private _Queue5 As EntityRef(Of Queue)
	
	Private _Queue6 As EntityRef(Of Queue)
	
	Private _Queue7 As EntityRef(Of Queue)
	
	Private _Queue8 As EntityRef(Of Queue)
	
	Private _Queue9 As EntityRef(Of Queue)
	
	Private _Queue10 As EntityRef(Of Queue)
	
	Private _Repository As EntityRef(Of Repository)
	
	Private _RepositoryType As EntityRef(Of RepositoryType)
	
	Private _URL As EntityRef(Of URL)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDChanging(value As Long)
    End Sub
    Partial Private Sub OnIDChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnDefaultIDNoChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultIDNoChanged()
    End Sub
    Partial Private Sub OnDefaultMobileChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultMobileChanged()
    End Sub
    Partial Private Sub OnDefaultAmountChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnDefaultAmountChanged()
    End Sub
    Partial Private Sub OnDefaultBankChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnDefaultBankChanged()
    End Sub
    Partial Private Sub OnDefaultOTPChanging(value As String)
    End Sub
    Partial Private Sub OnDefaultOTPChanged()
    End Sub
    Partial Private Sub OnSystemQueueIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnSystemQueueIDChanged()
    End Sub
    Partial Private Sub OnSwitchPayQueueIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnSwitchPayQueueIDChanged()
    End Sub
    Partial Private Sub OnFinanceQueueIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFinanceQueueIDChanged()
    End Sub
    Partial Private Sub OnDealsQueueIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnDealsQueueIDChanged()
    End Sub
    Partial Private Sub OnPaymentsQueueIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnPaymentsQueueIDChanged()
    End Sub
    Partial Private Sub OnVerifyPOPQueueIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnVerifyPOPQueueIDChanged()
    End Sub
    Partial Private Sub OnApprovePaymentQueueIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnApprovePaymentQueueIDChanged()
    End Sub
    Partial Private Sub OnURLIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnURLIDChanged()
    End Sub
    Partial Private Sub OnEntryWorkflowChanging(value As String)
    End Sub
    Partial Private Sub OnEntryWorkflowChanged()
    End Sub
    Partial Private Sub OnDealAdminWorkflowChanging(value As String)
    End Sub
    Partial Private Sub OnDealAdminWorkflowChanged()
    End Sub
    Partial Private Sub OnDashboardWorkflowChanging(value As String)
    End Sub
    Partial Private Sub OnDashboardWorkflowChanged()
    End Sub
    Partial Private Sub OnMainDatabaseIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMainDatabaseIDChanged()
    End Sub
    Partial Private Sub OnDatabaseIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnDatabaseIDChanged()
    End Sub
    Partial Private Sub OnRulesEngineDBIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnRulesEngineDBIDChanged()
    End Sub
    Partial Private Sub OnMainRepositoryIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnMainRepositoryIDChanged()
    End Sub
    Partial Private Sub OnRepositoryTypeIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnRepositoryTypeIDChanged()
    End Sub
    Partial Private Sub OnServiceUserIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnServiceUserIDChanged()
    End Sub
    Partial Private Sub OnSwitchPayUserIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnSwitchPayUserIDChanged()
    End Sub
    Partial Private Sub OnAdminUserIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnAdminUserIDChanged()
    End Sub
    Partial Private Sub OnIntegrationUserIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnIntegrationUserIDChanged()
    End Sub
    Partial Private Sub OnFirstEscalationUserIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnFirstEscalationUserIDChanged()
    End Sub
    Partial Private Sub OnSecondEscalationUserIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnSecondEscalationUserIDChanged()
    End Sub
    Partial Private Sub OnACPASUserIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnACPASUserIDChanged()
    End Sub
    Partial Private Sub OnCompuscanUserIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCompuscanUserIDChanged()
    End Sub
    Partial Private Sub OnVodacomUserIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnVodacomUserIDChanged()
    End Sub
    Partial Private Sub OnConnectMobileSMSUserIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnConnectMobileSMSUserIDChanged()
    End Sub
    Partial Private Sub OnConnectMobileNIUSSDUserIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnConnectMobileNIUSSDUserIDChanged()
    End Sub
    Partial Private Sub OnDateAddedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateAddedChanged()
    End Sub
    Partial Private Sub OnDateUpdatedChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnDateUpdatedChanged()
    End Sub
    Partial Private Sub OnCreatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCreatedByChanged()
    End Sub
    Partial Private Sub OnUpdatedByChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnUpdatedByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    Partial Private Sub OnPaymentReceivedQueueIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnPaymentReceivedQueueIDChanged()
    End Sub
    Partial Private Sub OnCollectionQueueIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCollectionQueueIDChanged()
    End Sub
    Partial Private Sub OnWorkflowQueueIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnWorkflowQueueIDChanged()
    End Sub
    Partial Private Sub OnCommunicationQueueIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnCommunicationQueueIDChanged()
    End Sub
    Partial Private Sub OnRepositoryDatabaseIDChanging(value As System.Nullable(Of Long))
    End Sub
    Partial Private Sub OnRepositoryDatabaseIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._AuthDirectories = New EntitySet(Of AuthDirectory)(AddressOf Me.attach_AuthDirectories, AddressOf Me.detach_AuthDirectories)
		Me._AuthDirectoryRepositories = New EntitySet(Of AuthDirectoryRepository)(AddressOf Me.attach_AuthDirectoryRepositories, AddressOf Me.detach_AuthDirectoryRepositories)
		Me._Environments = New EntitySet(Of Environment)(AddressOf Me.attach_Environments, AddressOf Me.detach_Environments)
		Me._EnvironmentRepositories = New EntitySet(Of EnvironmentRepository)(AddressOf Me.attach_EnvironmentRepositories, AddressOf Me.detach_EnvironmentRepositories)
		Me._Repositories = New EntitySet(Of Repository)(AddressOf Me.attach_Repositories, AddressOf Me.detach_Repositories)
		Me._AuthDirectory = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory1 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory2 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory3 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory4 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory5 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory6 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory7 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory8 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory9 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory10 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory11 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._AuthDirectory12 = CType(Nothing, EntityRef(Of AuthDirectory))
		Me._Database = CType(Nothing, EntityRef(Of Database))
		Me._Database1 = CType(Nothing, EntityRef(Of Database))
		Me._Database2 = CType(Nothing, EntityRef(Of Database))
		Me._Database3 = CType(Nothing, EntityRef(Of Database))
		Me._Queue = CType(Nothing, EntityRef(Of Queue))
		Me._Queue1 = CType(Nothing, EntityRef(Of Queue))
		Me._Queue2 = CType(Nothing, EntityRef(Of Queue))
		Me._Queue3 = CType(Nothing, EntityRef(Of Queue))
		Me._Queue4 = CType(Nothing, EntityRef(Of Queue))
		Me._Queue5 = CType(Nothing, EntityRef(Of Queue))
		Me._Queue6 = CType(Nothing, EntityRef(Of Queue))
		Me._Queue7 = CType(Nothing, EntityRef(Of Queue))
		Me._Queue8 = CType(Nothing, EntityRef(Of Queue))
		Me._Queue9 = CType(Nothing, EntityRef(Of Queue))
		Me._Queue10 = CType(Nothing, EntityRef(Of Queue))
		Me._Repository = CType(Nothing, EntityRef(Of Repository))
		Me._RepositoryType = CType(Nothing, EntityRef(Of RepositoryType))
		Me._URL = CType(Nothing, EntityRef(Of URL))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ID", AutoSync:=AutoSync.OnInsert, DbType:="BigInt NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ID() As Long
		Get
			Return Me._ID
		End Get
		Set
			If ((Me._ID = value)  _
						= false) Then
				Me.OnIDChanging(value)
				Me.SendPropertyChanging
				Me._ID = value
				Me.SendPropertyChanged("ID")
				Me.OnIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="NVarChar(500) NOT NULL", CanBeNull:=false)>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultIDNo", DbType:="NVarChar(50)")>  _
	Public Property DefaultIDNo() As String
		Get
			Return Me._DefaultIDNo
		End Get
		Set
			If (String.Equals(Me._DefaultIDNo, value) = false) Then
				Me.OnDefaultIDNoChanging(value)
				Me.SendPropertyChanging
				Me._DefaultIDNo = value
				Me.SendPropertyChanged("DefaultIDNo")
				Me.OnDefaultIDNoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultMobile", DbType:="NVarChar(50)")>  _
	Public Property DefaultMobile() As String
		Get
			Return Me._DefaultMobile
		End Get
		Set
			If (String.Equals(Me._DefaultMobile, value) = false) Then
				Me.OnDefaultMobileChanging(value)
				Me.SendPropertyChanging
				Me._DefaultMobile = value
				Me.SendPropertyChanged("DefaultMobile")
				Me.OnDefaultMobileChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultAmount", DbType:="Money")>  _
	Public Property DefaultAmount() As System.Nullable(Of Decimal)
		Get
			Return Me._DefaultAmount
		End Get
		Set
			If (Me._DefaultAmount.Equals(value) = false) Then
				Me.OnDefaultAmountChanging(value)
				Me.SendPropertyChanging
				Me._DefaultAmount = value
				Me.SendPropertyChanged("DefaultAmount")
				Me.OnDefaultAmountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultBank", DbType:="Int")>  _
	Public Property DefaultBank() As System.Nullable(Of Integer)
		Get
			Return Me._DefaultBank
		End Get
		Set
			If (Me._DefaultBank.Equals(value) = false) Then
				Me.OnDefaultBankChanging(value)
				Me.SendPropertyChanging
				Me._DefaultBank = value
				Me.SendPropertyChanged("DefaultBank")
				Me.OnDefaultBankChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DefaultOTP", DbType:="NVarChar(10)")>  _
	Public Property DefaultOTP() As String
		Get
			Return Me._DefaultOTP
		End Get
		Set
			If (String.Equals(Me._DefaultOTP, value) = false) Then
				Me.OnDefaultOTPChanging(value)
				Me.SendPropertyChanging
				Me._DefaultOTP = value
				Me.SendPropertyChanged("DefaultOTP")
				Me.OnDefaultOTPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SystemQueueID", DbType:="BigInt")>  _
	Public Property SystemQueueID() As System.Nullable(Of Long)
		Get
			Return Me._SystemQueueID
		End Get
		Set
			If (Me._SystemQueueID.Equals(value) = false) Then
				If Me._Queue5.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSystemQueueIDChanging(value)
				Me.SendPropertyChanging
				Me._SystemQueueID = value
				Me.SendPropertyChanged("SystemQueueID")
				Me.OnSystemQueueIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SwitchPayQueueID", DbType:="BigInt")>  _
	Public Property SwitchPayQueueID() As System.Nullable(Of Long)
		Get
			Return Me._SwitchPayQueueID
		End Get
		Set
			If (Me._SwitchPayQueueID.Equals(value) = false) Then
				If Me._Queue4.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSwitchPayQueueIDChanging(value)
				Me.SendPropertyChanging
				Me._SwitchPayQueueID = value
				Me.SendPropertyChanged("SwitchPayQueueID")
				Me.OnSwitchPayQueueIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinanceQueueID", DbType:="BigInt")>  _
	Public Property FinanceQueueID() As System.Nullable(Of Long)
		Get
			Return Me._FinanceQueueID
		End Get
		Set
			If (Me._FinanceQueueID.Equals(value) = false) Then
				If Me._Queue1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFinanceQueueIDChanging(value)
				Me.SendPropertyChanging
				Me._FinanceQueueID = value
				Me.SendPropertyChanged("FinanceQueueID")
				Me.OnFinanceQueueIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DealsQueueID", DbType:="BigInt")>  _
	Public Property DealsQueueID() As System.Nullable(Of Long)
		Get
			Return Me._DealsQueueID
		End Get
		Set
			If (Me._DealsQueueID.Equals(value) = false) Then
				If Me._Queue.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDealsQueueIDChanging(value)
				Me.SendPropertyChanging
				Me._DealsQueueID = value
				Me.SendPropertyChanged("DealsQueueID")
				Me.OnDealsQueueIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentsQueueID", DbType:="BigInt")>  _
	Public Property PaymentsQueueID() As System.Nullable(Of Long)
		Get
			Return Me._PaymentsQueueID
		End Get
		Set
			If (Me._PaymentsQueueID.Equals(value) = false) Then
				If Me._Queue3.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPaymentsQueueIDChanging(value)
				Me.SendPropertyChanging
				Me._PaymentsQueueID = value
				Me.SendPropertyChanged("PaymentsQueueID")
				Me.OnPaymentsQueueIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VerifyPOPQueueID", DbType:="BigInt")>  _
	Public Property VerifyPOPQueueID() As System.Nullable(Of Long)
		Get
			Return Me._VerifyPOPQueueID
		End Get
		Set
			If (Me._VerifyPOPQueueID.Equals(value) = false) Then
				If Me._Queue7.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVerifyPOPQueueIDChanging(value)
				Me.SendPropertyChanging
				Me._VerifyPOPQueueID = value
				Me.SendPropertyChanged("VerifyPOPQueueID")
				Me.OnVerifyPOPQueueIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ApprovePaymentQueueID", DbType:="BigInt")>  _
	Public Property ApprovePaymentQueueID() As System.Nullable(Of Long)
		Get
			Return Me._ApprovePaymentQueueID
		End Get
		Set
			If (Me._ApprovePaymentQueueID.Equals(value) = false) Then
				If Me._Queue6.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnApprovePaymentQueueIDChanging(value)
				Me.SendPropertyChanging
				Me._ApprovePaymentQueueID = value
				Me.SendPropertyChanged("ApprovePaymentQueueID")
				Me.OnApprovePaymentQueueIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_URLID", DbType:="BigInt")>  _
	Public Property URLID() As System.Nullable(Of Long)
		Get
			Return Me._URLID
		End Get
		Set
			If (Me._URLID.Equals(value) = false) Then
				If Me._URL.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnURLIDChanging(value)
				Me.SendPropertyChanging
				Me._URLID = value
				Me.SendPropertyChanged("URLID")
				Me.OnURLIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EntryWorkflow", DbType:="NVarChar(500)")>  _
	Public Property EntryWorkflow() As String
		Get
			Return Me._EntryWorkflow
		End Get
		Set
			If (String.Equals(Me._EntryWorkflow, value) = false) Then
				Me.OnEntryWorkflowChanging(value)
				Me.SendPropertyChanging
				Me._EntryWorkflow = value
				Me.SendPropertyChanged("EntryWorkflow")
				Me.OnEntryWorkflowChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DealAdminWorkflow", DbType:="NVarChar(500)")>  _
	Public Property DealAdminWorkflow() As String
		Get
			Return Me._DealAdminWorkflow
		End Get
		Set
			If (String.Equals(Me._DealAdminWorkflow, value) = false) Then
				Me.OnDealAdminWorkflowChanging(value)
				Me.SendPropertyChanging
				Me._DealAdminWorkflow = value
				Me.SendPropertyChanged("DealAdminWorkflow")
				Me.OnDealAdminWorkflowChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DashboardWorkflow", DbType:="NVarChar(500)")>  _
	Public Property DashboardWorkflow() As String
		Get
			Return Me._DashboardWorkflow
		End Get
		Set
			If (String.Equals(Me._DashboardWorkflow, value) = false) Then
				Me.OnDashboardWorkflowChanging(value)
				Me.SendPropertyChanging
				Me._DashboardWorkflow = value
				Me.SendPropertyChanged("DashboardWorkflow")
				Me.OnDashboardWorkflowChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MainDatabaseID", DbType:="BigInt")>  _
	Public Property MainDatabaseID() As System.Nullable(Of Long)
		Get
			Return Me._MainDatabaseID
		End Get
		Set
			If (Me._MainDatabaseID.Equals(value) = false) Then
				If Me._Database1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMainDatabaseIDChanging(value)
				Me.SendPropertyChanging
				Me._MainDatabaseID = value
				Me.SendPropertyChanged("MainDatabaseID")
				Me.OnMainDatabaseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DatabaseID", DbType:="BigInt")>  _
	Public Property DatabaseID() As System.Nullable(Of Long)
		Get
			Return Me._DatabaseID
		End Get
		Set
			If (Me._DatabaseID.Equals(value) = false) Then
				If Me._Database.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnDatabaseIDChanging(value)
				Me.SendPropertyChanging
				Me._DatabaseID = value
				Me.SendPropertyChanged("DatabaseID")
				Me.OnDatabaseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RulesEngineDBID", DbType:="BigInt")>  _
	Public Property RulesEngineDBID() As System.Nullable(Of Long)
		Get
			Return Me._RulesEngineDBID
		End Get
		Set
			If (Me._RulesEngineDBID.Equals(value) = false) Then
				If Me._Database2.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRulesEngineDBIDChanging(value)
				Me.SendPropertyChanging
				Me._RulesEngineDBID = value
				Me.SendPropertyChanged("RulesEngineDBID")
				Me.OnRulesEngineDBIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MainRepositoryID", DbType:="BigInt")>  _
	Public Property MainRepositoryID() As System.Nullable(Of Long)
		Get
			Return Me._MainRepositoryID
		End Get
		Set
			If (Me._MainRepositoryID.Equals(value) = false) Then
				If Me._Repository.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMainRepositoryIDChanging(value)
				Me.SendPropertyChanging
				Me._MainRepositoryID = value
				Me.SendPropertyChanged("MainRepositoryID")
				Me.OnMainRepositoryIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RepositoryTypeID", DbType:="BigInt")>  _
	Public Property RepositoryTypeID() As System.Nullable(Of Long)
		Get
			Return Me._RepositoryTypeID
		End Get
		Set
			If (Me._RepositoryTypeID.Equals(value) = false) Then
				If Me._RepositoryType.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRepositoryTypeIDChanging(value)
				Me.SendPropertyChanging
				Me._RepositoryTypeID = value
				Me.SendPropertyChanged("RepositoryTypeID")
				Me.OnRepositoryTypeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ServiceUserID", DbType:="BigInt")>  _
	Public Property ServiceUserID() As System.Nullable(Of Long)
		Get
			Return Me._ServiceUserID
		End Get
		Set
			If (Me._ServiceUserID.Equals(value) = false) Then
				If Me._AuthDirectory8.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnServiceUserIDChanging(value)
				Me.SendPropertyChanging
				Me._ServiceUserID = value
				Me.SendPropertyChanged("ServiceUserID")
				Me.OnServiceUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SwitchPayUserID", DbType:="BigInt")>  _
	Public Property SwitchPayUserID() As System.Nullable(Of Long)
		Get
			Return Me._SwitchPayUserID
		End Get
		Set
			If (Me._SwitchPayUserID.Equals(value) = false) Then
				If Me._AuthDirectory9.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSwitchPayUserIDChanging(value)
				Me.SendPropertyChanging
				Me._SwitchPayUserID = value
				Me.SendPropertyChanged("SwitchPayUserID")
				Me.OnSwitchPayUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_AdminUserID", DbType:="BigInt")>  _
	Public Property AdminUserID() As System.Nullable(Of Long)
		Get
			Return Me._AdminUserID
		End Get
		Set
			If (Me._AdminUserID.Equals(value) = false) Then
				If Me._AuthDirectory.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnAdminUserIDChanging(value)
				Me.SendPropertyChanging
				Me._AdminUserID = value
				Me.SendPropertyChanged("AdminUserID")
				Me.OnAdminUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IntegrationUserID", DbType:="BigInt")>  _
	Public Property IntegrationUserID() As System.Nullable(Of Long)
		Get
			Return Me._IntegrationUserID
		End Get
		Set
			If (Me._IntegrationUserID.Equals(value) = false) Then
				If Me._AuthDirectory6.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIntegrationUserIDChanging(value)
				Me.SendPropertyChanging
				Me._IntegrationUserID = value
				Me.SendPropertyChanged("IntegrationUserID")
				Me.OnIntegrationUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FirstEscalationUserID", DbType:="BigInt")>  _
	Public Property FirstEscalationUserID() As System.Nullable(Of Long)
		Get
			Return Me._FirstEscalationUserID
		End Get
		Set
			If (Me._FirstEscalationUserID.Equals(value) = false) Then
				If Me._AuthDirectory5.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFirstEscalationUserIDChanging(value)
				Me.SendPropertyChanging
				Me._FirstEscalationUserID = value
				Me.SendPropertyChanged("FirstEscalationUserID")
				Me.OnFirstEscalationUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SecondEscalationUserID", DbType:="BigInt")>  _
	Public Property SecondEscalationUserID() As System.Nullable(Of Long)
		Get
			Return Me._SecondEscalationUserID
		End Get
		Set
			If (Me._SecondEscalationUserID.Equals(value) = false) Then
				If Me._AuthDirectory7.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSecondEscalationUserIDChanging(value)
				Me.SendPropertyChanging
				Me._SecondEscalationUserID = value
				Me.SendPropertyChanged("SecondEscalationUserID")
				Me.OnSecondEscalationUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ACPASUserID", DbType:="BigInt")>  _
	Public Property ACPASUserID() As System.Nullable(Of Long)
		Get
			Return Me._ACPASUserID
		End Get
		Set
			If (Me._ACPASUserID.Equals(value) = false) Then
				If Me._AuthDirectory11.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnACPASUserIDChanging(value)
				Me.SendPropertyChanging
				Me._ACPASUserID = value
				Me.SendPropertyChanged("ACPASUserID")
				Me.OnACPASUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompuscanUserID", DbType:="BigInt")>  _
	Public Property CompuscanUserID() As System.Nullable(Of Long)
		Get
			Return Me._CompuscanUserID
		End Get
		Set
			If (Me._CompuscanUserID.Equals(value) = false) Then
				If Me._AuthDirectory12.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCompuscanUserIDChanging(value)
				Me.SendPropertyChanging
				Me._CompuscanUserID = value
				Me.SendPropertyChanged("CompuscanUserID")
				Me.OnCompuscanUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_VodacomUserID", DbType:="BigInt")>  _
	Public Property VodacomUserID() As System.Nullable(Of Long)
		Get
			Return Me._VodacomUserID
		End Get
		Set
			If (Me._VodacomUserID.Equals(value) = false) Then
				If Me._AuthDirectory4.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnVodacomUserIDChanging(value)
				Me.SendPropertyChanging
				Me._VodacomUserID = value
				Me.SendPropertyChanged("VodacomUserID")
				Me.OnVodacomUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConnectMobileSMSUserID", DbType:="BigInt")>  _
	Public Property ConnectMobileSMSUserID() As System.Nullable(Of Long)
		Get
			Return Me._ConnectMobileSMSUserID
		End Get
		Set
			If (Me._ConnectMobileSMSUserID.Equals(value) = false) Then
				If Me._AuthDirectory3.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnConnectMobileSMSUserIDChanging(value)
				Me.SendPropertyChanging
				Me._ConnectMobileSMSUserID = value
				Me.SendPropertyChanged("ConnectMobileSMSUserID")
				Me.OnConnectMobileSMSUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ConnectMobileNIUSSDUserID", DbType:="BigInt")>  _
	Public Property ConnectMobileNIUSSDUserID() As System.Nullable(Of Long)
		Get
			Return Me._ConnectMobileNIUSSDUserID
		End Get
		Set
			If (Me._ConnectMobileNIUSSDUserID.Equals(value) = false) Then
				If Me._AuthDirectory2.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnConnectMobileNIUSSDUserIDChanging(value)
				Me.SendPropertyChanging
				Me._ConnectMobileNIUSSDUserID = value
				Me.SendPropertyChanged("ConnectMobileNIUSSDUserID")
				Me.OnConnectMobileNIUSSDUserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateAdded", DbType:="DateTime")>  _
	Public Property DateAdded() As System.Nullable(Of Date)
		Get
			Return Me._DateAdded
		End Get
		Set
			If (Me._DateAdded.Equals(value) = false) Then
				Me.OnDateAddedChanging(value)
				Me.SendPropertyChanging
				Me._DateAdded = value
				Me.SendPropertyChanged("DateAdded")
				Me.OnDateAddedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateUpdated", DbType:="DateTime")>  _
	Public Property DateUpdated() As System.Nullable(Of Date)
		Get
			Return Me._DateUpdated
		End Get
		Set
			If (Me._DateUpdated.Equals(value) = false) Then
				Me.OnDateUpdatedChanging(value)
				Me.SendPropertyChanging
				Me._DateUpdated = value
				Me.SendPropertyChanged("DateUpdated")
				Me.OnDateUpdatedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedBy", DbType:="BigInt")>  _
	Public Property CreatedBy() As System.Nullable(Of Long)
		Get
			Return Me._CreatedBy
		End Get
		Set
			If (Me._CreatedBy.Equals(value) = false) Then
				If Me._AuthDirectory1.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCreatedByChanging(value)
				Me.SendPropertyChanging
				Me._CreatedBy = value
				Me.SendPropertyChanged("CreatedBy")
				Me.OnCreatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UpdatedBy", DbType:="BigInt")>  _
	Public Property UpdatedBy() As System.Nullable(Of Long)
		Get
			Return Me._UpdatedBy
		End Get
		Set
			If (Me._UpdatedBy.Equals(value) = false) Then
				If Me._AuthDirectory10.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnUpdatedByChanging(value)
				Me.SendPropertyChanging
				Me._UpdatedBy = value
				Me.SendPropertyChanged("UpdatedBy")
				Me.OnUpdatedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit")>  _
	Public Property IsActive() As System.Nullable(Of Boolean)
		Get
			Return Me._IsActive
		End Get
		Set
			If (Me._IsActive.Equals(value) = false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PaymentReceivedQueueID", DbType:="BigInt")>  _
	Public Property PaymentReceivedQueueID() As System.Nullable(Of Long)
		Get
			Return Me._PaymentReceivedQueueID
		End Get
		Set
			If (Me._PaymentReceivedQueueID.Equals(value) = false) Then
				If Me._Queue8.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPaymentReceivedQueueIDChanging(value)
				Me.SendPropertyChanging
				Me._PaymentReceivedQueueID = value
				Me.SendPropertyChanged("PaymentReceivedQueueID")
				Me.OnPaymentReceivedQueueIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CollectionQueueID", DbType:="BigInt")>  _
	Public Property CollectionQueueID() As System.Nullable(Of Long)
		Get
			Return Me._CollectionQueueID
		End Get
		Set
			If (Me._CollectionQueueID.Equals(value) = false) Then
				If Me._Queue9.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCollectionQueueIDChanging(value)
				Me.SendPropertyChanging
				Me._CollectionQueueID = value
				Me.SendPropertyChanged("CollectionQueueID")
				Me.OnCollectionQueueIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WorkflowQueueID", DbType:="BigInt")>  _
	Public Property WorkflowQueueID() As System.Nullable(Of Long)
		Get
			Return Me._WorkflowQueueID
		End Get
		Set
			If (Me._WorkflowQueueID.Equals(value) = false) Then
				If Me._Queue10.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnWorkflowQueueIDChanging(value)
				Me.SendPropertyChanging
				Me._WorkflowQueueID = value
				Me.SendPropertyChanged("WorkflowQueueID")
				Me.OnWorkflowQueueIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CommunicationQueueID", DbType:="BigInt")>  _
	Public Property CommunicationQueueID() As System.Nullable(Of Long)
		Get
			Return Me._CommunicationQueueID
		End Get
		Set
			If (Me._CommunicationQueueID.Equals(value) = false) Then
				If Me._Queue2.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCommunicationQueueIDChanging(value)
				Me.SendPropertyChanging
				Me._CommunicationQueueID = value
				Me.SendPropertyChanged("CommunicationQueueID")
				Me.OnCommunicationQueueIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RepositoryDatabaseID", DbType:="BigInt")>  _
	Public Property RepositoryDatabaseID() As System.Nullable(Of Long)
		Get
			Return Me._RepositoryDatabaseID
		End Get
		Set
			If (Me._RepositoryDatabaseID.Equals(value) = false) Then
				If Me._Database3.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRepositoryDatabaseIDChanging(value)
				Me.SendPropertyChanging
				Me._RepositoryDatabaseID = value
				Me.SendPropertyChanged("RepositoryDatabaseID")
				Me.OnRepositoryDatabaseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Repository_AuthDirectory", Storage:="_AuthDirectories", ThisKey:="ID", OtherKey:="RepositoryID")>  _
	Public Property AuthDirectories() As EntitySet(Of AuthDirectory)
		Get
			Return Me._AuthDirectories
		End Get
		Set
			Me._AuthDirectories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Repository_AuthDirectoryRepository", Storage:="_AuthDirectoryRepositories", ThisKey:="ID", OtherKey:="RepositoryID")>  _
	Public Property AuthDirectoryRepositories() As EntitySet(Of AuthDirectoryRepository)
		Get
			Return Me._AuthDirectoryRepositories
		End Get
		Set
			Me._AuthDirectoryRepositories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Repository_Environment", Storage:="_Environments", ThisKey:="ID", OtherKey:="MainRepositoryID")>  _
	Public Property Environments() As EntitySet(Of Environment)
		Get
			Return Me._Environments
		End Get
		Set
			Me._Environments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Repository_EnvironmentRepository", Storage:="_EnvironmentRepositories", ThisKey:="ID", OtherKey:="RepositoryID")>  _
	Public Property EnvironmentRepositories() As EntitySet(Of EnvironmentRepository)
		Get
			Return Me._EnvironmentRepositories
		End Get
		Set
			Me._EnvironmentRepositories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Repository_Repository", Storage:="_Repositories", ThisKey:="ID", OtherKey:="MainRepositoryID")>  _
	Public Property Repositories() As EntitySet(Of Repository)
		Get
			Return Me._Repositories
		End Get
		Set
			Me._Repositories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository", Storage:="_AuthDirectory", ThisKey:="AdminUserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory() As AuthDirectory
		Get
			Return Me._AuthDirectory.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory.Entity = Nothing
					previousValue.Repositories.Remove(Me)
				End If
				Me._AuthDirectory.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories.Add(Me)
					Me._AdminUserID = value.ID
				Else
					Me._AdminUserID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository1", Storage:="_AuthDirectory1", ThisKey:="CreatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory1() As AuthDirectory
		Get
			Return Me._AuthDirectory1.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory1.Entity = Nothing
					previousValue.Repositories1.Remove(Me)
				End If
				Me._AuthDirectory1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories1.Add(Me)
					Me._CreatedBy = value.ID
				Else
					Me._CreatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository2", Storage:="_AuthDirectory2", ThisKey:="ConnectMobileNIUSSDUserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory2() As AuthDirectory
		Get
			Return Me._AuthDirectory2.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory2.Entity = Nothing
					previousValue.Repositories2.Remove(Me)
				End If
				Me._AuthDirectory2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories2.Add(Me)
					Me._ConnectMobileNIUSSDUserID = value.ID
				Else
					Me._ConnectMobileNIUSSDUserID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory2")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository3", Storage:="_AuthDirectory3", ThisKey:="ConnectMobileSMSUserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory3() As AuthDirectory
		Get
			Return Me._AuthDirectory3.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory3.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory3.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory3.Entity = Nothing
					previousValue.Repositories3.Remove(Me)
				End If
				Me._AuthDirectory3.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories3.Add(Me)
					Me._ConnectMobileSMSUserID = value.ID
				Else
					Me._ConnectMobileSMSUserID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory3")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository4", Storage:="_AuthDirectory4", ThisKey:="VodacomUserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory4() As AuthDirectory
		Get
			Return Me._AuthDirectory4.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory4.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory4.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory4.Entity = Nothing
					previousValue.Repositories4.Remove(Me)
				End If
				Me._AuthDirectory4.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories4.Add(Me)
					Me._VodacomUserID = value.ID
				Else
					Me._VodacomUserID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory4")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository5", Storage:="_AuthDirectory5", ThisKey:="FirstEscalationUserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory5() As AuthDirectory
		Get
			Return Me._AuthDirectory5.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory5.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory5.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory5.Entity = Nothing
					previousValue.Repositories5.Remove(Me)
				End If
				Me._AuthDirectory5.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories5.Add(Me)
					Me._FirstEscalationUserID = value.ID
				Else
					Me._FirstEscalationUserID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory5")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository6", Storage:="_AuthDirectory6", ThisKey:="IntegrationUserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory6() As AuthDirectory
		Get
			Return Me._AuthDirectory6.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory6.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory6.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory6.Entity = Nothing
					previousValue.Repositories6.Remove(Me)
				End If
				Me._AuthDirectory6.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories6.Add(Me)
					Me._IntegrationUserID = value.ID
				Else
					Me._IntegrationUserID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory6")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository7", Storage:="_AuthDirectory7", ThisKey:="SecondEscalationUserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory7() As AuthDirectory
		Get
			Return Me._AuthDirectory7.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory7.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory7.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory7.Entity = Nothing
					previousValue.Repositories7.Remove(Me)
				End If
				Me._AuthDirectory7.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories7.Add(Me)
					Me._SecondEscalationUserID = value.ID
				Else
					Me._SecondEscalationUserID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory7")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository8", Storage:="_AuthDirectory8", ThisKey:="ServiceUserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory8() As AuthDirectory
		Get
			Return Me._AuthDirectory8.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory8.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory8.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory8.Entity = Nothing
					previousValue.Repositories8.Remove(Me)
				End If
				Me._AuthDirectory8.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories8.Add(Me)
					Me._ServiceUserID = value.ID
				Else
					Me._ServiceUserID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory8")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository9", Storage:="_AuthDirectory9", ThisKey:="SwitchPayUserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory9() As AuthDirectory
		Get
			Return Me._AuthDirectory9.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory9.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory9.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory9.Entity = Nothing
					previousValue.Repositories9.Remove(Me)
				End If
				Me._AuthDirectory9.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories9.Add(Me)
					Me._SwitchPayUserID = value.ID
				Else
					Me._SwitchPayUserID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory9")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository10", Storage:="_AuthDirectory10", ThisKey:="UpdatedBy", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory10() As AuthDirectory
		Get
			Return Me._AuthDirectory10.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory10.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory10.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory10.Entity = Nothing
					previousValue.Repositories10.Remove(Me)
				End If
				Me._AuthDirectory10.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories10.Add(Me)
					Me._UpdatedBy = value.ID
				Else
					Me._UpdatedBy = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory10")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository11", Storage:="_AuthDirectory11", ThisKey:="ACPASUserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory11() As AuthDirectory
		Get
			Return Me._AuthDirectory11.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory11.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory11.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory11.Entity = Nothing
					previousValue.Repositories11.Remove(Me)
				End If
				Me._AuthDirectory11.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories11.Add(Me)
					Me._ACPASUserID = value.ID
				Else
					Me._ACPASUserID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory11")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="AuthDirectory_Repository12", Storage:="_AuthDirectory12", ThisKey:="CompuscanUserID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property AuthDirectory12() As AuthDirectory
		Get
			Return Me._AuthDirectory12.Entity
		End Get
		Set
			Dim previousValue As AuthDirectory = Me._AuthDirectory12.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._AuthDirectory12.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._AuthDirectory12.Entity = Nothing
					previousValue.Repositories12.Remove(Me)
				End If
				Me._AuthDirectory12.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories12.Add(Me)
					Me._CompuscanUserID = value.ID
				Else
					Me._CompuscanUserID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("AuthDirectory12")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Database_Repository", Storage:="_Database", ThisKey:="DatabaseID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Database() As Database
		Get
			Return Me._Database.Entity
		End Get
		Set
			Dim previousValue As Database = Me._Database.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Database.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Database.Entity = Nothing
					previousValue.Repositories.Remove(Me)
				End If
				Me._Database.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories.Add(Me)
					Me._DatabaseID = value.ID
				Else
					Me._DatabaseID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Database")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Database_Repository1", Storage:="_Database1", ThisKey:="MainDatabaseID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Database1() As Database
		Get
			Return Me._Database1.Entity
		End Get
		Set
			Dim previousValue As Database = Me._Database1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Database1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Database1.Entity = Nothing
					previousValue.Repositories1.Remove(Me)
				End If
				Me._Database1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories1.Add(Me)
					Me._MainDatabaseID = value.ID
				Else
					Me._MainDatabaseID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Database1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Database_Repository2", Storage:="_Database2", ThisKey:="RulesEngineDBID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Database2() As Database
		Get
			Return Me._Database2.Entity
		End Get
		Set
			Dim previousValue As Database = Me._Database2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Database2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Database2.Entity = Nothing
					previousValue.Repositories2.Remove(Me)
				End If
				Me._Database2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories2.Add(Me)
					Me._RulesEngineDBID = value.ID
				Else
					Me._RulesEngineDBID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Database2")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Database_Repository3", Storage:="_Database3", ThisKey:="RepositoryDatabaseID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Database3() As Database
		Get
			Return Me._Database3.Entity
		End Get
		Set
			Dim previousValue As Database = Me._Database3.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Database3.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Database3.Entity = Nothing
					previousValue.Repositories3.Remove(Me)
				End If
				Me._Database3.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories3.Add(Me)
					Me._RepositoryDatabaseID = value.ID
				Else
					Me._RepositoryDatabaseID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Database3")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Queue_Repository", Storage:="_Queue", ThisKey:="DealsQueueID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Queue() As Queue
		Get
			Return Me._Queue.Entity
		End Get
		Set
			Dim previousValue As Queue = Me._Queue.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Queue.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Queue.Entity = Nothing
					previousValue.Repositories.Remove(Me)
				End If
				Me._Queue.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories.Add(Me)
					Me._DealsQueueID = value.ID
				Else
					Me._DealsQueueID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Queue")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Queue_Repository1", Storage:="_Queue1", ThisKey:="FinanceQueueID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Queue1() As Queue
		Get
			Return Me._Queue1.Entity
		End Get
		Set
			Dim previousValue As Queue = Me._Queue1.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Queue1.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Queue1.Entity = Nothing
					previousValue.Repositories1.Remove(Me)
				End If
				Me._Queue1.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories1.Add(Me)
					Me._FinanceQueueID = value.ID
				Else
					Me._FinanceQueueID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Queue1")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Queue_Repository2", Storage:="_Queue2", ThisKey:="CommunicationQueueID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Queue2() As Queue
		Get
			Return Me._Queue2.Entity
		End Get
		Set
			Dim previousValue As Queue = Me._Queue2.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Queue2.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Queue2.Entity = Nothing
					previousValue.Repositories2.Remove(Me)
				End If
				Me._Queue2.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories2.Add(Me)
					Me._CommunicationQueueID = value.ID
				Else
					Me._CommunicationQueueID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Queue2")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Queue_Repository3", Storage:="_Queue3", ThisKey:="PaymentsQueueID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Queue3() As Queue
		Get
			Return Me._Queue3.Entity
		End Get
		Set
			Dim previousValue As Queue = Me._Queue3.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Queue3.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Queue3.Entity = Nothing
					previousValue.Repositories3.Remove(Me)
				End If
				Me._Queue3.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories3.Add(Me)
					Me._PaymentsQueueID = value.ID
				Else
					Me._PaymentsQueueID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Queue3")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Queue_Repository4", Storage:="_Queue4", ThisKey:="SwitchPayQueueID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Queue4() As Queue
		Get
			Return Me._Queue4.Entity
		End Get
		Set
			Dim previousValue As Queue = Me._Queue4.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Queue4.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Queue4.Entity = Nothing
					previousValue.Repositories4.Remove(Me)
				End If
				Me._Queue4.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories4.Add(Me)
					Me._SwitchPayQueueID = value.ID
				Else
					Me._SwitchPayQueueID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Queue4")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Queue_Repository5", Storage:="_Queue5", ThisKey:="SystemQueueID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Queue5() As Queue
		Get
			Return Me._Queue5.Entity
		End Get
		Set
			Dim previousValue As Queue = Me._Queue5.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Queue5.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Queue5.Entity = Nothing
					previousValue.Repositories5.Remove(Me)
				End If
				Me._Queue5.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories5.Add(Me)
					Me._SystemQueueID = value.ID
				Else
					Me._SystemQueueID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Queue5")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Queue_Repository6", Storage:="_Queue6", ThisKey:="ApprovePaymentQueueID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Queue6() As Queue
		Get
			Return Me._Queue6.Entity
		End Get
		Set
			Dim previousValue As Queue = Me._Queue6.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Queue6.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Queue6.Entity = Nothing
					previousValue.Repositories6.Remove(Me)
				End If
				Me._Queue6.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories6.Add(Me)
					Me._ApprovePaymentQueueID = value.ID
				Else
					Me._ApprovePaymentQueueID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Queue6")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Queue_Repository7", Storage:="_Queue7", ThisKey:="VerifyPOPQueueID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Queue7() As Queue
		Get
			Return Me._Queue7.Entity
		End Get
		Set
			Dim previousValue As Queue = Me._Queue7.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Queue7.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Queue7.Entity = Nothing
					previousValue.Repositories7.Remove(Me)
				End If
				Me._Queue7.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories7.Add(Me)
					Me._VerifyPOPQueueID = value.ID
				Else
					Me._VerifyPOPQueueID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Queue7")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Queue_Repository8", Storage:="_Queue8", ThisKey:="PaymentReceivedQueueID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Queue8() As Queue
		Get
			Return Me._Queue8.Entity
		End Get
		Set
			Dim previousValue As Queue = Me._Queue8.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Queue8.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Queue8.Entity = Nothing
					previousValue.Repositories8.Remove(Me)
				End If
				Me._Queue8.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories8.Add(Me)
					Me._PaymentReceivedQueueID = value.ID
				Else
					Me._PaymentReceivedQueueID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Queue8")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Queue_Repository9", Storage:="_Queue9", ThisKey:="CollectionQueueID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Queue9() As Queue
		Get
			Return Me._Queue9.Entity
		End Get
		Set
			Dim previousValue As Queue = Me._Queue9.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Queue9.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Queue9.Entity = Nothing
					previousValue.Repositories9.Remove(Me)
				End If
				Me._Queue9.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories9.Add(Me)
					Me._CollectionQueueID = value.ID
				Else
					Me._CollectionQueueID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Queue9")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Queue_Repository10", Storage:="_Queue10", ThisKey:="WorkflowQueueID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Queue10() As Queue
		Get
			Return Me._Queue10.Entity
		End Get
		Set
			Dim previousValue As Queue = Me._Queue10.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Queue10.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Queue10.Entity = Nothing
					previousValue.Repositories10.Remove(Me)
				End If
				Me._Queue10.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories10.Add(Me)
					Me._WorkflowQueueID = value.ID
				Else
					Me._WorkflowQueueID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Queue10")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Repository_Repository", Storage:="_Repository", ThisKey:="MainRepositoryID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property Repository() As Repository
		Get
			Return Me._Repository.Entity
		End Get
		Set
			Dim previousValue As Repository = Me._Repository.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Repository.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Repository.Entity = Nothing
					previousValue.Repositories.Remove(Me)
				End If
				Me._Repository.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories.Add(Me)
					Me._MainRepositoryID = value.ID
				Else
					Me._MainRepositoryID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("Repository")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RepositoryType_Repository", Storage:="_RepositoryType", ThisKey:="RepositoryTypeID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property RepositoryType() As RepositoryType
		Get
			Return Me._RepositoryType.Entity
		End Get
		Set
			Dim previousValue As RepositoryType = Me._RepositoryType.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._RepositoryType.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._RepositoryType.Entity = Nothing
					previousValue.Repositories.Remove(Me)
				End If
				Me._RepositoryType.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories.Add(Me)
					Me._RepositoryTypeID = value.ID
				Else
					Me._RepositoryTypeID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("RepositoryType")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="URL_Repository", Storage:="_URL", ThisKey:="URLID", OtherKey:="ID", IsForeignKey:=true)>  _
	Public Property URL() As URL
		Get
			Return Me._URL.Entity
		End Get
		Set
			Dim previousValue As URL = Me._URL.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._URL.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._URL.Entity = Nothing
					previousValue.Repositories.Remove(Me)
				End If
				Me._URL.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Repositories.Add(Me)
					Me._URLID = value.ID
				Else
					Me._URLID = CType(Nothing, Nullable(Of Long))
				End If
				Me.SendPropertyChanged("URL")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_AuthDirectories(ByVal entity As AuthDirectory)
		Me.SendPropertyChanging
		entity.Repository = Me
	End Sub
	
	Private Sub detach_AuthDirectories(ByVal entity As AuthDirectory)
		Me.SendPropertyChanging
		entity.Repository = Nothing
	End Sub
	
	Private Sub attach_AuthDirectoryRepositories(ByVal entity As AuthDirectoryRepository)
		Me.SendPropertyChanging
		entity.Repository = Me
	End Sub
	
	Private Sub detach_AuthDirectoryRepositories(ByVal entity As AuthDirectoryRepository)
		Me.SendPropertyChanging
		entity.Repository = Nothing
	End Sub
	
	Private Sub attach_Environments(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.Repository = Me
	End Sub
	
	Private Sub detach_Environments(ByVal entity As Environment)
		Me.SendPropertyChanging
		entity.Repository = Nothing
	End Sub
	
	Private Sub attach_EnvironmentRepositories(ByVal entity As EnvironmentRepository)
		Me.SendPropertyChanging
		entity.Repository = Me
	End Sub
	
	Private Sub detach_EnvironmentRepositories(ByVal entity As EnvironmentRepository)
		Me.SendPropertyChanging
		entity.Repository = Nothing
	End Sub
	
	Private Sub attach_Repositories(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Repository = Me
	End Sub
	
	Private Sub detach_Repositories(ByVal entity As Repository)
		Me.SendPropertyChanging
		entity.Repository = Nothing
	End Sub
End Class
